Working... ---------------------------------------- 100% 0:00:10
Run started:2024-02-10 21:10:55.822334

Test results:
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\authmodules\apache2\privacyidea_apache.py:76:19
75	                "pass": password}
76	        response = requests.post(PRIVACYIDEA + "/validate/check", data=data,
77	                                 verify=SSLVERIFY)
78	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\api\lib\postpolicy.py:344:11
343	        ui = request.User.info
344	        ui["password"] = ""
345	        for key, value in ui.iteritems():

--------------------------------------------------
>> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
   Severity: Medium   Confidence: Medium
   CWE: CWE-605 (https://cwe.mitre.org/data/definitions/605.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b104_hardcoded_bind_all_interfaces.html
   Location: .\privacyidea\api\lib\prepolicy.py:1169:31
1168	    # retrieve the IP. This will also be the mapped IP!
1169	    client_ip = g.client_ip or "0.0.0.0"
1170	    # ...and the user agent.

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\api\smtpserver.py:99:33
98	        if decrypted_password == FAILED_TO_DECRYPT_PASSWORD:
99	            decrypted_password = ""
100	        res[server.config.identifier] = {"server": server.config.server,

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\config.py:39:17
38	    SUPERUSER_REALM = ['adminrealm']
39	    SECRET_KEY = 'secret'
40	    SQLALCHEMY_DATABASE_URI = os.environ.get('TEST_DATABASE_URL') or \

--------------------------------------------------
>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b404-import-subprocess
   Location: .\privacyidea\lib\caconnectors\localca.py:34:0
33	from OpenSSL import crypto
34	from subprocess import Popen, PIPE
35	import yaml

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\caconnectors\localca.py:429:12
428	        args = shlex.split(cmd)
429	        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=workingdir)
430	        result, error = p.communicate()

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\caconnectors\localca.py:514:12
513	        args = shlex.split(cmd)
514	        p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=workingdir)
515	        result, error = p.communicate()

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\caconnectors\localca.py:559:16
558	            args = shlex.split(cmd)
559	            p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=workingdir)
560	            result, error = p.communicate()

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\caconnectors\localca.py:707:8
706	    args = shlex.split(command)
707	    p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=config.directory)
708	    result, error = p.communicate()

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\caconnectors\localca.py:721:8
720	    args = shlex.split(command)
721	    p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=config.directory)
722	    result, error = p.communicate()

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:50:0
49	from flask import current_app
50	from Crypto.Hash import SHA as SHA1
51	from Crypto.Hash import SHA256 as HashFunc

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA256 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:51:0
50	from Crypto.Hash import SHA as SHA1
51	from Crypto.Hash import SHA256 as HashFunc
52	from Crypto.Cipher import AES

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:52:0
51	from Crypto.Hash import SHA256 as HashFunc
52	from Crypto.Cipher import AES
53	from Crypto.PublicKey import RSA

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module RSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:53:0
52	from Crypto.Cipher import AES
53	from Crypto.PublicKey import RSA
54	import os

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module pkcs1_15 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:57:4
56	try:
57	    from Crypto.Signature import pkcs1_15
58	    SIGN_WITH_RSA = False

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'FAILED TO DECRYPT PASSWORD!'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\crypto.py:67:29
66	
67	FAILED_TO_DECRYPT_PASSWORD = "FAILED TO DECRYPT PASSWORD!"
68	

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA224 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:78:4
77	try:
78	    from Crypto.Hash import SHA224
79	    c_hash['sha224'] = SHA224

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA384 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:84:4
83	try:
84	    from Crypto.Hash import SHA384
85	    c_hash['sha384'] = SHA384

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA512 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\crypto.py:90:4
89	try:
90	    from Crypto.Hash import SHA512
91	    c_hash['sha512'] = SHA512

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\privacyidea\lib\crypto.py:649:15
648	    for i in range(length):
649	        ret += random.choice(string.lowercase + string.uppercase +
650	                             string.digits)
651	    return ret

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'XXXX'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\crypto.py:776:27
775	        if "password" in logging_params:
776	            logging_params["password"] = "XXXX"
777	        log.info("calling HSM module with parameters {0}".format(logging_params))

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'token_has_owner'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\eventhandler\base.py:57:22
56	    """
57	    TOKEN_HAS_OWNER = "token_has_owner"
58	    TOKEN_IS_ORPHANED = "token_is_orphaned"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'token_is_orphaned'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\eventhandler\base.py:58:24
57	    TOKEN_HAS_OWNER = "token_has_owner"
58	    TOKEN_IS_ORPHANED = "token_is_orphaned"
59	    TOKEN_VALIDITY_PERIOD = "token_validity_period"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'token_validity_period'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\eventhandler\base.py:59:28
58	    TOKEN_IS_ORPHANED = "token_is_orphaned"
59	    TOKEN_VALIDITY_PERIOD = "token_validity_period"
60	    USER_TOKEN_NUMBER = "user_token_number"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'user_token_number'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\eventhandler\base.py:60:24
59	    TOKEN_VALIDITY_PERIOD = "token_validity_period"
60	    USER_TOKEN_NUMBER = "user_token_number"
61	    OTP_COUNTER = "otp_counter"

--------------------------------------------------
>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b404-import-subprocess
   Location: .\privacyidea\lib\eventhandler\scripthandler.py:39:0
38	import logging
39	import subprocess
40	import os

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\privacyidea\lib\eventhandler\scripthandler.py:168:16
167	        try:
168	            p = subprocess.Popen(proc_args, cwd=self.script_directory)
169	            log.info("Started script {script!r}:"

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\importotp.py:59:0
58	from privacyidea.lib.crypto import (aes_decrypt_b64, aes_encrypt_b64, geturandom)
59	from Crypto.Cipher import AES
60	from bs4 import BeautifulSoup

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'token'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\policy.py:320:12
319	    SYSTEM = "system"
320	    TOKEN = "token"
321	    ENROLLMENT = "enrollment"

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\privacyideaserver.py:70:19
69	        """
70	        response = requests.post(config.url + "/validate/check",
71	                          data={"user": user, "pass": password},
72	                          verify=config.tls
73	                          )
74	        log.debug("Sent request to privacyIDEA server. status code returned: "

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\resolvers\LDAPIdResolver.py:648:29
647	                                          self.searchfilter, self.userinfo)
648	        r = binascii.hexlify(hashlib.sha1(s.encode("utf-8")).digest())
649	        return r

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\resolvers\LDAPIdResolver.py:1043:19
1042	        # Hash password string and append the salt
1043	        sha_hash = hashlib.sha1(password)
1044	        sha_hash.update(salt)

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\resolvers\SCIMIdResolver.py:59:27
58	        self.auth_client = 'localhost'
59	        self.auth_secret = ''
60	        self.access_token = None

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\resolvers\SCIMIdResolver.py:261:15
260	        url = '{0}/Users?{1}'.format(resource_server, urlencode(params))
261	        resp = requests.get(url, headers=headers)
262	        if resp.status_code != 200:

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\resolvers\SCIMIdResolver.py:286:15
285	        url = '{0}/Users/{1}'.format(resource_server, userid)
286	        resp = requests.get(url, headers=headers)
287	

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\resolvers\SCIMIdResolver.py:302:15
301	        url = "{0!s}/oauth/token?grant_type=client_credentials".format(server)
302	        resp = requests.get(url,
303	                            headers={'Authorization': 'Basic ' + auth})
304	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\resolvers\SQLIdResolver.py:106:24
105	        self.user = ""
106	        self.password = ""
107	        self.table = ""

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\resolvers\SQLIdResolver.py:341:39
340	                    str(self.pool_timeout))
341	        resolver_id = binascii.hexlify(hashlib.sha1("\x00".join(id_parts)).digest())
342	        return "sql." + resolver_id

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\resolvers\SQLIdResolver.py:464:19
463	        port = ""
464	        password = ""
465	        conParams = ""

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\security\aeshsm.py:379:4
378	    text = p.decrypt_password(crypted)
379	    assert(text == password)
380	    log.info("password encrypt/decrypt test successful")

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'topSekr3t'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\security\aeshsm.py:383:15
382	    # pin
383	    password = "topSekr3t"
384	    crypted = p.encrypt_pin(password)

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\security\aeshsm.py:386:4
385	    text = p.decrypt_pin(crypted)
386	    assert (text == password)
387	    log.info("pin encrypt/decrypt test successful")

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\security\aeshsm.py:400:4
399	    cipher = p.encrypt(plain, iv)
400	    assert (plain != cipher)
401	    text = p.decrypt(cipher, iv)

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\security\aeshsm.py:402:4
401	    text = p.decrypt(cipher, iv)
402	    assert (text == plain)
403	    log.info("generic encrypt/decrypt test successful")

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\security\default.py:45:0
44	
45	from Crypto.Cipher import AES
46	from privacyidea.lib.crypto import zerome

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\security\default.py:210:17
209	
210	        secret = ''
211	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\security\default.py:234:25
233	
234	            if secret == "":
235	                raise HSMException("No secret key defined for index: %s !\n"

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\smsprovider\SipgateSMSProvider.py:83:12
82	
83	        r = requests.post(URL,
84	                          data=REQUEST_XML % (phone.strip().strip("+"),
85	                                              message),
86	                          headers={'content-type': 'text/xml'},
87	                          auth=(username, password),
88	                          proxies=proxies)
89	

--------------------------------------------------
>> Issue: [B107:hardcoded_password_default] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b107_hardcoded_password_default.html
   Location: .\privacyidea\lib\smtpserver.py:222:0
221	@log_with(log)
222	def add_smtpserver(identifier, server, port=25, username="", password="",
223	                   sender="", description="", tls=False, timeout=TIMEOUT):
224	    """
225	    This adds an smtp server to the smtp server database table.
226	
227	    If the "identifier" already exists, the database entry is updated.
228	
229	    :param identifier: The identifier or the name of the SMTPServer definition.
230	        As the identifier is unique, providing an identifier will return a
231	        list with either one or no smtpserver
232	    :type identifier: basestring
233	    :param server: The FQDN or IP address of the smtpserver
234	    :type server: basestring
235	    :return: The Id of the database object
236	    """
237	    cryptedPassword = encryptPassword(password)
238	    r = SMTPServerDB(identifier=identifier, server=server, port=port,
239	                     username=username, password=cryptedPassword, sender=sender,
240	                     description=description, tls=tls, timeout=timeout).save()
241	    return r
242	

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA256 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\subscriptions.py:38:0
37	import os
38	from Crypto.Hash import SHA256
39	from Crypto.PublicKey import RSA

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module RSA are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\privacyidea\lib\subscriptions.py:39:0
38	from Crypto.Hash import SHA256
39	from Crypto.PublicKey import RSA
40	import traceback

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\privacyidea\lib\subscriptions.py:210:15
209	        # True with a 50% chance
210	        return random.randrange(0, 2)
211	

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\privacyidea\lib\subscriptions.py:220:15
219	        p = 0.2 + ((delta.days-14.0)/30.0) * 0.3
220	        return random.random() < p
221	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\privacyidea\lib\tokens\certificatetoken.py:268:25
267	        if passphrase == -1:
268	            passphrase = ""
269	        pkcs12_bin = pkcs12.export(passphrase=passphrase)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\tokens\mOTP.py:152:15
151	        vhash = "{0:d}{1!s}{2!s}".format(counter, key, pin)
152	        motp = md5(vhash).hexdigest()[:self.digits]
153	        return motp

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\tokens\ocratoken.py:220:45
219	            elif options.get("hashchallenge"):
220	                challenge = binascii.hexlify(hashlib.sha1(challenge).digest())
221	

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\privacyidea\lib\tokens\questionnairetoken.py:197:18
196	                questions.append(question.strip(".type"))
197	        message = random.choice(questions)
198	        attributes = None

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\tokens\remotetoken.py:272:16
271	        try:
272	            r = requests.post(request_url, data=params, verify=ssl_verify)
273	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\tokens\vasco.py:133:4
132	    tokendata = buffer(datablob)[:]
133	    assert len(tokendata) == 248
134	    return tokendata

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\privacyidea\lib\tokens\yubicotoken.py:161:20
160	            try:
161	                r = requests.post(yubico_url,
162	                                  data=p)
163	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\privacyidea\lib\utils.py:297:4
296	        encoded_data += "=" * (8 - (encoded_length % 8))
297	    assert len(encoded_data) % 8 == 0
298	    # Decode as base32

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:307:19
306	    checksum, payload = decoded_data[:4], decoded_data[4:]
307	    payload_hash = hashlib.sha1(payload).digest()
308	    if payload_hash[:4] != checksum:

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:831:19
830	    elif hashtype == "SHA":
831	        password = hashlib.sha1(password).digest()
832	        password = "{SHA}" + b64encode(password)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:835:13
834	        salt = geturandom(20)
835	        hr = hashlib.sha1(password)
836	        hr.update(salt)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:878:9
877	    b64_db_password = pw_hash[5:]
878	    hr = hashlib.sha1(password).digest()
879	    b64_password = b64encode(hr)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:914:36
913	            while rem > 0:
914	                self.random_state = hashlib.md5(str(time.time())
915	                                                + self.random_state).hexdigest()
916	                outp += hashlib.md5(self.random_state).digest()

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak MD5 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\privacyidea\lib\utils.py:916:24
915	                                                + self.random_state).hexdigest()
916	                outp += hashlib.md5(self.random_state).digest()
917	                rem -= 1

--------------------------------------------------
>> Issue: [B107:hardcoded_password_default] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b107_hardcoded_password_default.html
   Location: .\privacyidea\models.py:2443:4
2442	
2443	    def __init__(self,
2444	                 action="",
2445	                 success=0,
2446	                 serial="",
2447	                 token_type="",
2448	                 user="",
2449	                 realm="",
2450	                 resolver="",
2451	                 administrator="",
2452	                 action_detail="",
2453	                 info="",
2454	                 privacyidea_server="",
2455	                 client="",
2456	                 loglevel="default",
2457	                 clearance_level="default"
2458	                 ):
2459	        self.signature = ""
2460	        self.date = datetime.now()
2461	        self.action = convert_column_to_unicode(action)
2462	        self.success = success
2463	        self.serial = convert_column_to_unicode(serial)
2464	        self.token_type = convert_column_to_unicode(token_type)
2465	        self.user = convert_column_to_unicode(user)
2466	        self.realm = convert_column_to_unicode(realm)
2467	        self.resolver = convert_column_to_unicode(resolver)
2468	        self.administrator = convert_column_to_unicode(administrator)
2469	        self.action_detail = convert_column_to_unicode(action_detail)
2470	        self.info = convert_column_to_unicode(info)
2471	        self.privacyidea_server = convert_column_to_unicode(privacyidea_server)
2472	        self.client = convert_column_to_unicode(client)
2473	        self.loglevel = convert_column_to_unicode(loglevel)
2474	        self.clearance_level = convert_column_to_unicode(clearance_level)
2475	

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\ldap3mock.py:747:28
746	        # Encode the user supplied password so we can compare the two
747	        user_supplied_sha = hashlib.sha1(user_supplied_pw)
748	        user_supplied_sha.update(salt)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_api_2stepinit.py:55:19
54	        client_component = "VRYSECRT"
55	        checksum = hashlib.sha1(client_component).digest()[:4]
56	        base32check_client_component = base64.b32encode(checksum + client_component).strip("=")

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_api_2stepinit.py:427:19
426	        client_component = "VRYSECRT"
427	        checksum = hashlib.sha1(client_component).digest()[:4]
428	        base32check_client_component = base64.b32encode(checksum + client_component).strip("=")

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'topsecret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_api_register.py:145:23
144	        recoverycode = "reccode"
145	        new_password = "topsecret"
146	        user = User("corneliusReg", "register")

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'tests/testdata/pskc-password.xml'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_api_token.py:22:18
21	IMPORTPSKC = "tests/testdata/pskc-aes.xml"
22	IMPORTPSKC_PASS = "tests/testdata/pskc-password.xml"
23	PSK_HEX = "12345678901234567890123456789012"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'usernotoken'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_api_validate.py:1508:24
1507	        user = "passthru"
1508	        user_no_token = "usernotoken"
1509	        pin = "mypin"

--------------------------------------------------
>> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
   Severity: Medium   Confidence: Medium
   CWE: CWE-605 (https://cwe.mitre.org/data/definitions/605.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b104_hardcoded_bind_all_interfaces.html
   Location: .\tests\test_db_model.py:353:19
352	        p.resolver = "*"
353	        p.client = "0.0.0.0"
354	        p.time = "anytime"

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_db_model.py:450:20
449	        # create an admin user
450	        adminname = Admin(username="admin", password="secret",
451	                          email="admin@privacyidea.org").save()
452	        self.assertEqual(adminname, "admin")

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'supersecret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_db_model.py:456:8
455	        # update admin - change the password
456	        Admin(username="admin", password="supersecret").save()
457	        password2 = Admin.query.filter_by(username="admin").first().password

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_db_model.py:493:12
492	        # Update the server
493	        r = SMTPServer(identifier="myserver", server="100.2.3.4",
494	                       username="user", password="password", tls=True,
495	                       description="test", port=123).save()
496	        modified_server = SMTPServer.query.filter_by(

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: '12345678901234567890'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_audit.py:195:21
194	        long_serial = "This serial is much to long, you know it!"
195	        token_type = "12345678901234567890"
196	        self.Audit.log({"serial": long_serial,

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'PSTwort'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_auth.py:21:8
20	
21	        create_db_admin(current_app, "mytestadmin", email="admin@localhost",
22	                        password="PSTwort")
23	        r = verify_db_admin("mytestadmin", "PSTwort")

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'PSTwort'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_auth.py:41:8
40	    def test_03_empty_passsword(self):
41	        create_db_admin(current_app, "mytestadmin", email="admin@localhost",
42	                        password="PSTwort")
43	        r = verify_db_admin("mytestadmin", None)

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'secret123456'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_authcache.py:20:15
19	    """
20	    password = "secret123456"
21	    username = "hans"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'test123!'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_crypto.py:411:27
410	        current_app.config["PI_HSM_MODULE_MODULE"] = "testmodule"
411	        current_app.config["PI_HSM_MODULE_PASSWORD"] = "test123!"
412	        with self.pkcs11:

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: '<?xml version="1.0" encoding="UTF-8"?>
  <KeyContainer
    xmlns="urn:ietf:params:xml:ns:keyprov:pskc"
    xmlns:xenc11="http://www.w3.org/2009/xmlenc11#"
    xmlns:pkcs5=
    "http://www.rsasecurity.com/rsalabs/pkcs/schemas/pkcs-5v2-0#"
    xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" Version="1.0">
      <EncryptionKey>
          <xenc11:DerivedKey>
              <xenc11:KeyDerivationMethod
                Algorithm=
   "http://www.rsasecurity.com/rsalabs/pkcs/schemas/pkcs-5v2-0#pbkdf2">
                  <pkcs5:PBKDF2-params>
                      <Salt>
                          <Specified>Ej7/PEpyEpw=</Specified>
                      </Salt>
                      <IterationCount>1000</IterationCount>
                      <KeyLength>16</KeyLength>
                      <PRF/>
                  </pkcs5:PBKDF2-params>
              </xenc11:KeyDerivationMethod>
              <xenc:ReferenceList>
                  <xenc:DataReference URI="#ED"/>
              </xenc:ReferenceList>
              <xenc11:MasterKeyName>My Password 1</xenc11:MasterKeyName>
          </xenc11:DerivedKey>
      </pskc:EncryptionKey>
      <pskc:MACMethod
          Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
          <pskc:MACKey>
              <xenc:EncryptionMethod
              Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
              <xenc:CipherData>
                  <xenc:CipherValue>
  2GTTnLwM3I4e5IO5FkufoOEiOhNj91fhKRQBtBJYluUDsPOLTfUvoU2dStyOwYZx
                  </xenc:CipherValue>
              </xenc:CipherData>
          </pskc:MACKey>
      </pskc:MACMethod>
      <pskc:KeyPackage>
          <pskc:DeviceInfo>
              <pskc:Manufacturer>TokenVendorAcme</pskc:Manufacturer>
              <pskc:SerialNo>987654321</pskc:SerialNo>
          </pskc:DeviceInfo>
          <pskc:CryptoModuleInfo>
              <pskc:Id>CM_ID_001</pskc:Id>
          </pskc:CryptoModuleInfo>
          <pskc:Key Algorithm="urn:ietf:params:xml:ns:keyprov:pskc:hotp" Id="123456">
              <pskc:Issuer>Example-Issuer</pskc:Issuer>
              <pskc:AlgorithmParameters>
                  <pskc:ResponseFormat Length="8" Encoding="DECIMAL"/>
              </pskc:AlgorithmParameters>
              <pskc:Data>
                  <pskc:Secret>
                  <pskc:EncryptedValue Id="ED">
                      <xenc:EncryptionMethod
                          Algorithm=
  "http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
                          <xenc:CipherData>
                              <xenc:CipherValue>
        oTvo+S22nsmS2Z/RtcoF8Hfh+jzMe0RkiafpoDpnoZTjPYZu6V+A4aEn032yCr4f
                          </xenc:CipherValue>
                      </xenc:CipherData>
                      </pskc:EncryptedValue>
                      <pskc:ValueMAC>LP6xMvjtypbfT9PdkJhBZ+D6O4w=
                      </pskc:ValueMAC>
                  </pskc:Secret>
              </pskc:Data>
          </pskc:Key>
      </pskc:KeyPackage>
  </pskc:KeyContainer>'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_importotp.py:18:27
17	
18	XML_PSKC_PASSWORD_PREFIX = """<?xml version="1.0" encoding="UTF-8"?>
19	  <KeyContainer
20	    xmlns="urn:ietf:params:xml:ns:keyprov:pskc"
21	    xmlns:xenc11="http://www.w3.org/2009/xmlenc11#"
22	    xmlns:pkcs5=
23	    "http://www.rsasecurity.com/rsalabs/pkcs/schemas/pkcs-5v2-0#"
24	    xmlns:xenc="http://www.w3.org/2001/04/xmlenc#" Version="1.0">
25	      <EncryptionKey>
26	          <xenc11:DerivedKey>
27	              <xenc11:KeyDerivationMethod
28	                Algorithm=
29	   "http://www.rsasecurity.com/rsalabs/pkcs/schemas/pkcs-5v2-0#pbkdf2">
30	                  <pkcs5:PBKDF2-params>
31	                      <Salt>
32	                          <Specified>Ej7/PEpyEpw=</Specified>
33	                      </Salt>
34	                      <IterationCount>1000</IterationCount>
35	                      <KeyLength>16</KeyLength>
36	                      <PRF/>
37	                  </pkcs5:PBKDF2-params>
38	              </xenc11:KeyDerivationMethod>
39	              <xenc:ReferenceList>
40	                  <xenc:DataReference URI="#ED"/>
41	              </xenc:ReferenceList>
42	              <xenc11:MasterKeyName>My Password 1</xenc11:MasterKeyName>
43	          </xenc11:DerivedKey>
44	      </pskc:EncryptionKey>
45	      <pskc:MACMethod
46	          Algorithm="http://www.w3.org/2000/09/xmldsig#hmac-sha1">
47	          <pskc:MACKey>
48	              <xenc:EncryptionMethod
49	              Algorithm="http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
50	              <xenc:CipherData>
51	                  <xenc:CipherValue>
52	  2GTTnLwM3I4e5IO5FkufoOEiOhNj91fhKRQBtBJYluUDsPOLTfUvoU2dStyOwYZx
53	                  </xenc:CipherValue>
54	              </xenc:CipherData>
55	          </pskc:MACKey>
56	      </pskc:MACMethod>
57	      <pskc:KeyPackage>
58	          <pskc:DeviceInfo>
59	              <pskc:Manufacturer>TokenVendorAcme</pskc:Manufacturer>
60	              <pskc:SerialNo>987654321</pskc:SerialNo>
61	          </pskc:DeviceInfo>
62	          <pskc:CryptoModuleInfo>
63	              <pskc:Id>CM_ID_001</pskc:Id>
64	          </pskc:CryptoModuleInfo>
65	          <pskc:Key Algorithm="urn:ietf:params:xml:ns:keyprov:pskc:hotp" Id="123456">
66	              <pskc:Issuer>Example-Issuer</pskc:Issuer>
67	              <pskc:AlgorithmParameters>
68	                  <pskc:ResponseFormat Length="8" Encoding="DECIMAL"/>
69	              </pskc:AlgorithmParameters>
70	              <pskc:Data>
71	                  <pskc:Secret>
72	                  <pskc:EncryptedValue Id="ED">
73	                      <xenc:EncryptionMethod
74	                          Algorithm=
75	  "http://www.w3.org/2001/04/xmlenc#aes128-cbc"/>
76	                          <xenc:CipherData>
77	                              <xenc:CipherValue>
78	        oTvo+S22nsmS2Z/RtcoF8Hfh+jzMe0RkiafpoDpnoZTjPYZu6V+A4aEn032yCr4f
79	                          </xenc:CipherValue>
80	                      </xenc:CipherData>
81	                      </pskc:EncryptedValue>
82	                      <pskc:ValueMAC>LP6xMvjtypbfT9PdkJhBZ+D6O4w=
83	                      </pskc:ValueMAC>
84	                  </pskc:Secret>
85	              </pskc:Data>
86	          </pskc:Key>
87	      </pskc:KeyPackage>
88	  </pskc:KeyContainer>"""
89	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'qwerty'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_importotp.py:582:19
581	    def test_05_import_pskc_password(self):
582	        password = "qwerty"
583	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'secret123456'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_policydecorator.py:522:19
521	    def test_12_authcache(self):
522	        password = "secret123456"
523	        username = "cornelius"

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:20:12
19	    def test_01_create_radius(self):
20	        r = add_radius(identifier="myserver", server="1.2.3.4",
21	                       secret="testing123")
22	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:23:12
22	        self.assertTrue(r > 0)
23	        r = add_radius(identifier="myserver1", server="1.2.3.4",
24	                       secret="testing123")
25	        r = add_radius(identifier="myserver2", server="1.2.3.4",

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:25:12
24	                       secret="testing123")
25	        r = add_radius(identifier="myserver2", server="1.2.3.4",
26	                       secret="testing123")
27	

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:43:12
42	    def test_02_updateserver(self):
43	        r = add_radius(identifier="myserver", server="1.2.3.4",
44	                       secret="testing123")
45	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:48:12
47	        self.assertTrue(server_list[0].config.server, "1.2.3.4")
48	        r = add_radius(identifier="myserver", server="100.2.3.4",
49	                       secret="testing123")
50	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:60:12
59	        radiusmock.setdata(success=True)
60	        r = add_radius(identifier="myserver", server="1.2.3.4",
61	                       secret="testing123", dictionary=DICT_FILE)
62	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:74:12
73	        radiusmock.setdata(success=True, timeout=True)
74	        r = add_radius(identifier="myserver", server="1.2.3.4",
75	                       secret="testing123", dictionary=DICT_FILE)
76	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:85:12
84	        radiusmock.setdata(success=False)
85	        r = test_radius(identifier="myserver", server="1.2.3.4",
86	                        user="user", password="password",
87	                        secret="testing123", dictionary=DICT_FILE)
88	        self.assertFalse(r)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:91:12
90	        radiusmock.setdata(success=True)
91	        r = test_radius(identifier="myserver", server="1.2.3.4",
92	                        user="user", password="password",
93	                        secret="testing123", dictionary=DICT_FILE)
94	        self.assertTrue(r)

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_radiusserver.py:97:8
96	        # raises error on long secrets
97	        self.assertRaises(privacyIDEAError,
98	                          test_radius,
99	                          identifier="myserver", server="1.2.3.4",
100	                          user="user", password="password",
101	                          secret="x" * 96, dictionary=DICT_FILE)

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:230:8
229	        print(result)
230	        assert result is True
231	        '''

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:236:8
235	        result = y.checkPass(2, "dunno")
236	        assert result is True
237	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:239:8
238	        result = y.checkPass(1, "dunno")
239	        assert result is True
240	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:242:8
241	        result = y.checkPass(4, "dunno")
242	        assert result is True
243	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:245:8
244	        result = y.checkPass(5, "dunno")
245	        assert result is True
246	

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'SSHA256'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_resolver.py:349:19
348	        # sha256 at first
349	        parameters["Password_Hash_Type"] = "SSHA256"
350	        y.loadConfig(parameters)

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'SSHA512'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_resolver.py:373:19
372	        y = SQLResolver()
373	        parameters["Password_Hash_Type"] = "SSHA512"
374	        y.loadConfig(parameters)

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'd81c31e4-9f65-4805-b5ba-6edf0761f954'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_resolver.py:449:13
448	    CLIENT = "puckel"
449	    SECRET = "d81c31e4-9f65-4805-b5ba-6edf0761f954"
450	    AUTHSERVER = "http://localhost:8080/osiam-auth-server"

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'http://localhost:8080/osiam-auth-server/oauth/token'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_resolver.py:452:16
451	    RESOURCESERVER = "http://localhost:8080/osiam-resource-server"
452	    TOKEN_URL = 'http://localhost:8080/osiam-auth-server/oauth/token'
453	    USER_URL = 'http://localhost:8080/osiam-resource-server/Users'

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_resolver.py:628:8
627	        #                       access_token="", userid="jbensen")
628	        self.assertRaises(Exception, SCIMResolver._get_user,
629	                          resource_server=self.RESOURCESERVER,
630	                          access_token="", userid="jbensen")
631	

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: ''
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_resolver.py:643:8
642	        #                           access_token="")
643	        self.assertRaises(Exception, SCIMResolver._search_users,
644	                          resource_server=self.RESOURCESERVER,
645	                          access_token="")
646	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_resolver.py:1724:16
1723	                result = self.connection.response
1724	                assert kwargs['generator']
1725	                # Only return one result

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_smsprovider.py:554:8
553	        # Here we need to send the SMS
554	        smppmock.setdata(connection_success=True,
555	                         systemid="privacyIDEA",
556	                         password="secret")
557	        r = self.provider.submit_message("123456", "Hello")

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_smsprovider.py:562:8
561	    def test_02_fail_connection(self):
562	        smppmock.setdata(connection_success=False,
563	                         systemid="privacyIDEA",
564	                         password="secret")
565	        self.assertRaises(SMSError, self.provider.submit_message, "123456", "hello")

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'wrong'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_smsprovider.py:569:8
568	    def test_03_fail_wrong_credentials(self):
569	        smppmock.setdata(connection_success=True,
570	                         systemid="privacyIDEA",
571	                         password="wrong")
572	        self.assertRaises(SMSError, self.provider.submit_message, "123456", "hello")

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_smtpserver.py:88:19
87	        username = "mailsender"
88	        password = "secret"
89	        sender = "mailsender@exmaple.com"

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\tests\test_lib_token.py:637:8
636	        r = copy_token_user(serial1, serial2)
637	        assert isinstance(tobject2, TokenClass)
638	        self.assertTrue(tobject2.token.user_id == "1000",

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_lib_token.py:1164:19
1163	        otpkey = "\x01\x02\x03\x04\x05\x06\x07\x08\x0A"
1164	        checksum = hashlib.sha1(otpkey).digest()[:4]
1165	        # base32check(otpkey) = 'FIQVUTQBAIBQIBIGA4EAU==='

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_lib_tokens_hotp.py:786:19
785	        client_component = b'abcdefghijkl'
786	        checksum = hashlib.sha1(client_component).digest()[:4]
787	        # wrong checksum

--------------------------------------------------
>> Issue: [B105:hardcoded_password_string] Possible hardcoded password: 'topsecret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b105_hardcoded_password_string.html
   Location: .\tests\test_lib_tokens_passwordtoken.py:15:15
14	    """
15	    password = "topsecret"
16	    serial1 = "ser1"

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'testing123'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_tokens_radius.py:166:12
165	        radiusmock.setdata(success=True)
166	        r = add_radius(identifier="myserver", server="1.2.3.4",
167	                       secret="testing123", dictionary=DICT_FILE)
168	        self.assertTrue(r > 0)

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_lib_tokens_tiqr.py:309:36
308	        dTAN = "83507112  ~320,00~1399458665_G6HNVF"
309	        question = binascii.hexlify(hashlib.sha1(dTAN).digest())
310	        ocra_object = OCRA(ocrasuite, binascii.unhexlify(KEY20))

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_lib_tokens_tiqr.py:348:41
347	        displayTAN_challenge = "83507112  ~320,00~1399458665_G6HNVF"
348	        challengeQH40 = binascii.hexlify(hashlib.sha1(
349	            displayTAN_challenge).digest())
350	        r = token.create_challenge(options={"challenge": challengeQH40})

--------------------------------------------------
>> Issue: [B324:hashlib] Use of weak SHA1 hash for security. Consider usedforsecurity=False
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b324_hashlib.html
   Location: .\tests\test_lib_tokens_tiqr.py:364:41
363	        displayTAN_challenge = "83507112  ~320,00~1399458665_G6HNVF"
364	        challengeQH40 = binascii.hexlify(hashlib.sha1(
365	            displayTAN_challenge).digest())
366	        r = token.create_challenge(options={"challenge": challengeQH40})

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'secret'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\tests\test_lib_user.py:302:14
301	        # Create the user
302	        uid = create_user(resolver, {"username": "achmed3",
303	                                     "givenname": "achmed"},
304	                                     password="secret")
305	        self.assertTrue(uid > 6)

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\tools\privacyidea-decrypt-safeword.py:9:0
8	import re
9	from Crypto.Cipher import AES, DES
10	import binascii

--------------------------------------------------
>> Issue: [B304:blacklist] Use of insecure cipher Crypto.Cipher.DES.new. Replace with a known secure cipher such as AES.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b304-b305-ciphers-and-modes
   Location: .\tools\privacyidea-decrypt-safeword.py:45:26
44	                elif algo.lower() == "des":
45	                    des = DES.new(des_key)
46	                    d = des.decrypt(binascii.unhexlify(data))

--------------------------------------------------

Code scanned:
	Total lines of code: 65988
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 81
		Medium: 10
		High: 33
	Total issues (by confidence):
		Undefined: 0
		Low: 8
		Medium: 58
		High: 58
Files skipped (7):
	.\migrations\versions\19f727d285e2_.py (syntax error while parsing AST from file)
	.\migrations\versions\204d8d4f351e_.py (syntax error while parsing AST from file)
	.\migrations\versions\2c9430cfc66b_.py (syntax error while parsing AST from file)
	.\privacyidea\lib\security\pkcs11.py (syntax error while parsing AST from file)
	.\tests\test_lib_utils.py (syntax error while parsing AST from file)
	.\tools\privacyidea-migrate-linotp.py (syntax error while parsing AST from file)
	.\tools\ssha.py (syntax error while parsing AST from file)
