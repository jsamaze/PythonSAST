Working... ---------------------------------------- 100% 0:00:01
Run started:2024-02-10 22:42:32.699761

Test results:
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\demo\chatbot\run.py:9:19
8	    if message.startswith("How many"):
9	        response = random.randint(1, 10)
10	    elif message.startswith("How"):

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\demo\chatbot\run.py:11:19
10	    elif message.startswith("How"):
11	        response = random.choice(["Great", "Good", "Okay", "Bad"])
12	    elif message.startswith("Where"):

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\demo\chatbot\run.py:13:19
12	    elif message.startswith("Where"):
13	        response = random.choice(["Here", "There", "Somewhere"])
14	    else:

--------------------------------------------------
>> Issue: [B310:blacklist] Audit url open for permitted schemes. Allowing use of file:/ or custom schemes is often unexpected.
   Severity: Medium   Confidence: High
   CWE: CWE-22 (https://cwe.mitre.org/data/definitions/22.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b310-urllib-urlopen
   Location: .\demo\digit_classifier\run.py:9:0
8	
9	urlretrieve(
10	    "https://gr-models.s3-us-west-2.amazonaws.com/mnist-model.h5", "mnist-model.h5"
11	)
12	model = tf.keras.models.load_model("mnist-model.h5")

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\demo\fraud_detector\run.py:9:21
8	def fraud_detector(card_activity, categories, sensitivity):
9	    activity_range = random.randint(0, 100)
10	    drop_columns = [

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\demo\image_classifier\run.py:9:11
8	# Download human-readable labels for ImageNet.
9	response = requests.get("https://git.io/JJkYN")
10	labels = response.text.split("\n")

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\demo\image_classifier_2\run.py:11:11
10	# Download human-readable labels for ImageNet.
11	response = requests.get("https://git.io/JJkYN")
12	labels = response.text.split("\n")

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\demo\image_classifier_interpretation\run.py:9:11
8	# Download human-readable labels for ImageNet.
9	response = requests.get("https://git.io/JJkYN")
10	labels = response.text.split("\n")

--------------------------------------------------
>> Issue: [B107:hardcoded_password_default] Possible hardcoded password: '[CLS]'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b107_hardcoded_password_default.html
   Location: .\demo\question_answer\files\utils.py:159:0
158	
159	def squad_examples_to_features(
160	    example,
161	    tokenizer,
162	    max_seq_length,
163	    doc_stride,
164	    max_query_length,
165	    cls_token_at_end=False,
166	    cls_token="[CLS]",
167	    sep_token="[SEP]",
168	    pad_token=0,
169	    sequence_a_segment_id=0,
170	    sequence_b_segment_id=1,
171	    cls_token_segment_id=0,
172	    pad_token_segment_id=0,
173	    mask_padding_with_zero=True,
174	):
175	    """Loads a data file into a list of `InputBatch`s."""
176	
177	    unique_id = 1000000000
178	    # cnt_pos, cnt_neg = 0, 0
179	    # max_N, max_M = 1024, 1024
180	    # f = np.zeros((max_N, max_M), dtype=np.float32)
181	    example_index = 0
182	    features = []
183	    # if example_index % 100 == 0:
184	    #     logger.info('Converting %s/%s pos %s neg %s', example_index, len(examples), cnt_pos, cnt_neg)
185	
186	    query_tokens = tokenizer.tokenize(example.question_text)
187	
188	    if len(query_tokens) > max_query_length:
189	        query_tokens = query_tokens[0:max_query_length]
190	
191	    tok_to_orig_index = []
192	    orig_to_tok_index = []
193	    all_doc_tokens = []
194	    for (i, token) in enumerate(example.doc_tokens):
195	        orig_to_tok_index.append(len(all_doc_tokens))
196	        sub_tokens = tokenizer.tokenize(token)
197	        for sub_token in sub_tokens:
198	            tok_to_orig_index.append(i)
199	            all_doc_tokens.append(sub_token)
200	
201	    # The -3 accounts for [CLS], [SEP] and [SEP]
202	    max_tokens_for_doc = max_seq_length - len(query_tokens) - 3
203	
204	    # We can have documents that are longer than the maximum sequence length.
205	    # To deal with this we do a sliding window approach, where we take chunks
206	    # of the up to our max length with a stride of `doc_stride`.
207	    _DocSpan = collections.namedtuple(  # pylint: disable=invalid-name
208	        "DocSpan", ["start", "length"]
209	    )
210	    doc_spans = []
211	    start_offset = 0
212	    while start_offset < len(all_doc_tokens):
213	        length = len(all_doc_tokens) - start_offset
214	        if length > max_tokens_for_doc:
215	            length = max_tokens_for_doc
216	        doc_spans.append(_DocSpan(start=start_offset, length=length))
217	        if start_offset + length == len(all_doc_tokens):
218	            break
219	        start_offset += min(length, doc_stride)
220	
221	    for (doc_span_index, doc_span) in enumerate(doc_spans):
222	        tokens = []
223	        token_to_orig_map = {}
224	        token_is_max_context = {}
225	        segment_ids = []
226	
227	        # CLS token at the beginning
228	        if not cls_token_at_end:
229	            tokens.append(cls_token)
230	            segment_ids.append(cls_token_segment_id)
231	
232	        # Query
233	        for token in query_tokens:
234	            tokens.append(token)
235	            segment_ids.append(sequence_a_segment_id)
236	
237	        # SEP token
238	        tokens.append(sep_token)
239	        segment_ids.append(sequence_a_segment_id)
240	
241	        # Paragraph
242	        for i in range(doc_span.length):
243	            split_token_index = doc_span.start + i
244	            token_to_orig_map[len(tokens)] = tok_to_orig_index[split_token_index]
245	
246	            is_max_context = _check_is_max_context(
247	                doc_spans, doc_span_index, split_token_index
248	            )
249	            token_is_max_context[len(tokens)] = is_max_context
250	            tokens.append(all_doc_tokens[split_token_index])
251	            segment_ids.append(sequence_b_segment_id)
252	        paragraph_len = doc_span.length
253	
254	        # SEP token
255	        tokens.append(sep_token)
256	        segment_ids.append(sequence_b_segment_id)
257	
258	        # CLS token at the end
259	        if cls_token_at_end:
260	            tokens.append(cls_token)
261	            segment_ids.append(cls_token_segment_id)
262	
263	        input_ids = tokenizer.convert_tokens_to_ids(tokens)
264	
265	        # The mask has 1 for real tokens and 0 for padding tokens. Only real
266	        # tokens are attended to.
267	        input_mask = [1 if mask_padding_with_zero else 0] * len(input_ids)
268	
269	        # Zero-pad up to the sequence length.
270	        while len(input_ids) < max_seq_length:
271	            input_ids.append(pad_token)
272	            input_mask.append(0 if mask_padding_with_zero else 1)
273	            segment_ids.append(pad_token_segment_id)
274	
275	        assert len(input_ids) == max_seq_length
276	        assert len(input_mask) == max_seq_length
277	        assert len(segment_ids) == max_seq_length
278	
279	        start_position = None
280	        end_position = None
281	
282	        features.append(
283	            InputFeatures(
284	                unique_id=unique_id,
285	                example_index=example_index,
286	                doc_span_index=doc_span_index,
287	                tokens=tokens,
288	                token_to_orig_map=token_to_orig_map,
289	                token_is_max_context=token_is_max_context,
290	                input_ids=input_ids,
291	                input_mask=input_mask,
292	                segment_ids=segment_ids,
293	                paragraph_len=paragraph_len,
294	                start_position=start_position,
295	                end_position=end_position,
296	            )
297	        )
298	        unique_id += 1
299	
300	    return features
301	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\demo\question_answer\files\utils.py:275:8
274	
275	        assert len(input_ids) == max_seq_length
276	        assert len(input_mask) == max_seq_length

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\demo\question_answer\files\utils.py:276:8
275	        assert len(input_ids) == max_seq_length
276	        assert len(input_mask) == max_seq_length
277	        assert len(segment_ids) == max_seq_length

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\demo\question_answer\files\utils.py:277:8
276	        assert len(input_mask) == max_seq_length
277	        assert len(segment_ids) == max_seq_length
278	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\demo\question_answer\files\utils.py:548:4
547	
548	    assert len(nbest) >= 1
549	

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\demo\xray_blocks\run.py:5:45
4	
5	xray_model = lambda diseases, img: {disease: random.random() for disease in diseases}
6	ct_model = lambda diseases, img: {disease: 0.1 for disease in diseases}

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module Random are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\gradio\encryptor.py:1:0
1	from Crypto import Random
2	from Crypto.Cipher import AES
3	from Crypto.Hash import SHA256

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module AES are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\gradio\encryptor.py:2:0
1	from Crypto import Random
2	from Crypto.Cipher import AES
3	from Crypto.Hash import SHA256

--------------------------------------------------
>> Issue: [B413:blacklist] The pyCrypto library and its module SHA256 are no longer actively maintained and have been deprecated. Consider using pyca/cryptography library.
   Severity: High   Confidence: High
   CWE: CWE-327 (https://cwe.mitre.org/data/definitions/327.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b413-import-pycrypto
   Location: .\gradio\encryptor.py:3:0
2	from Crypto.Cipher import AES
3	from Crypto.Hash import SHA256
4	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\gradio\external.py:22:4
21	    response = requests.request("GET", api_url, headers=headers)
22	    assert response.status_code == 200, "Invalid model name or src"
23	    p = response.json().get("pipeline_tag")

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\gradio\external.py:251:8
250	        )  # Separate the source (e.g. "huggingface") from the repo name (e.g. "google/vit-base-patch16-224")
251	        assert (
252	            len(tokens) > 1
253	        ), "Either `src` parameter must be provided, or `name` must be formatted as {src}/{repo name}"
254	        src = tokens[0]

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\gradio\external.py:256:4
255	        name = "/".join(tokens[1:])
256	    assert src.lower() in repos, "parameter: src must be one of {}".format(repos.keys())
257	    interface_info = repos[src](name, api_key, alias)

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\external.py:295:8
294	
295	    r = requests.get(iframe_url)
296	    result = re.search(

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\external.py:308:19
307	        data = json.dumps({"data": data})
308	        response = requests.post(api_url, headers=headers, data=data)
309	        result = json.loads(response.content.decode("utf-8"))

--------------------------------------------------
>> Issue: [B104:hardcoded_bind_all_interfaces] Possible binding to all interfaces.
   Severity: Medium   Confidence: Medium
   CWE: CWE-605 (https://cwe.mitre.org/data/definitions/605.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b104_hardcoded_bind_all_interfaces.html
   Location: .\gradio\networking.py:115:50
114	
115	    url_host_name = "localhost" if server_name == "0.0.0.0" else server_name
116	

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\networking.py:165:15
164	def setup_tunnel(local_server_port: int, endpoint: str) -> str:
165	    response = requests.get(
166	        endpoint + "/v1/tunnel-request" if endpoint is not None else GRADIO_API_SERVER
167	    )
168	    if response and response.status_code == 200:

--------------------------------------------------
>> Issue: [B501:request_with_no_cert_validation] Call to requests with verify=False disabling SSL certificate checks, security issue.
   Severity: High   Confidence: High
   CWE: CWE-295 (https://cwe.mitre.org/data/definitions/295.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b501_request_with_no_cert_validation.html
   Location: .\gradio\networking.py:184:20
183	                warnings.filterwarnings("ignore")
184	                r = requests.head(url, timeout=3, verify=False)
185	            if r.status_code in (200, 401, 302):  # 401 or 302 if auth is set

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\processing_utils.py:31:8
30	    try:
31	        requests.get(path)
32	        return encode_url_to_base64(path)

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\processing_utils.py:71:38
70	def encode_url_to_base64(url):
71	    encoded_string = base64.b64encode(requests.get(url).content)
72	    base64_str = str(encoded_string, "utf-8")

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\queueing.py:22:27
21	                start_job(hash)
22	                response = requests.post(
23	                    path_to_local_server + "api/" + task_type + "/", json=input_data
24	                )
25	                if response.status_code == 200:

--------------------------------------------------
>> Issue: [B507:ssh_no_host_key_verification] Paramiko call with policy set to automatically trust the unknown host key.
   Severity: High   Confidence: Medium
   CWE: CWE-295 (https://cwe.mitre.org/data/definitions/295.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b507_ssh_no_host_key_verification.html
   Location: .\gradio\tunneling.py:69:4
68	    # client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
69	    client.set_missing_host_key_policy(paramiko.WarningPolicy())
70	

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\gradio\utils.py:34:29
33	        current_pkg_version = pkg_resources.require("gradio")[0].version
34	        latest_pkg_version = requests.get(url=PKG_VERSION_URL).json()["version"]
35	        if StrictVersion(latest_pkg_version) > StrictVersion(current_pkg_version):

--------------------------------------------------
>> Issue: [B110:try_except_pass] Try, Except, Pass detected.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b110_try_except_pass.html
   Location: .\gradio\utils.py:52:4
51	        warnings.warn("package URL does not contain version info.")
52	    except:
53	        pass
54	

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\gradio\utils.py:159:31
158	def show_tip(interface: Interface) -> None:
159	    if interface.show_tips and random.random() < 1.5:
160	        tip: str = random.choice(gradio.strings.en["TIPS"])

--------------------------------------------------
>> Issue: [B311:blacklist] Standard pseudo-random generators are not suitable for security/cryptographic purposes.
   Severity: Low   Confidence: High
   CWE: CWE-330 (https://cwe.mitre.org/data/definitions/330.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_calls.html#b311-random
   Location: .\gradio\utils.py:160:19
159	    if interface.show_tips and random.random() < 1.5:
160	        tip: str = random.choice(gradio.strings.en["TIPS"])
161	        print(f"Tip: {tip}")

--------------------------------------------------
>> Issue: [B110:try_except_pass] Try, Except, Pass detected.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b110_try_except_pass.html
   Location: .\gradio\utils.py:178:4
177	                j.write(json.dumps(launches))
178	    except:
179	        pass
180	

--------------------------------------------------
>> Issue: [B701:jinja2_autoescape_false] By default, jinja2 sets autoescape to False. Consider using autoescape=True or use the select_autoescape function to mitigate XSS vulnerabilities.
   Severity: High   Confidence: High
   CWE: CWE-94 (https://cwe.mitre.org/data/definitions/94.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b701_jinja2_autoescape_false.html
   Location: .\render_readme.py:44:18
43	
44	readme_template = Environment(loader=GuidesLoader(".")).get_template(README_TEMPLATE)
45	output_readme = readme_template.render(code=code, demos=demos)

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\test\test_demos.py:29:12
28	        try:
29	            requests.get(url)
30	            print("Interface connected.")

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\test\test_interfaces.py:31:19
30	        _, local_url, _ = io.launch(prevent_thread_lock=True)
31	        response = requests.get(local_url)
32	        self.assertEqual(response.status_code, 200)

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\test\test_interfaces.py:35:23
34	        with self.assertRaises(Exception):
35	            response = requests.get(local_url)
36	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\test\test_processing_utils.py:115:12
114	            y = gr.processing_utils._convert(x, dtype_out)
115	            assert y.dtype == np.dtype(dtype_out)
116	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\test\test_processing_utils.py:123:12
122	            y = gr.processing_utils._convert(x, np.floating)
123	            assert y.dtype == x.dtype
124	

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'correct_password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\test\test_routes.py:90:27
89	        response = self.client.post(
90	            "/login", data=dict(username="test", password="correct_password")
91	        )

--------------------------------------------------
>> Issue: [B106:hardcoded_password_funcarg] Possible hardcoded password: 'incorrect_password'
   Severity: Low   Confidence: Medium
   CWE: CWE-259 (https://cwe.mitre.org/data/definitions/259.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b106_hardcoded_password_funcarg.html
   Location: .\test\test_routes.py:94:27
93	        response = self.client.post(
94	            "/login", data=dict(username="test", password="incorrect_password")
95	        )

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\test\test_tunneling.py:19:19
18	    def test_create_tunnel(self):
19	        response = requests.get(networking.GRADIO_API_SERVER)
20	        payload = response.json()[0]

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\test\test_utils.py:83:8
82	        mock_get_ipython.return_value = None
83	        assert colab_check() is False
84	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\test\test_utils.py:88:8
87	        mock_get_ipython.side_effect = ImportError()
88	        assert ipython_check() is False
89	

--------------------------------------------------
>> Issue: [B101:assert_used] Use of assert detected. The enclosed code will be removed when compiling to optimised byte code.
   Severity: Low   Confidence: High
   CWE: CWE-703 (https://cwe.mitre.org/data/definitions/703.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b101_assert_used.html
   Location: .\test\test_utils.py:93:8
92	        mock_get_ipython.return_value = None
93	        assert ipython_check() is False
94	

--------------------------------------------------
>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b404-import-subprocess
   Location: .\website\demos\map_demos.py:4:0
3	import re
4	import subprocess
5	import sys

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\website\demos\map_demos.py:27:8
26	    if os.path.exists(requirements_file):
27	        subprocess.check_call(
28	            [sys.executable, "-m", "pip", "install", "-r", requirements_file]
29	        )
30	    setup_file = os.path.join(demo_folder, "setup.sh")

--------------------------------------------------
>> Issue: [B607:start_process_with_partial_path] Starting a process with a partial executable path
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b607_start_process_with_partial_path.html
   Location: .\website\demos\map_demos.py:32:8
31	    if os.path.exists(setup_file):
32	        subprocess.check_call(["sh", setup_file])
33	    demo_port_sets.append((demo_name, port))

--------------------------------------------------
>> Issue: [B603:subprocess_without_shell_equals_true] subprocess call - check for execution of untrusted input.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b603_subprocess_without_shell_equals_true.html
   Location: .\website\demos\map_demos.py:32:8
31	    if os.path.exists(setup_file):
32	        subprocess.check_call(["sh", setup_file])
33	    demo_port_sets.append((demo_name, port))

--------------------------------------------------
>> Issue: [B404:blacklist] Consider possible security implications associated with the subprocess module.
   Severity: Low   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/blacklists/blacklist_imports.html#b404-import-subprocess
   Location: .\website\demos\run_demos.py:4:0
3	import os
4	import subprocess
5	import sys

--------------------------------------------------
>> Issue: [B602:subprocess_popen_with_shell_equals_true] subprocess call with shell=True identified, security issue.
   Severity: High   Confidence: High
   CWE: CWE-78 (https://cwe.mitre.org/data/definitions/78.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b602_subprocess_popen_with_shell_equals_true.html
   Location: .\website\demos\run_demos.py:20:4
19	def launch_demo(demo_folder):
20	    subprocess.call(f"cd {demo_folder} && python run.py", shell=True)
21	

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\website\demos\run_demos.py:37:12
36	    for demo_name, _ in demo_port_sets:
37	        r = requests.head(f"http://localhost:80/demo/{demo_name}/")
38	        if r.status_code != 200:

--------------------------------------------------
>> Issue: [B113:request_without_timeout] Requests call without timeout
   Severity: Medium   Confidence: Low
   CWE: CWE-400 (https://cwe.mitre.org/data/definitions/400.html)
   More Info: https://bandit.readthedocs.io/en/1.7.7/plugins/b113_request_without_timeout.html
   Location: .\website\homepage\render_html.py:35:19
34	        tweets = json.load(tweets_file)
35	    star_request = requests.get("https://api.github.com/repos/gradio-app/gradio").json()
36	    star_count = (

--------------------------------------------------

Code scanned:
	Total lines of code: 19409
	Total lines skipped (#nosec): 0
	Total potential issues skipped due to specifically being disabled (e.g., #nosec BXXX): 0

Run metrics:
	Total issues (by severity):
		Undefined: 0
		Low: 29
		Medium: 18
		High: 7
	Total issues (by confidence):
		Undefined: 0
		Low: 16
		Medium: 5
		High: 33
Files skipped (0):
