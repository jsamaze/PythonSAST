===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K-[m[K[32m[K6[m[K[36m[K-[m[Kmodules=''
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K:[m[K[32m[K7[m[K[36m[K:[m[Kfor x in [01;31m[K`find ${NOVA_DIR} -name '*.py' | grep -v nova/tests`[m[K; do
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K:[m[K[32m[K8[m[K[36m[K:[m[K    if [ [01;31m[K`basename ${x} .py`[m[K == "__init__" ] ; then
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K-[m[K[32m[K9[m[K[36m[K-[m[K        continue
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K-[m[K[32m[K10[m[K[36m[K-[m[K    fi
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K:[m[K[32m[K11[m[K[36m[K:[m[K    relative=nova.[01;31m[K`echo ${x} | sed -e 's$^'${NOVA_DIR}'$$' -e 's/.py$//' -e 's$/$.$g'`[m[K
[35m[K/tmp/nova/doc/find_autodoc_modules.sh[m[K[36m[K-[m[K[32m[K12[m[K[36m[K-[m[K    modules="${modules} ${relative}"
[36m[K##############################################[m[K
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K-[m[K[32m[K12[m[K[36m[K-[m[K  echo "${SOURCEDIR}/${x}.rst" >> .autogenerated 
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K:[m[K[32m[K13[m[K[36m[K:[m[K  heading="The :mod:\[01;31m[K`${x}\`[m[K Module"
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K-[m[K[32m[K14[m[K[36m[K-[m[K  # Figure out how long the heading is
[36m[K##############################################[m[K
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K-[m[K[32m[K40[m[K[36m[K-[m[K    for f in `cat .autogenerated | sort` ; do
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K:[m[K[32m[K41[m[K[36m[K:[m[K        relative=[01;31m[K`echo ${f} | sed -e 's$^'${SOURCEDIR}'/$$'`[m[K
[35m[K/tmp/nova/doc/generate_autodoc_index.sh[m[K[36m[K-[m[K[32m[K42[m[K[36m[K-[m[K        echo "   ${relative}" >> ${SOURCEDIR}/autoindex.rst
[36m[K##############################################[m[K
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K-[m[K[32m[K261[m[K[36m[K-[m[K                'grep %s /proc/partitions | '
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K                '[01;31m[K`awk \'{print "mknod /dev/"\\$4" b "\\$1" "\\$2}\'`[m[K'
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K-[m[K[32m[K263[m[K[36m[K-[m[K                % self.device.rpartition('/')[2])
[36m[K##############################################[m[K
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K85[m[K[36m[K-[m[K  then
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K:[m[K[32m[K86[m[K[36m[K:[m[K    ERRSIZE=[01;31m[K`wc -l run_tests.log | awk '{print \$1}'`[m[K
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K87[m[K[36m[K-[m[K    if [ "$ERRSIZE" -lt "40" ];
[36m[K##############################################[m[K
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K104[m[K[36m[K-[m[Ksrcfiles+=" `find tools -type f -name "*.py"`"
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[Ksrcfiles+=" [01;31m[K`find ${xen_api_path} ${xen_net_path} -type f ! -name "*.patch" ! -name "*.pyc"`[m[K"
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K106[m[K[36m[K-[m[Ksrcfiles+=" setup.py"
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K-[m[K[32m[K210[m[K[36m[K-[m[K                if token_type == tokenize.STRING:
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K                    format_string += [01;31m[Keval(text)[m[K
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K-[m[K[32m[K212[m[K[36m[K-[m[K                elif token_type == tokenize.NL:
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K-[m[K[32m[K47[m[K[36m[K-[m[K    echo "No remote set, testing ssh://$username@review.openstack.org:29418"
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K:[m[K[32m[K48[m[K[36m[K:[m[K    if project_list=[01;31m[K`ssh -p29418 -o StrictHostKeyChecking=no $username@review.openstack.org gerrit ls-projects 2>/dev/null`[m[K
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K-[m[K[32m[K49[m[K[36m[K-[m[K    then
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K-[m[K[32m[K76[m[K[36m[K-[m[K    then
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K:[m[K[32m[K77[m[K[36m[K:[m[K        origin_project=[01;31m[K`git remote show origin | grep 'Fetch URL' | perl -nle '@fields = split(m|[:/]|); $len = $#fields; print $fields[$len-1], "/", $fields[$len];'`[m[K
[35m[K/tmp/nova/tools/rfc.sh[m[K[36m[K-[m[K[32m[K78[m[K[36m[K-[m[K        if add_remote $USERNAME $origin_project
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K-[m[K[32m[K1[m[K[36m[K-[m[K#!/bin/bash
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K:[m[K[32m[K2[m[K[36m[K:[m[KTOOLS=[01;31m[K`dirname $0`[m[K
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K-[m[K[32m[K3[m[K[36m[K-[m[KVENV=$TOOLS/../.venv
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/auth/slap.sh[m[K[36m[K-[m[K[32m[K22[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/auth/slap.sh[m[K[36m[K:[m[K[32m[K23[m[K[36m[K:[m[Kabspath=[01;31m[K`dirname "$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"`[m[K
[35m[K/tmp/nova/nova/auth/slap.sh[m[K[36m[K-[m[K[32m[K24[m[K[36m[K-[m[Kcp $abspath/openssh-lpk_openldap.schema /etc/ldap/schema/openssh-lpk_openldap.schema
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/auth/opendj.sh[m[K[36m[K-[m[K[32m[K30[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/auth/opendj.sh[m[K[36m[K:[m[K[32m[K31[m[K[36m[K:[m[Kabspath=[01;31m[K`dirname "$(cd "${0%/*}" 2>/dev/null; echo "$PWD"/"${0##*/}")"`[m[K
[35m[K/tmp/nova/nova/auth/opendj.sh[m[K[36m[K-[m[K[32m[K32[m[K[36m[K-[m[Kschemapath='/var/opendj/instance/config/schema'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K-[m[K[32m[K112[m[K[36m[K-[m[K    @catch_notimplementederror
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K    def test_get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K:[m[K[32m[K114[m[K[36m[K:[m[K        host_ip = self.connection.get_host_ip_[01;31m[Kaddr([m[K)
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K-[m[K[32m[K115[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K-[m[K[32m[K365[m[K[36m[K-[m[K            xenstore_value = xenstore_data[key]
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K            tcpip_data = ast.literal_[01;31m[Keval(xenstore_value)[m[K
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K-[m[K[32m[K367[m[K[36m[K-[m[K            self.assertEquals(tcpip_data,
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1399[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K1400[m[K[36m[K:[m[K    def test_get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1401[m[K[36m[K-[m[K        conn = connection.LibvirtConnection(False)
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K1402[m[K[36m[K:[m[K        ip = conn.get_host_ip_[01;31m[Kaddr([m[K)
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1403[m[K[36m[K-[m[K        self.assertEquals(ip, FLAGS.my_ip)
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2317[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K2318[m[K[36m[K:[m[K        def fake_get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2319[m[K[36m[K-[m[K            return '10.0.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2362[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K2363[m[K[36m[K:[m[K        def fake_get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2364[m[K[36m[K-[m[K            return '10.0.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K22[m[K[36m[K-[m[Kexport LC_ALL=C 
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K23[m[K[36m[K:[m[Kexport VPN_IP=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K24[m[K[36m[K:[m[Kexport BROADCAST=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f3 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K25[m[K[36m[K:[m[Kexport DHCP_MASK=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f4 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K26[m[K[36m[K-[m[Kexport GATEWAY=`netstat -r | grep default | cut -d' ' -f10`
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K29[m[K[36m[K-[m[K# FA:16:3E, we'll thus generate a MAC starting with FA:17:3E to be higher than eth0.
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K30[m[K[36m[K:[m[Kexport RANDOM_TAP_MAC=[01;31m[K`openssl rand -hex 8 | sed 's/\(..\)/\1:/g' | cut -b-8 | awk '{print "FA:17:3E:"$$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[KDHCP_LOWER=[01;31m[K`echo $$BROADCAST | awk -F. '{print $$1"."$$2"."$$3"." $$4 - ${num_vpn} }'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[KDHCP_UPPER=[01;31m[K`echo $$BROADCAST | awk -F. '{print $$1"."$$2"."$$3"." $$4 - 1 }'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K34[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K-[m[K[32m[K118[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K:[m[K[32m[K119[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K-[m[K[32m[K120[m[K[36m[K-[m[K        return '192.168.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K331[m[K[36m[K-[m[K        return {
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K:[m[K[32m[K332[m[K[36m[K:[m[K            'ip': self.get_host_ip_[01;31m[Kaddr([m[K),
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K333[m[K[36m[K-[m[K            'initiator': self._initiator
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K336[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K:[m[K[32m[K337[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K338[m[K[36m[K-[m[K        xs_url = urlparse.urlparse(FLAGS.xenapi_connection_url)
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K604[m[K[36m[K-[m[K                try:
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K                    params = [01;31m[Keval(exc.details[3])[m[K
[35m[K/tmp/nova/nova/virt/xenapi/connection.py[m[K[36m[K-[m[K[32m[K606[m[K[36m[K-[m[K                except Exception:
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K-[m[K[32m[K989[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K:[m[K[32m[K990[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K-[m[K[32m[K991[m[K[36m[K-[m[K        return FLAGS.my_ip
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K-[m[K[32m[K2471[m[K[36m[K-[m[K        # shared storage for instance dir (eg. NFS).
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K:[m[K[32m[K2472[m[K[36m[K:[m[K        same_host = (dest == self.get_host_ip_[01;31m[Kaddr([m[K))
[35m[K/tmp/nova/nova/virt/libvirt/connection.py[m[K[36m[K-[m[K[32m[K2473[m[K[36m[K-[m[K        inst_base = "%s/%s" % (FLAGS.instances_path, instance['name'])
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K-[m[K[32m[K247[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K:[m[K[32m[K248[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K-[m[K[32m[K249[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K-[m[K[32m[K90[m[K[36m[K-[m[K        if ip['version'] == 4:
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K            netmask = str(subnet.as_net[01;31m[Kaddr([m[K).netmask)
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K-[m[K[32m[K92[m[K[36m[K-[m[K        else:
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K:[m[K[32m[K93[m[K[36m[K:[m[K            netmask = subnet.as_net[01;31m[Kaddr([m[K)._prefixlen
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K-[m[K[32m[K94[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K-[m[K[32m[K167[m[K[36m[K-[m[K        info_dict = dict(label=network['label'],
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K                         broadcast=str(subnet_v4.as_net[01;31m[Kaddr([m[K).broadcast),
[35m[K/tmp/nova/nova/compute/utils.py[m[K[36m[K-[m[K[32m[K169[m[K[36m[K-[m[K                         mac=vif['address'],
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K-[m[K[32m[K1288[m[K[36m[K-[m[K                 'dest_compute': FLAGS.host,
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K:[m[K[32m[K1289[m[K[36m[K:[m[K                 'dest_host': self.driver.get_host_ip_[01;31m[Kaddr([m[K),
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K-[m[K[32m[K1290[m[K[36m[K-[m[K                 'old_instance_type_id': old_instance_type['id'],
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K150[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K:[m[K[32m[K151[m[K[36m[K:[m[K    def as_net[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K152[m[K[36m[K-[m[K        """Convience function to get cidr as a netaddr object"""
