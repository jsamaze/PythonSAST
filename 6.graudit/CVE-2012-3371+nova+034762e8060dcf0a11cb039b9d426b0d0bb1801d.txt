===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K-[m[K[32m[K261[m[K[36m[K-[m[K                'grep %s /proc/partitions | '
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K:[m[K[32m[K262[m[K[36m[K:[m[K                '[01;31m[K`awk \'{print "mknod /dev/"\\$4" b "\\$1" "\\$2}\'`[m[K'
[35m[K/tmp/nova/smoketests/test_sysadmin.py[m[K[36m[K-[m[K[32m[K263[m[K[36m[K-[m[K                % self.device.rpartition('/')[2])
[36m[K##############################################[m[K
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K91[m[K[36m[K-[m[K  then
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K    ERRSIZE=[01;31m[K`wc -l run_tests.log | awk '{print \$1}'`[m[K
[35m[K/tmp/nova/run_tests.sh[m[K[36m[K-[m[K[32m[K93[m[K[36m[K-[m[K    if [ "$ERRSIZE" -lt "40" ];
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K-[m[K[32m[K302[m[K[36m[K-[m[K                if token_type == tokenize.STRING:
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K                    format_string += [01;31m[Keval(text)[m[K
[35m[K/tmp/nova/tools/hacking.py[m[K[36m[K-[m[K[32m[K304[m[K[36m[K-[m[K                elif token_type == tokenize.NL:
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K-[m[K[32m[K22[m[K[36m[K-[m[K		_nova_manage_opts="`nova-manage bash-completion 2>/dev/null`"
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K:[m[K[32m[K23[m[K[36m[K:[m[K		_nova_manage_opts_exp="[01;31m[K`echo $_nova_manage_opts | sed -e "s/\s/|/g"`[m[K"
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K-[m[K[32m[K24[m[K[36m[K-[m[K	fi
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K-[m[K[32m[K25[m[K[36m[K-[m[K
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K:[m[K[32m[K26[m[K[36m[K:[m[K	if [[ " [01;31m[K`echo $_nova_manage_opts`[m[K " =~ " $prev " ]] ; then
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K-[m[K[32m[K27[m[K[36m[K-[m[K		if [ "x$(_get_nova_manage_subopts "$prev")" == "x" ] ; then
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K:[m[K[32m[K28[m[K[36m[K:[m[K			subopts="[01;31m[K`nova-manage bash-completion $prev 2>/dev/null`[m[K"
[35m[K/tmp/nova/tools/nova-manage.bash_completion[m[K[36m[K-[m[K[32m[K29[m[K[36m[K-[m[K			_set_nova_manage_subopts "$prev" "$subopts"
[36m[K##############################################[m[K
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K-[m[K[32m[K1[m[K[36m[K-[m[K#!/bin/bash
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K:[m[K[32m[K2[m[K[36m[K:[m[KTOOLS=[01;31m[K`dirname $0`[m[K
[35m[K/tmp/nova/tools/with_venv.sh[m[K[36m[K-[m[K[32m[K3[m[K[36m[K-[m[KVENV=$TOOLS/../.venv
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K-[m[K[32m[K239[m[K[36m[K-[m[K    @catch_notimplementederror
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K:[m[K[32m[K240[m[K[36m[K:[m[K    def test_get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K:[m[K[32m[K241[m[K[36m[K:[m[K        host_ip = self.connection.get_host_ip_[01;31m[Kaddr([m[K)
[35m[K/tmp/nova/nova/tests/test_virt_drivers.py[m[K[36m[K-[m[K[32m[K242[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K-[m[K[32m[K433[m[K[36m[K-[m[K            xenstore_value = xenstore_data[key]
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K:[m[K[32m[K434[m[K[36m[K:[m[K            tcpip_data = ast.literal_[01;31m[Keval(xenstore_value)[m[K
[35m[K/tmp/nova/nova/tests/test_xenapi.py[m[K[36m[K-[m[K[32m[K435[m[K[36m[K-[m[K            self.assertEquals(tcpip_data,
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1768[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K1769[m[K[36m[K:[m[K    def test_get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1770[m[K[36m[K-[m[K        conn = libvirt_driver.LibvirtDriver(False)
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K1771[m[K[36m[K:[m[K        ip = conn.get_host_ip_[01;31m[Kaddr([m[K)
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K1772[m[K[36m[K-[m[K        self.assertEquals(ip, FLAGS.my_ip)
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2814[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K2815[m[K[36m[K:[m[K        def fake_get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2816[m[K[36m[K-[m[K            return '10.0.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2859[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K:[m[K[32m[K2860[m[K[36m[K:[m[K        def fake_get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/tests/test_libvirt.py[m[K[36m[K-[m[K[32m[K2861[m[K[36m[K-[m[K            return '10.0.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K22[m[K[36m[K-[m[Kexport LC_ALL=C 
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K23[m[K[36m[K:[m[Kexport VPN_IP=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f2 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K24[m[K[36m[K:[m[Kexport BROADCAST=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f3 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K25[m[K[36m[K:[m[Kexport DHCP_MASK=[01;31m[K`ifconfig  | grep 'inet addr:'| grep -v '127.0.0.1' | cut -d: -f4 | awk '{print $$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K26[m[K[36m[K-[m[Kexport GATEWAY=`netstat -r | grep default | cut -d' ' -f10`
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K29[m[K[36m[K-[m[K# FA:16:3E, we'll thus generate a MAC starting with FA:17:3E to be higher than eth0.
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K30[m[K[36m[K:[m[Kexport RANDOM_TAP_MAC=[01;31m[K`openssl rand -hex 8 | sed 's/\(..\)/\1:/g' | cut -b-8 | awk '{print "FA:17:3E:"$$1}'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[KDHCP_LOWER=[01;31m[K`echo $$BROADCAST | awk -F. '{print $$1"."$$2"."$$3"." $$4 - ${num_vpn} }'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K:[m[K[32m[K33[m[K[36m[K:[m[KDHCP_UPPER=[01;31m[K`echo $$BROADCAST | awk -F. '{print $$1"."$$2"."$$3"." $$4 - 1 }'`[m[K
[35m[K/tmp/nova/nova/cloudpipe/bootscript.template[m[K[36m[K-[m[K[32m[K34[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K-[m[K[32m[K107[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K:[m[K[32m[K108[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/fake.py[m[K[36m[K-[m[K[32m[K109[m[K[36m[K-[m[K        return '192.168.0.1'
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K-[m[K[32m[K1380[m[K[36m[K-[m[K            if ip['version'] == 4:
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K:[m[K[32m[K1381[m[K[36m[K:[m[K                netmask = str(subnet.as_net[01;31m[Kaddr([m[K).netmask)
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K-[m[K[32m[K1382[m[K[36m[K-[m[K            else:
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K:[m[K[32m[K1383[m[K[36m[K:[m[K                netmask = subnet.as_net[01;31m[Kaddr([m[K)._prefixlen
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K-[m[K[32m[K1384[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K-[m[K[32m[K1414[m[K[36m[K-[m[K            info_dict['gateway'] = get_ip(v4_subnets[0]['gateway'])
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K:[m[K[32m[K1415[m[K[36m[K:[m[K            info_dict['broadcast'] = str(v4_subnets[0].as_net[01;31m[Kaddr([m[K).broadcast)
[35m[K/tmp/nova/nova/virt/xenapi/vmops.py[m[K[36m[K-[m[K[32m[K1416[m[K[36m[K-[m[K            info_dict['ips'] = [fixed_ip_dict(ip, subnet)
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K-[m[K[32m[K1940[m[K[36m[K-[m[K                # populate interface_info
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K:[m[K[32m[K1941[m[K[36m[K:[m[K                subnet_netaddr = subnet.as_net[01;31m[Kaddr([m[K)
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K-[m[K[32m[K1942[m[K[36m[K-[m[K                interface_info['address'] = ip['address']
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K-[m[K[32m[K1959[m[K[36m[K-[m[K                interface_info['address_v6'] = ip['address']
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K:[m[K[32m[K1960[m[K[36m[K:[m[K                interface_info['netmask_v6'] = subnet.as_net[01;31m[Kaddr([m[K).netmask
[35m[K/tmp/nova/nova/virt/xenapi/vm_utils.py[m[K[36m[K-[m[K[32m[K1961[m[K[36m[K-[m[K                interface_info['gateway_v6'] = subnet['gateway']['address']
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K341[m[K[36m[K-[m[K        return {
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K:[m[K[32m[K342[m[K[36m[K:[m[K            'ip': self.get_host_ip_[01;31m[Kaddr([m[K),
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K343[m[K[36m[K-[m[K            'initiator': self._initiator,
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K347[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K:[m[K[32m[K348[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K349[m[K[36m[K-[m[K        xs_url = urlparse.urlparse(FLAGS.xenapi_connection_url)
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K623[m[K[36m[K-[m[K                    # FIXME(comstud): eval is evil.
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K:[m[K[32m[K624[m[K[36m[K:[m[K                    params = [01;31m[Keval(exc.details[3])[m[K
[35m[K/tmp/nova/nova/virt/xenapi/driver.py[m[K[36m[K-[m[K[32m[K625[m[K[36m[K-[m[K                except Exception:
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K-[m[K[32m[K1122[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K:[m[K[32m[K1123[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[K):
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K-[m[K[32m[K1124[m[K[36m[K-[m[K        return FLAGS.my_ip
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K-[m[K[32m[K2620[m[K[36m[K-[m[K        # shared storage for instance dir (eg. NFS).
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K:[m[K[32m[K2621[m[K[36m[K:[m[K        same_host = (dest == self.get_host_ip_[01;31m[Kaddr([m[K))
[35m[K/tmp/nova/nova/virt/libvirt/driver.py[m[K[36m[K-[m[K[32m[K2622[m[K[36m[K-[m[K        inst_base = "%s/%s" % (FLAGS.instances_path, instance['name'])
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K-[m[K[32m[K238[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K:[m[K[32m[K239[m[K[36m[K:[m[K    def get_host_ip_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/virt/driver.py[m[K[36m[K-[m[K[32m[K240[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K-[m[K[32m[K1364[m[K[36m[K-[m[K                 'dest_compute': FLAGS.host,
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K:[m[K[32m[K1365[m[K[36m[K:[m[K                 'dest_host': self.driver.get_host_ip_[01;31m[Kaddr([m[K),
[35m[K/tmp/nova/nova/compute/manager.py[m[K[36m[K-[m[K[32m[K1366[m[K[36m[K-[m[K                 'old_instance_type_id': old_instance_type['id'],
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K82[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[Kdef get_instance_by_floating_ip_[01;31m[Kaddr([m[Kself, context, address):
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K84[m[K[36m[K-[m[K    snagiibfa = self.network_api.get_instance_id_by_floating_address
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K189[m[K[36m[K-[m[K        # get the associated instance object (if any)
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K:[m[K[32m[K190[m[K[36m[K:[m[K        instance = get_instance_by_floating_ip_[01;31m[Kaddr([m[Kself, context, address)
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K191[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K281[m[K[36m[K-[m[K        # get the associated instance object (if any)
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K        instance = get_instance_by_floating_ip_[01;31m[Kaddr([m[Kself, context, address)
[35m[K/tmp/nova/nova/api/openstack/compute/contrib/floating_ips.py[m[K[36m[K-[m[K[32m[K283[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K154[m[K[36m[K-[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K:[m[K[32m[K155[m[K[36m[K:[m[K    def as_net[01;31m[Kaddr([m[Kself):
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K156[m[K[36m[K-[m[K        """Convience function to get cidr as a netaddr object"""
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K290[m[K[36m[K-[m[K            if ip['version'] == 4:
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K:[m[K[32m[K291[m[K[36m[K:[m[K                netmask = str(subnet.as_net[01;31m[Kaddr([m[K).netmask)
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K292[m[K[36m[K-[m[K            else:
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K                netmask = subnet.as_net[01;31m[Kaddr([m[K)._prefixlen
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K294[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K363[m[K[36m[K-[m[K            info_dict = {'label': network['label'],
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K                         'broadcast': str(subnet_v4.as_net[01;31m[Kaddr([m[K).broadcast),
[35m[K/tmp/nova/nova/network/model.py[m[K[36m[K-[m[K[32m[K365[m[K[36m[K-[m[K                         'mac': vif['address'],
