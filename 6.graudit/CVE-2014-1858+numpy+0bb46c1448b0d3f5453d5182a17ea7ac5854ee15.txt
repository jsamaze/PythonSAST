===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K78[m[K[36m[K-[m[K            pol1 = [0]*i + [1]
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K79[m[K[36m[K:[m[K            val1 = herme.herm[01;31m[Keval(self.x, pol1)[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K80[m[K[36m[K-[m[K            for j in range(5):
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K82[m[K[36m[K-[m[K                pol2 = [0]*j + [1]
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K                val2 = herme.herm[01;31m[Keval(self.x, pol2)[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K84[m[K[36m[K-[m[K                pol3 = herme.hermemul(pol1, pol2)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K85[m[K[36m[K:[m[K                val3 = herme.herm[01;31m[Keval(self.x, pol3)[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K86[m[K[36m[K-[m[K                assert_(len(pol3) == i + j + 1, msg)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K110[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K111[m[K[36m[K:[m[K    def test_herm[01;31m[Keval(self)[m[K:
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K112[m[K[36m[K-[m[K        #check empty input
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K113[m[K[36m[K:[m[K        assert_equal(herme.herm[01;31m[Keval([], [1])[m[K.size, 0)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K114[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K121[m[K[36m[K-[m[K            tgt = y[i]
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K122[m[K[36m[K:[m[K            res = herme.herm[01;31m[Keval(x, [0]*i + [1])[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K123[m[K[36m[K-[m[K            assert_almost_equal(res, tgt, err_msg=msg)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K128[m[K[36m[K-[m[K            x = np.zeros(dims)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[K            assert_equal(herme.herm[01;31m[Keval(x, [1])[m[K.shape, dims)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K130[m[K[36m[K:[m[K            assert_equal(herme.herm[01;31m[Keval(x, [1, 0])[m[K.shape, dims)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K131[m[K[36m[K:[m[K            assert_equal(herme.herm[01;31m[Keval(x, [1, 0, 0])[m[K.shape, dims)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K132[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K225[m[K[36m[K-[m[K            hermeint = herme.hermeint(hermepol, m=1, k=[i], lbnd=-1)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K226[m[K[36m[K:[m[K            assert_almost_equal(herme.herm[01;31m[Keval(-1, hermeint)[m[K, i)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K227[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K346[m[K[36m[K-[m[K            coef = [0]*i + [1]
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K347[m[K[36m[K:[m[K            assert_almost_equal(v[..., i], herme.herm[01;31m[Keval(x, coef)[m[K)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K348[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K354[m[K[36m[K-[m[K            coef = [0]*i + [1]
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K355[m[K[36m[K:[m[K            assert_almost_equal(v[..., i], herme.herm[01;31m[Keval(x, coef)[m[K)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K356[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K405[m[K[36m[K-[m[K        assert_equal(len(coef3), 4)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K406[m[K[36m[K:[m[K        assert_almost_equal(herme.herm[01;31m[Keval(x, coef3)[m[K, y)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K407[m[K[36m[K-[m[K        #
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K409[m[K[36m[K-[m[K        assert_equal(len(coef4), 5)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K410[m[K[36m[K:[m[K        assert_almost_equal(herme.herm[01;31m[Keval(x, coef4)[m[K, y)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K411[m[K[36m[K-[m[K        #
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K471[m[K[36m[K-[m[K            pol = herme.hermefromroots(roots)
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K:[m[K[32m[K472[m[K[36m[K:[m[K            res = herme.herm[01;31m[Keval(roots, pol)[m[K
[35m[K/tmp/numpy/numpy/polynomial/tests/test_hermite_e.py[m[K[36m[K-[m[K[32m[K473[m[K[36m[K-[m[K            tgt = 0
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K223[m[K[36m[K-[m[K    >>> from numpy.polynomial.hermite_e import hermeline, hermeval
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K224[m[K[36m[K:[m[K    >>> herm[01;31m[Keval(0,hermeline(3, 2)[m[K)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K225[m[K[36m[K-[m[K    3.0
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K226[m[K[36m[K:[m[K    >>> herm[01;31m[Keval(1,hermeline(3, 2)[m[K)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K227[m[K[36m[K-[m[K    5.0
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K278[m[K[36m[K-[m[K    >>> coef = hermefromroots((-1, 0, 1))
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K    >>> herm[01;31m[Keval((-1, 0, 1)[m[K, coef)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K280[m[K[36m[K-[m[K    array([ 0.,  0.,  0.])
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K281[m[K[36m[K-[m[K    >>> coef = hermefromroots((-1j, 1j))
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K282[m[K[36m[K:[m[K    >>> herm[01;31m[Keval((-1j, 1j)[m[K, coef)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K283[m[K[36m[K-[m[K    array([ 0.+0.j,  0.+0.j])
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K842[m[K[36m[K-[m[K                tmp[j + 1] = c[j]/(j + 1)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K843[m[K[36m[K:[m[K            tmp[0] += k[i] - herm[01;31m[Keval(lbnd, tmp)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K844[m[K[36m[K-[m[K            c = tmp
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K848[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K849[m[K[36m[K:[m[Kdef herm[01;31m[Keval(x, c, tensor=True)[m[K:
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K850[m[K[36m[K-[m[K    """
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K910[m[K[36m[K-[m[K    >>> coef = [1,2,3]
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K911[m[K[36m[K:[m[K    >>> herm[01;31m[Keval(1, coef)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K912[m[K[36m[K-[m[K    3.0
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K913[m[K[36m[K:[m[K    >>> herm[01;31m[Keval([[1,2],[3,4]], coef)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K914[m[K[36m[K-[m[K    array([[  3.,  14.],
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K994[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K995[m[K[36m[K:[m[K    c = herm[01;31m[Keval(x, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K996[m[K[36m[K:[m[K    c = herm[01;31m[Keval(y, c, tensor=False)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K997[m[K[36m[K-[m[K    return c
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1049[m[K[36m[K-[m[K    """
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1050[m[K[36m[K:[m[K    c = herm[01;31m[Keval(x, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1051[m[K[36m[K:[m[K    c = herm[01;31m[Keval(y, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1052[m[K[36m[K-[m[K    return c
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1107[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1108[m[K[36m[K:[m[K    c = herm[01;31m[Keval(x, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1109[m[K[36m[K:[m[K    c = herm[01;31m[Keval(y, c, tensor=False)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1110[m[K[36m[K:[m[K    c = herm[01;31m[Keval(z, c, tensor=False)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1111[m[K[36m[K-[m[K    return c
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1166[m[K[36m[K-[m[K    """
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1167[m[K[36m[K:[m[K    c = herm[01;31m[Keval(x, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1168[m[K[36m[K:[m[K    c = herm[01;31m[Keval(y, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1169[m[K[36m[K:[m[K    c = herm[01;31m[Keval(z, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1170[m[K[36m[K-[m[K    return c
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1185[m[K[36m[K-[m[K    array ``V = hermevander(x, n)``, then ``np.dot(V, c)`` and
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1186[m[K[36m[K:[m[K    ``herm[01;31m[Keval(x, c)[m[K`` are the same up to roundoff. This equivalence is
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1187[m[K[36m[K-[m[K    useful both for least squares fitting and for the evaluation of a large
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1478[m[K[36m[K-[m[K    >>> err = np.random.randn(len(x))/10
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1479[m[K[36m[K:[m[K    >>> y = herm[01;31m[Keval(x, [1, 2, 3])[m[K + err
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1480[m[K[36m[K-[m[K    >>> hermefit(x, y, 2)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1693[m[K[36m[K-[m[K    # improve roots by one application of Newton
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1694[m[K[36m[K:[m[K    dy = herm[01;31m[Keval(x, c)[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1695[m[K[36m[K:[m[K    df = herm[01;31m[Keval(x, hermeder(c)[m[K)
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1696[m[K[36m[K-[m[K    x -= dy/df
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1699[m[K[36m[K-[m[K    # overflow.
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K:[m[K[32m[K1700[m[K[36m[K:[m[K    fm = herm[01;31m[Keval(x, c[1:])[m[K
[35m[K/tmp/numpy/numpy/polynomial/hermite_e.py[m[K[36m[K-[m[K[32m[K1701[m[K[36m[K-[m[K    fm /= np.abs(fm).max()
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K578[m[K[36m[K-[m[K        ``domain`` is equal to the ``window`` the resulting map is the
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K579[m[K[36m[K:[m[K        identity.  If the coefficients of the `[01;31m[K`$name`[m[K` instance are to be
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K580[m[K[36m[K-[m[K        used by themselves outside this class, then the linear function
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K604[m[K[36m[K-[m[K        Return an instance of $name that is the definite integral of the
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K605[m[K[36m[K:[m[K        current series. Refer to [01;31m[K`${nick}int`[m[K for full documentation.
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K606[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K641[m[K[36m[K-[m[K        Return an instance of $name that is the derivative of the current
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K642[m[K[36m[K:[m[K        series.  Refer to [01;31m[K`${nick}der`[m[K for full documentation.
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K643[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K666[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K667[m[K[36m[K:[m[K        Return ndarray of roots for this series. See [01;31m[K`${nick}roots`[m[K for
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K668[m[K[36m[K-[m[K        full documentation. Note that the accuracy of the roots is likely to
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K718[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K719[m[K[36m[K:[m[K        Return a [01;31m[K`$name`[m[K instance that is the least squares fit to the data
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K720[m[K[36m[K:[m[K        `y` sampled at `x`. Unlike [01;31m[K`${nick}fit`[m[K, the domain of the returned
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K721[m[K[36m[K-[m[K        instance can be specified and this will often result in a superior
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K722[m[K[36m[K-[m[K        fit with less chance of ill conditioning. Support for NA was added
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K723[m[K[36m[K:[m[K        in version 1.7.0. See [01;31m[K`${nick}fit`[m[K for full documentation of the
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K724[m[K[36m[K-[m[K        implementation.
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K738[m[K[36m[K-[m[K            then a minimal domain that covers the points `x` is chosen.  If
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K739[m[K[36m[K:[m[K            ``[]`` the default domain `[01;31m[K`$domain`[m[K` is used. The default
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K740[m[K[36m[K-[m[K            value is $domain in numpy 1.4.x and ``None`` in later versions.
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K761[m[K[36m[K-[m[K            Window to use for the returned $name instance. The default
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K762[m[K[36m[K:[m[K            value is `[01;31m[K`$domain`[m[K`
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K763[m[K[36m[K-[m[K            .. versionadded:: 1.6.0
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K841[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K:[m[K[32m[K842[m[K[36m[K:[m[K        If ``p`[01;31m[K` is the returned $name object, then `[m[K`p(x) == x`` for all
[35m[K/tmp/numpy/numpy/polynomial/polytemplate.py[m[K[36m[K-[m[K[32m[K843[m[K[36m[K-[m[K        values of x.
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K-[m[K[32m[K1227[m[K[36m[K-[m[Kstatic char __pyx_k_tomaxint_size_None_Random_integ[] = "\n        tomaxint(size=None)\n\n        Random integers between 0 and ``sys.maxint``, inclusive.\n\n        Return a sample of uniformly distributed random integers in the interval\n        [0, ``sys.maxint``].\n\n        Parameters\n        ----------\n        size : tuple of ints, int, optional\n            Shape of output.  If this is, for example, (m,n,k), m*n*k samples\n            are generated.  If no shape is specified, a single sample is\n            returned.\n\n        Returns\n        -------\n        out : ndarray\n            Drawn samples, with shape `size`.\n\n        See Also\n        --------\n        randint : Uniform sampling over a given half-open interval of integers.\n        random_integers : Uniform sampling over a given closed interval of\n            integers.\n\n        Examples\n        --------\n        >>> RS = np.random.mtrand.RandomState() # need a RandomState object\n        >>> RS.tomaxint((2,2,2))\n        array([[[1170048599, 1600360186],\n                [ 739731006, 1947757578]],\n               [[1871712945,  752307660],\n                [1601631370, 1479324245]]])\n        >>> import sys\n        >>> sys.maxint\n        2147483647\n        >>> RS.tomaxint((2,2,2)) < sys.maxint\n        array([[[ True,  True],\n                [ True,  True]],\n               [[ True,  True],\n                [ True,  True]]], dtype=bool)\n\n        ";
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K:[m[K[32m[K1228[m[K[36m[K:[m[Kstatic char __pyx_k_triangular_left_mode_right_size[] = "\n        triangular(left, mode, right, size=None)\n\n        Draw samples from the triangular distribution.\n\n        The triangular distribution is a continuous probability distribution with\n        lower limit left, peak at mode, and upper limit right. Unlike the other\n        distributions, these parameters directly define the shape of the pdf.\n\n        Parameters\n        ----------\n        left : scalar\n            Lower limit.\n        mode : scalar\n            The value [01;31m[Kwhere the peak of the distribution occurs.\n            The value should fulfill the condition ``left <= mode <= right``.\n        right : scalar\n            Upper limit, should be larger than `left`.\n        size : int or tuple of ints, optional\n            Output shape. Default is None, in which case a single value is\n            returned.\n\n        Returns\n        -------\n        samples : ndarray or scalar\n            The returned samples all lie in the interval [left, right].\n\n        Notes\n        -----\n        The probability density function for the Triangular distribution is\n\n        .. math:: P(x;l, m, r) = \\begin{cases}\n                  \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n                  \\frac{2(m-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n[m[K                  0& \\text{otherwise}.\n                  \\end{cases}\n\n        The triangular distribution is often used in ill-defined problems where the\n        underlying distribution is not known, but some knowledge of the limits and\n        mode exists. Often it is used in simulations.\n\n        References\n        ----------\n        .. [1] Wikipedia, \"Triangular distribution\"\n              http://en.wikipedia.org/wiki/Triangular_distribution\n\n        Examples\n        --------\n        Draw values from the distribution and plot the histogram:\n\n        >>> import matplotlib.pyplot as plt\n        >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=""200,\n        ...              normed=True)\n        >>> plt.show()\n\n        ";
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K-[m[K[32m[K1229[m[K[36m[K-[m[Kstatic char __pyx_k_uniform_low_0_0_high_1_0_size_1[] = "\n        uniform(low=0.0, high=1.0, size=1)\n\n        Draw samples from a uniform distribution.\n\n        Samples are uniformly distributed over the half-open interval\n        ``[low, high)`` (includes low, but excludes high).  In other words,\n        any value within the given interval is equally likely to be drawn\n        by `uniform`.\n\n        Parameters\n        ----------\n        low : float, optional\n            Lower boundary of the output interval.  All values generated will be\n            greater than or equal to low.  The default value is 0.\n        high : float\n            Upper boundary of the output interval.  All values generated will be\n            less than high.  The default value is 1.0.\n        size : int or tuple of ints, optional\n            Shape of output.  If the given size is, for example, (m,n,k),\n            m*n*k samples are generated.  If no shape is specified, a single sample\n            is returned.\n\n        Returns\n        -------\n        out : ndarray\n            Drawn samples, with shape `size`.\n\n        See Also\n        --------\n        randint : Discrete uniform distribution, yielding integers.\n        random_integers : Discrete uniform distribution over the closed\n                          interval ``[low, high]``.\n        random_sample : Floats uniformly distributed over ``[0, 1)``.\n        random : Alias for `random_sample`.\n        rand : Convenience function that accepts dimensions as input, e.g.,\n               ``rand(2,2)`` would generate a 2-by-2 array of floats,\n               uniformly distributed over ``[0, 1)``.\n\n        Notes\n        -----\n        The probability density function of the uniform distribution is\n\n        .. math:: p(x) = \\frac{1}{b - a}\n\n        anywhere within the interval ``[a, b)``, and zero elsewhere.\n\n        Examples\n        --------\n        Draw samples from the distribution:\n\n        >>> s = np.random.uniform(-1,0,1000)\n\n        All values are w""ithin the given interval:\n\n        >>> np.all(s >= -1)\n        True\n        >>> np.all(s < 0)\n        True\n\n        Display the histogram of the samples, along with the\n        probability density function:\n\n        >>> import matplotlib.pyplot as plt\n        >>> count, bins, ignored = plt.hist(s, 15, normed=True)\n        >>> plt.plot(bins, np.ones_like(bins), linewidth=2, color='r')\n        >>> plt.show()\n\n        ";
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K-[m[K[32m[K16007[m[K[36m[K-[m[Kstatic PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K:[m[K[32m[K16008[m[K[36m[K:[m[Kstatic char __pyx_doc_6mtrand_11RandomState_80triangular[] = "\n        triangular(left, mode, right, size=None)\n\n        Draw samples from the triangular distribution.\n\n        The triangular distribution is a continuous probability distribution with\n        lower limit left, peak at mode, and upper limit right. Unlike the other\n        distributions, these parameters directly define the shape of the pdf.\n\n        Parameters\n        ----------\n        left : scalar\n            Lower limit.\n        mode : scalar\n            The value [01;31m[Kwhere the peak of the distribution occurs.\n            The value should fulfill the condition ``left <= mode <= right``.\n        right : scalar\n            Upper limit, should be larger than `left`.\n        size : int or tuple of ints, optional\n            Output shape. Default is None, in which case a single value is\n            returned.\n\n        Returns\n        -------\n        samples : ndarray or scalar\n            The returned samples all lie in the interval [left, right].\n\n        Notes\n        -----\n        The probability density function for the Triangular distribution is\n\n        .. math:: P(x;l, m, r) = \\begin{cases}\n                  \\frac{2(x-l)}{(r-l)(m-l)}& \\text{for $l \\leq x \\leq m$},\\\\\n                  \\frac{2(m-x)}{(r-l)(r-m)}& \\text{for $m \\leq x \\leq r$},\\\\\n[m[K                  0& \\text{otherwise}.\n                  \\end{cases}\n\n        The triangular distribution is often used in ill-defined problems where the\n        underlying distribution is not known, but some knowledge of the limits and\n        mode exists. Often it is used in simulations.\n\n        References\n        ----------\n        .. [1] Wikipedia, \"Triangular distribution\"\n              http://en.wikipedia.org/wiki/Triangular_distribution\n\n        Examples\n        --------\n        Draw values from the distribution and plot the histogram:\n\n        >>> import matplotlib.pyplot as plt\n        >>> h = plt.hist(np.random.triangular(-3, 0, 8, 100000), bins=""200,\n        ...              normed=True)\n        >>> plt.show()\n\n        ";
[35m[K/tmp/numpy/numpy/random/mtrand/mtrand.c[m[K[36m[K-[m[K[32m[K16009[m[K[36m[K-[m[Kstatic PyObject *__pyx_pw_6mtrand_11RandomState_81triangular(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K207[m[K[36m[K-[m[K            try:
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[K                self[01;31m[K._compile([m[Kbody % {'type': type_name},
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K209[m[K[36m[K-[m[K                        headers, include_dirs, 'c')
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K233[m[K[36m[K-[m[K"""
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K:[m[K[32m[K234[m[K[36m[K:[m[K        self[01;31m[K._compile([m[Kbody % {'type': type_name},
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K235[m[K[36m[K-[m[K                headers, include_dirs, 'c')
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K251[m[K[36m[K-[m[K                try:
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K:[m[K[32m[K252[m[K[36m[K:[m[K                    self[01;31m[K._compile([m[Kbody % {'type': type_name, 'size': size},
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K253[m[K[36m[K-[m[K                            headers, include_dirs, 'c')
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K278[m[K[36m[K-[m[K            try:
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K:[m[K[32m[K279[m[K[36m[K:[m[K                self[01;31m[K._compile([m[Kbody % {'type': type_name, 'size': mid},
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K280[m[K[36m[K-[m[K                        headers, include_dirs, 'c')
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K292[m[K[36m[K-[m[K            try:
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K:[m[K[32m[K293[m[K[36m[K:[m[K                self[01;31m[K._compile([m[Kbody % {'type': type_name, 'size': mid},
[35m[K/tmp/numpy/numpy/distutils/command/config.py[m[K[36m[K-[m[K[32m[K294[m[K[36m[K-[m[K                        headers, include_dirs, 'c')
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/fcompiler/vast.py[m[K[36m[K-[m[K[32m[K17[m[K[36m[K-[m[K    # to the current directory and then moved to build directory
[35m[K/tmp/numpy/numpy/distutils/fcompiler/vast.py[m[K[36m[K:[m[K[32m[K18[m[K[36m[K:[m[K    object_switch = ' && function _mvfile { mv -v [01;31m[K`basename $1`[m[K $1 ; } && _mvfile '
[35m[K/tmp/numpy/numpy/distutils/fcompiler/vast.py[m[K[36m[K-[m[K[32m[K19[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K-[m[K[32m[K201[m[K[36m[K-[m[K                    src = cyg2win32(src)
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K:[m[K[32m[K202[m[K[36m[K:[m[K                self[01;31m[K._compile([m[Kobj, src, ext, cc_args, extra_postargs, pp_opts)
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K-[m[K[32m[K203[m[K[36m[K-[m[K    else:
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K-[m[K[32m[K204[m[K[36m[K-[m[K        for obj, (src, ext) in build.items():
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K:[m[K[32m[K205[m[K[36m[K:[m[K            self[01;31m[K._compile([m[Kobj, src, ext, cc_args, extra_postargs, pp_opts)
[35m[K/tmp/numpy/numpy/distutils/ccompiler.py[m[K[36m[K-[m[K[32m[K206[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/lib/utils.py[m[K[36m[K-[m[K[32m[K1078[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/lib/utils.py[m[K[36m[K:[m[K[32m[K1079[m[K[36m[K:[m[Kdef safe_[01;31m[Keval(source)[m[K:
[35m[K/tmp/numpy/numpy/lib/utils.py[m[K[36m[K-[m[K[32m[K1080[m[K[36m[K-[m[K    """
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/lib/format.py[m[K[36m[K-[m[K[32m[K333[m[K[36m[K-[m[K    try:
[35m[K/tmp/numpy/numpy/lib/format.py[m[K[36m[K:[m[K[32m[K334[m[K[36m[K:[m[K        d = safe_[01;31m[Keval(header)[m[K
[35m[K/tmp/numpy/numpy/lib/format.py[m[K[36m[K-[m[K[32m[K335[m[K[36m[K-[m[K    except SyntaxError as e:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/f2py_testing.py[m[K[36m[K-[m[K[32m[K13[m[K[36m[K-[m[K        if m.match(a):
[35m[K/tmp/numpy/numpy/f2py/f2py_testing.py[m[K[36m[K:[m[K[32m[K14[m[K[36m[K:[m[K            repeat = [01;31m[Keval(a)[m[K
[35m[K/tmp/numpy/numpy/f2py/f2py_testing.py[m[K[36m[K-[m[K[32m[K15[m[K[36m[K-[m[K        else:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K-[m[K[32m[K178[m[K[36m[K-[m[K        f = open('.f2py_f2cmap', 'r')
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K:[m[K[32m[K179[m[K[36m[K:[m[K        d = [01;31m[Keval(f.read()[m[K, {}, {})
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K-[m[K[32m[K180[m[K[36m[K-[m[K        f.close()
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K-[m[K[32m[K438[m[K[36m[K-[m[K                else:
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K:[m[K[32m[K439[m[K[36m[K:[m[K                    v = [01;31m[Keval(v, {}, {})[m[K
[35m[K/tmp/numpy/numpy/f2py/capi_maps.py[m[K[36m[K-[m[K[32m[K440[m[K[36m[K-[m[K                    ret['init.r'], ret['init.i']=str(v.real), str(v.imag)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1033[m[K[36m[K-[m[K            try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1034[m[K[36m[K:[m[K                v = [01;31m[Keval(initexpr, {}, params)[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1035[m[K[36m[K-[m[K            except (SyntaxError, NameError, TypeError) as msg:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1798[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1799[m[K[36m[K:[m[Kdef my[01;31m[Keval(e,g=None,l=None)[m[K:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1800[m[K[36m[K:[m[K    r = [01;31m[Keval(e, g, l)[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1801[m[K[36m[K-[m[K    if type(r) in [type(0), type(0.0)]:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1807[m[K[36m[K-[m[K    try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1808[m[K[36m[K:[m[K        c = int(my[01;31m[Keval(e, {}, {})[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1809[m[K[36m[K-[m[K        return 0, c, None
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1826[m[K[36m[K-[m[K                    m1 = re_1.match(ee)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1827[m[K[36m[K:[m[K                b = my[01;31m[Keval(ee, {}, {})[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1828[m[K[36m[K-[m[K                m1 = re_1.match(e)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1831[m[K[36m[K-[m[K                    m1 = re_1.match(ee)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1832[m[K[36m[K:[m[K                a = my[01;31m[Keval(ee, {}, {})[m[K - b
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1833[m[K[36m[K-[m[K                m1 = re_1.match(e)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1836[m[K[36m[K-[m[K                    m1 = re_1.match(ee)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1837[m[K[36m[K:[m[K                c = my[01;31m[Keval(ee, {}, {})[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1838[m[K[36m[K-[m[K                # computing another point to be sure that expression is linear
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1842[m[K[36m[K-[m[K                    m1 = re_1.match(ee)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1843[m[K[36m[K:[m[K                c2 = my[01;31m[Keval(ee, {}, {})[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1844[m[K[36m[K-[m[K                if (a*0.5+b==c and a*1.5+b==c2):
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1852[m[K[36m[K-[m[K    edl = []
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1853[m[K[36m[K:[m[K    try: edl.append(my[01;31m[Keval(dl[0], {}, {})[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1854[m[K[36m[K-[m[K    except: edl.append(dl[0])
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1855[m[K[36m[K:[m[K    try: edl.append(my[01;31m[Keval(dl[1], {}, {})[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1856[m[K[36m[K-[m[K    except: edl.append(dl[1])
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1866[m[K[36m[K-[m[K    else: d = '%s-(%s)+1'%(dl[1], dl[0])
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K1867[m[K[36m[K:[m[K    try: return repr(my[01;31m[Keval(d, {}, {})[m[K), None, None
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K1868[m[K[36m[K-[m[K    except: pass
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2074[m[K[36m[K-[m[K            try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K2075[m[K[36m[K:[m[K                params[n] = [01;31m[Keval(v, g_params, params)[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2076[m[K[36m[K-[m[K            except Exception as msg:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2100[m[K[36m[K-[m[K    try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K2101[m[K[36m[K:[m[K        value = str([01;31m[Keval(value, {}, params)[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2102[m[K[36m[K-[m[K    except (NameError, SyntaxError):
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2169[m[K[36m[K-[m[K                try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K2170[m[K[36m[K:[m[K                    l = str([01;31m[Keval(l, {}, params)[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2171[m[K[36m[K-[m[K                except:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2178[m[K[36m[K-[m[K                try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K2179[m[K[36m[K:[m[K                    l = str([01;31m[Keval(l, {}, params)[m[K)
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2180[m[K[36m[K-[m[K                except:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2764[m[K[36m[K-[m[K                try:
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K:[m[K[32m[K2765[m[K[36m[K:[m[K                    v = [01;31m[Keval(v)[m[K
[35m[K/tmp/numpy/numpy/f2py/crackfortran.py[m[K[36m[K-[m[K[32m[K2766[m[K[36m[K-[m[K                    v = '(%s,%s)' % (v.real, v.imag)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K143[m[K[36m[K-[m[K        ({ __typeof (x) __x = x; __asm ("" : "+m" (__x)); __x; })
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K:[m[K[32m[K144[m[K[36m[K:[m[K#define math_force_[01;31m[Keval(x)[m[K __asm __volatile ("" : : "m" (x))
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K145[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K219[m[K[36m[K-[m[K                u = u * u;
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K:[m[K[32m[K220[m[K[36m[K:[m[K                math_force_[01;31m[Keval (u)[m[K;        /* raise underflow flag */
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K221[m[K[36m[K-[m[K            }
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K243[m[K[36m[K-[m[K                u = u * u;
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K                math_force_[01;31m[Keval (u)[m[K;        /* raise underflow flag */
[35m[K/tmp/numpy/numpy/core/src/npymath/ieee754.c.src[m[K[36m[K-[m[K[32m[K245[m[K[36m[K-[m[K            }
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K-[m[K[32m[K219[m[K[36m[K-[m[K#            val_repr = repr(val)
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K:[m[K[32m[K220[m[K[36m[K:[m[K#            val2 = [01;31m[Keval(val_repr)[m[K
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K-[m[K[32m[K221[m[K[36m[K-[m[K#            assert_equal( val, val2 )
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K-[m[K[32m[K245[m[K[36m[K-[m[K            val_repr = repr(val)
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K:[m[K[32m[K246[m[K[36m[K:[m[K            val2 = t([01;31m[Keval(val_repr)[m[K)
[35m[K/tmp/numpy/numpy/core/tests/test_scalarmath.py[m[K[36m[K-[m[K[32m[K247[m[K[36m[K-[m[K            if not (val2 == 0 and val < 1e-100):
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/tests/test_dtype.py[m[K[36m[K-[m[K[32m[K357[m[K[36m[K-[m[K                     "'aligned':True}")
[35m[K/tmp/numpy/numpy/core/tests/test_dtype.py[m[K[36m[K:[m[K[32m[K358[m[K[36m[K:[m[K        assert_equal(np.dtype([01;31m[Keval(str(dt)[m[K)), dt)
[35m[K/tmp/numpy/numpy/core/tests/test_dtype.py[m[K[36m[K-[m[K[32m[K359[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/_internal.py[m[K[36m[K-[m[K[32m[K190[m[K[36m[K-[m[K        else:
[35m[K/tmp/numpy/numpy/core/_internal.py[m[K[36m[K:[m[K[32m[K191[m[K[36m[K:[m[K            newitem = (dtype, [01;31m[Keval(repeats)[m[K)
[35m[K/tmp/numpy/numpy/core/_internal.py[m[K[36m[K-[m[K[32m[K192[m[K[36m[K-[m[K        result.append(newitem)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/core/setup_common.py[m[K[36m[K-[m[K[32m[K165[m[K[36m[K-[m[K    # We need to use _compile because we need the object filename
[35m[K/tmp/numpy/numpy/core/setup_common.py[m[K[36m[K:[m[K[32m[K166[m[K[36m[K:[m[K    src, object = cmd[01;31m[K._compile([m[Kbody, None, None, 'c')
[35m[K/tmp/numpy/numpy/core/setup_common.py[m[K[36m[K-[m[K[32m[K167[m[K[36m[K-[m[K    try:
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K20[m[K[36m[K-[m[K    _table = _NumCharTable()
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K:[m[K[32m[K21[m[K[36m[K:[m[K    def _[01;31m[Keval(astr)[m[K:
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K22[m[K[36m[K-[m[K        str_ = astr.translate(_table)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K25[m[K[36m[K-[m[K        else:
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K:[m[K[32m[K26[m[K[36m[K:[m[K            return [01;31m[Keval(str_)[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K27[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K40[m[K[36m[K-[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K:[m[K[32m[K41[m[K[36m[K:[m[K    def _[01;31m[Keval(astr)[m[K:
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K42[m[K[36m[K-[m[K        str_ = astr.translate(_table, _todelete)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K45[m[K[36m[K-[m[K        else:
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K:[m[K[32m[K46[m[K[36m[K:[m[K            return [01;31m[Keval(str_)[m[K
[35m[K/tmp/numpy/numpy/matrixlib/defmatrix.py[m[K[36m[K-[m[K[32m[K47[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/numpy/doc/numpybook/runcode.py[m[K[36m[K-[m[K[32m[K33[m[K[36m[K-[m[K    try:
[35m[K/tmp/numpy/doc/numpybook/runcode.py[m[K[36m[K:[m[K[32m[K34[m[K[36m[K:[m[K        res = [01;31m[Keval(tstr, dic)[m[K
[35m[K/tmp/numpy/doc/numpybook/runcode.py[m[K[36m[K-[m[K[32m[K35[m[K[36m[K-[m[K        sys.stdout = sys.__stdout__
[36m[K##############################################[m[K
[35m[K/tmp/numpy/doc/source/reference/swig.interface-file.rst[m[K[36m[K-[m[K[32m[K960[m[K[36m[K-[m[Kabove for ``my_dot`` to get the behavior we want (note that
[35m[K/tmp/numpy/doc/source/reference/swig.interface-file.rst[m[K[36m[K:[m[K[32m[K961[m[K[36m[K:[m[K`[01;31m[K`$action`[m[K` is a macro that gets expanded to a valid call to
[35m[K/tmp/numpy/doc/source/reference/swig.interface-file.rst[m[K[36m[K-[m[K[32m[K962[m[K[36m[K-[m[K``my_dot``).  In general, you will probably want to write a `SWIG`_
[36m[K##############################################[m[K
[35m[K/tmp/numpy/doc/f2py/ex1/runme[m[K[36m[K-[m[K[32m[K3[m[K[36m[K-[m[Kf2py2e='python ../../f2py2e.py'
[35m[K/tmp/numpy/doc/f2py/ex1/runme[m[K[36m[K:[m[K[32m[K4[m[K[36m[K:[m[KPYINC=[01;31m[K`$f2py2e -pyinc`[m[K
[35m[K/tmp/numpy/doc/f2py/ex1/runme[m[K[36m[K-[m[K[32m[K5[m[K[36m[K-[m[K$f2py2e foobar-smart.pyf --short-latex --overwrite-makefile -makefile foo.f bar.f
[36m[K##############################################[m[K
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K-[m[K[32m[K41[m[K[36m[K-[m[K	$(COLLECTINPUT) < $(MAINLATEX).tex > tmp_$(MAINLATEX).tex
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K:[m[K[32m[K42[m[K[36m[K:[m[K	@test [01;31m[K`which $(TTH)`[m[K && cat tmp_$(MAINLATEX).tex | $(TTHFILTER) > $(TOP).html\
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K-[m[K[32m[K43[m[K[36m[K-[m[K	 || echo -e $(TTHMISSING)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K-[m[K[32m[K57[m[K[36m[K-[m[K	$(LATEX) fortranobject.tex
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K:[m[K[32m[K58[m[K[36m[K:[m[K	@test [01;31m[K`which $(TTH)`[m[K && cat fortranobject.tex | $(TTHFILTER3) > pyfobj.html\
[35m[K/tmp/numpy/doc/f2py/Makefile[m[K[36m[K-[m[K[32m[K59[m[K[36m[K-[m[K	 || echo -e $(TTHMISSING)
[36m[K##############################################[m[K
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K-[m[K[32m[K4[m[K[36m[K-[m[Kfor key in printf fprintf sprintf vprintf vfprintf vsprintf; do
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K:[m[K[32m[K5[m[K[36m[K:[m[K	  src=[01;31m[K`nm libmsvcr90.a | sed -n -e '/:$/h;/^[0-7][0-7]*  *T  */{s///;H;g;s/\n//p' -e '}' | sed -n 's/:_'"$key"'$//p'`[m[K;
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K-[m[K[32m[K6[m[K[36m[K-[m[K	  if test -n "$src"; then
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K:[m[K[32m[K7[m[K[36m[K:[m[K	    dst=[01;31m[K`echo "$src" | sed 's/0/4/'`[m[K; repl="$repl $dst";
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K-[m[K[32m[K8[m[K[36m[K-[m[K	    tmpfiles="$tmpfiles $src $dst";
[36m[K##############################################[m[K
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K-[m[K[32m[K14[m[K[36m[K-[m[Kdone;
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K:[m[K[32m[K15[m[K[36m[K:[m[Ktest [01;31m[K`key=_get_output_format; nm libmsvcr90.a | sed -n -e '/:$/h;/^[0-7][0-7]*  *T  */{s///;H;g;s/\n//p' -e '}' | sed -n 's/:_'"$key"'$//p'`[m[K || repl="$repl ofmt_stub.o"; 
[35m[K/tmp/numpy/tools/win32build/misc/msvcrt90/yop.sh[m[K[36m[K-[m[K[32m[K16[m[K[36m[K-[m[Ktest -n "$repl" && ar rcs libmsvcr90.a $repl;
