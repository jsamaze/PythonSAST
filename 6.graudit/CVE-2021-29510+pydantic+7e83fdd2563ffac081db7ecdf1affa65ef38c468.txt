===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K104[m[K[36m[K-[m[K    :param description: description for the generated schema
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K    :param ref_prefix: the JSON Pointer prefix for schema references with `[01;31m[K`$ref`[m[K`, if None, will be set to the
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K106[m[K[36m[K-[m[K      default of ``#/definitions/``. Update it if you want the schemas to reference the definitions somewhere
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K109[m[K[36m[K-[m[K      prefix.
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K110[m[K[36m[K:[m[K    :param ref_template: Use a ``string.format()`` template for `[01;31m[K`$ref`[m[K` instead of a prefix. This can be useful
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K111[m[K[36m[K-[m[K      for references that cannot be represented by ``ref_prefix`` such as a definition stored in another file. For
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K112[m[K[36m[K:[m[K      a sibling json file in a ``/schemas`` directory use `[01;31m[K`"/schemas/${model}.json#"`[m[K`.
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K113[m[K[36m[K-[m[K    :return: dict with the JSON Schema with a ``definitions`` top-level key including the schema definitions for
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K152[m[K[36m[K-[m[K    :param by_alias: generate the schemas using the aliases defined, if any
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K    :param ref_prefix: the JSON Pointer prefix for schema references with `[01;31m[K`$ref`[m[K`, if None, will be set to the
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K154[m[K[36m[K-[m[K      default of ``#/definitions/``. Update it if you want the schemas to reference the definitions somewhere
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K157[m[K[36m[K-[m[K      prefix.
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K158[m[K[36m[K:[m[K    :param ref_template: Use a ``string.format()`` template for `[01;31m[K`$ref`[m[K` instead of a prefix. This can be useful for
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K159[m[K[36m[K-[m[K      references that cannot be represented by ``ref_prefix`` such as a definition stored in another file. For a
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K160[m[K[36m[K:[m[K      sibling json file in a ``/schemas`` directory use `[01;31m[K`"/schemas/${model}.json#"`[m[K`.
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K161[m[K[36m[K-[m[K    :return: dict with the JSON Schema for the passed ``model``
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K227[m[K[36m[K-[m[K      #/definitions/ will be used
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K228[m[K[36m[K:[m[K    :param ref_template: Use a ``string.format()`` template for `[01;31m[K`$ref`[m[K` instead of a prefix. This can be useful for
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K229[m[K[36m[K-[m[K      references that cannot be represented by ``ref_prefix`` such as a definition stored in another file. For a
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K:[m[K[32m[K230[m[K[36m[K:[m[K      sibling json file in a ``/schemas`` directory use `[01;31m[K`"/schemas/${model}.json#"`[m[K`.
[35m[K/tmp/pydantic/pydantic/schema.py[m[K[36m[K-[m[K[32m[K231[m[K[36m[K-[m[K    :param known_models: used to solve circular references
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/docs/examples/validation_decorator_async.py[m[K[36m[K-[m[K[32m[K14[m[K[36m[K-[m[K    # `conn` is some fictional connection to a database
[35m[K/tmp/pydantic/docs/examples/validation_decorator_async.py[m[K[36m[K:[m[K[32m[K15[m[K[36m[K:[m[K    email = await conn.execute('select email from users [01;31m[Kwhere id=$1',[m[K user_id)
[35m[K/tmp/pydantic/docs/examples/validation_decorator_async.py[m[K[36m[K-[m[K[32m[K16[m[K[36m[K-[m[K    if email is None:
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K-[m[K[32m[K35[m[K[36m[K-[m[K
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K:[m[K[32m[K36[m[K[36m[K:[m[KThe format of [01;31m[K`$ref`[m[Ks (`"#/definitions/FooBar"` above) can be altered by calling `schema()` or `schema_json()`
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K-[m[K[32m[K37[m[K[36m[K-[m[Kwith the `ref_template` keyword argument, e.g. `ApplePie.schema(ref_template='/schemas/{model}.json#/')`, here `{model}`
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K-[m[K[32m[K165[m[K[36m[K-[m[K
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K:[m[K[32m[K166[m[K[36m[K:[m[KYou can customize the generated [01;31m[K`$ref`[m[K JSON location: the definitions are always stored under the key
[35m[K/tmp/pydantic/docs/usage/schema.md[m[K[36m[K-[m[K[32m[K167[m[K[36m[K-[m[K`definitions`, but a specified prefix can be used for the references.
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K-[m[K[32m[K189[m[K[36m[K-[m[K  `env` in their `Config`. Previously only `env_prefix` configuration option was applicable, #1561 by @ojomio
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K:[m[K[32m[K190[m[K[36m[K:[m[K* Support `ref_template` when creating schema [01;31m[K`$ref`[m[Ks, #1479 by @kilo59
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K-[m[K[32m[K191[m[K[36m[K-[m[K* Add a `__call__` stub to `PyObject` so that mypy will know that it is callable, #1352 by @brianmaissy
[36m[K##############################################[m[K
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K-[m[K[32m[K241[m[K[36m[K-[m[K* Updates OpenAPI schema generation to output all enums as separate models.
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K:[m[K[32m[K242[m[K[36m[K:[m[K  Instead of inlining the enum values in the model schema, models now use a [01;31m[K`$ref`[m[K
[35m[K/tmp/pydantic/HISTORY.md[m[K[36m[K-[m[K[32m[K243[m[K[36m[K-[m[K  property to point to the enum definition, #1173 by @calvinwyoung
