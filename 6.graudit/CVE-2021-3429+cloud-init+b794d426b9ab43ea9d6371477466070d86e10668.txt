===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5236[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5237[m[K[36m[K:[m[K    def _se_get_ib_interface_hw[01;31m[Kaddr([m[Kself, name, ethernet_format):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5238[m[K[36m[K-[m[K        ib_hwaddr = self.data.get('ib_hwaddr', {})
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5407[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5408[m[K[36m[K:[m[K    def _se_get_ib_interface_hw[01;31m[Kaddr([m[Kself, name, ethernet_format):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5409[m[K[36m[K-[m[K        ib_hwaddr = self.data.get('ib_hwaddr', {})
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5659[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5660[m[K[36m[K:[m[K    def test_bcast_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5661[m[K[36m[K-[m[K        """Test mask_and_ipv4_to_bcast_addr proper execution."""
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5663[m[K[36m[K-[m[K        self.assertEqual("192.168.1.255",
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5664[m[K[36m[K:[m[K                         bcast_[01;31m[Kaddr([m[K"255.255.255.0", "192.168.1.1"))
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5665[m[K[36m[K-[m[K        self.assertEqual("128.42.7.255",
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5666[m[K[36m[K:[m[K                         bcast_[01;31m[Kaddr([m[K"255.255.248.0", "128.42.5.4"))
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5667[m[K[36m[K-[m[K        self.assertEqual("10.1.21.255",
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K5668[m[K[36m[K:[m[K                         bcast_[01;31m[Kaddr([m[K"255.255.255.0", "10.1.21.4"))
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K5669[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K-[m[K[32m[K104[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K:[m[K[32m[K105[m[K[36m[K:[m[K     `[01;31m[K`command:  ["sh", "-c", "killall dhclient; dhclient $interface"]`[m[K`
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K-[m[K[32m[K106[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K-[m[K[32m[K199[m[K[36m[K-[m[Kcloud-init handles this by setting the hostname in the DataSource's 'get_data'
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K:[m[K[32m[K200[m[K[36m[K:[m[Kmethod via '`[01;31m[K`hostname $HostName`[m[K`', and then bouncing the interface.  This
[35m[K/tmp/cloud-init/doc/rtd/topics/datasources/azure.rst[m[K[36m[K-[m[K[32m[K201[m[K[36m[K-[m[Kbehavior can be configured or disabled in the datasource config.  See
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/doc/rtd/topics/cloud_tests.rst[m[K[36m[K-[m[K[32m[K274[m[K[36m[K-[m[K* ``/run/cloud-init/status.json``
[35m[K/tmp/cloud-init/doc/rtd/topics/cloud_tests.rst[m[K[36m[K:[m[K[32m[K275[m[K[36m[K:[m[K* ``[01;31m[K`dpkg-query -W -f='${Version}' cloud-init`[m[K``
[35m[K/tmp/cloud-init/doc/rtd/topics/cloud_tests.rst[m[K[36m[K-[m[K[32m[K276[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K-[m[K[32m[K545[m[K[36m[K-[m[K                    iface_cfg['DEFROUTE'] = True
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K:[m[K[32m[K546[m[K[36m[K:[m[K                    if is_ipv6_[01;31m[Kaddr([m[Ksubnet['gateway']):
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K-[m[K[32m[K547[m[K[36m[K-[m[K                        iface_cfg['IPV6_DEFAULTGW'] = subnet['gateway']
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K-[m[K[32m[K572[m[K[36m[K-[m[K            for route in subnet.get('routes', []):
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K:[m[K[32m[K573[m[K[36m[K:[m[K                is_ipv6 = subnet.get('ipv6') or is_ipv6_[01;31m[Kaddr([m[Kroute['gateway'])
[35m[K/tmp/cloud-init/cloudinit/net/sysconfig.py[m[K[36m[K-[m[K[32m[K574[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K364[m[K[36m[K-[m[K                if (subnet.get('type').endswith('6') or
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K                        is_ipv6_[01;31m[Kaddr([m[Ksubnet.get('address'))):
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K366[m[K[36m[K-[m[K                    self.use_ipv6 = True
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K866[m[K[36m[K-[m[K    addr = net.get(addr_key)
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K867[m[K[36m[K:[m[K    ipv6 = is_ipv6_[01;31m[Kaddr([m[Kaddr)
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K868[m[K[36m[K-[m[K    netmask = net.get('netmask')
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K936[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K937[m[K[36m[K:[m[Kdef is_ipv6_[01;31m[Kaddr([m[Kaddress):
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K938[m[K[36m[K-[m[K    if not address:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K949[m[K[36m[K-[m[K        return True
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K950[m[K[36m[K:[m[K    elif subnet['type'] == 'static' and is_ipv6_[01;31m[Kaddr([m[Ksubnet.get('address')):
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K951[m[K[36m[K-[m[K        return True
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K1036[m[K[36m[K-[m[K        pass
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K1037[m[K[36m[K:[m[K    if is_ipv6_[01;31m[Kaddr([m[Kmask):
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K1038[m[K[36m[K-[m[K        return ipv6_mask_to_net_prefix(mask)
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K1042[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K:[m[K[32m[K1043[m[K[36m[K:[m[Kdef mask_and_ipv4_to_bcast_[01;31m[Kaddr([m[Kmask, ip):
[35m[K/tmp/cloud-init/cloudinit/net/network_state.py[m[K[36m[K-[m[K[32m[K1044[m[K[36m[K-[m[K    """Calculate the broadcast address from the subnet mask and ip addr.
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K803[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K804[m[K[36m[K:[m[Kdef get_ib_interface_hw[01;31m[Kaddr([m[Kifname, ethernet_format):
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K805[m[K[36m[K-[m[K    """Returns the string value of an Infiniband interface's hardware
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K904[m[K[36m[K-[m[K        # for the interface.
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K905[m[K[36m[K:[m[K        ib_mac = get_ib_interface_hw[01;31m[Kaddr([m[Kname, True)
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K906[m[K[36m[K-[m[K        if ib_mac:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K961[m[K[36m[K-[m[K    for name, _, _, _ in get_interfaces():
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K962[m[K[36m[K:[m[K        ib_mac = get_ib_interface_hw[01;31m[Kaddr([m[Kname, False)
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K963[m[K[36m[K-[m[K        if ib_mac:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K-[m[K[32m[K617[m[K[36m[K-[m[K                if resolve_ip:
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K:[m[K[32m[K618[m[K[36m[K:[m[K                    toks = util.gethostby[01;31m[Kaddr([m[Klhost)
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K-[m[K[32m[K619[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K62[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K    def get_ib_interface_hw[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K64[m[K[36m[K-[m[K        self, devname: DeviceName, ethernet_format: bool
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K65[m[K[36m[K-[m[K    ):
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K:[m[K[32m[K66[m[K[36m[K:[m[K        return net.get_ib_interface_hw[01;31m[Kaddr([m[Kdevname, ethernet_format)
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K67[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K-[m[K[32m[K152[m[K[36m[K-[m[K                        iface_info['broadcast'] = (
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K:[m[K[32m[K153[m[K[36m[K:[m[K                            mask_and_ipv4_to_bcast_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K-[m[K[32m[K154[m[K[36m[K-[m[K                                iface_info['netmask'], addr))
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K-[m[K[32m[K20[m[K[36m[K-[m[Kusing the template located in ``/etc/cloud/templates/hosts.tmpl``. In the
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K:[m[K[32m[K21[m[K[36m[K:[m[K``/etc/cloud/templates/hosts.tmpl`` template, the strings `[01;31m[K`$hostname`[m[K` and
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K:[m[K[32m[K22[m[K[36m[K:[m[K`[01;31m[K`$fqdn`[m[K` will be replaced with the hostname and fqdn respectively.
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K-[m[K[32m[K23[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_ssh.py[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[Klogin options can be manually specified with ``disable_root_opts``. If
[35m[K/tmp/cloud-init/cloudinit/config/cc_ssh.py[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[K``disable_root_opts`` is specified and contains the string `[01;31m[K`$USER`[m[K`,
[35m[K/tmp/cloud-init/cloudinit/config/cc_ssh.py[m[K[36m[K-[m[K[32m[K33[m[K[36m[K-[m[Kit will be replaced with the username of the default user. By default,
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K-[m[K[32m[K14[m[K[36m[K-[m[KThis module can be used to post data to a remote host after boot is complete.
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K:[m[K[32m[K15[m[K[36m[K:[m[KIf the post url contains the string `[01;31m[K`$INSTANCE_ID`[m[K` it will be replaced with
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K-[m[K[32m[K16[m[K[36m[K-[m[Kthe id of the current instance. Either all data can be posted or a list of
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K174[m[K[36m[K-[m[K                        ``disable_suites``, which takes a list of suites
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K175[m[K[36m[K:[m[K                        to be disabled. If the string `[01;31m[K`$RELEASE`[m[K` is
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K176[m[K[36m[K-[m[K                        present in a suite in the ``disable_suites`` list,
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K182[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K183[m[K[36m[K:[m[K                            - ``updates`` => `[01;31m[K`$RELEASE-updates`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[K                            - ``backports`` => `[01;31m[K`$RELEASE-backports`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K185[m[K[36m[K:[m[K                            - ``security`` => `[01;31m[K`$RELEASE-security`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[K                            - ``proposed`` => `[01;31m[K`$RELEASE-proposed`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K187[m[K[36m[K:[m[K                            - ``release`` => `[01;31m[K`$RELEASE`[m[K`.
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K188[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K293[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K294[m[K[36m[K:[m[K                            - `[01;31m[K`$MIRROR`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K295[m[K[36m[K:[m[K                            - `[01;31m[K`$RELEASE`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K296[m[K[36m[K:[m[K                            - `[01;31m[K`$PRIMARY`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K297[m[K[36m[K:[m[K                            - `[01;31m[K`$SECURITY`[m[K`""")
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K298[m[K[36m[K-[m[K                },
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K362[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K363[m[K[36m[K:[m[K                            - `[01;31m[K`$MIRROR`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K364[m[K[36m[K:[m[K                            - `[01;31m[K`$PRIMARY`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K365[m[K[36m[K:[m[K                            - `[01;31m[K`$SECURITY`[m[K`
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K:[m[K[32m[K366[m[K[36m[K:[m[K                            - `[01;31m[K`$RELEASE`[m[K`""")
[35m[K/tmp/cloud-init/cloudinit/config/cc_apt_configure.py[m[K[36m[K-[m[K[32m[K367[m[K[36m[K-[m[K                }
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_set_passwords.py[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[Klike ``mkpasswd``, can be specified; a regex
[35m[K/tmp/cloud-init/cloudinit/config/cc_set_passwords.py[m[K[36m[K:[m[K[32m[K32[m[K[36m[K:[m[K(`[01;31m[K`r'\\$(1|2a|2y|5|6)(\\$.+){2}'`[m[K`) is used to determine if a password value
[35m[K/tmp/cloud-init/cloudinit/config/cc_set_passwords.py[m[K[36m[K-[m[K[32m[K33[m[K[36m[K-[m[Kshould be treated as a hash.
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1058[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K1059[m[K[36m[K:[m[Kdef gethostby[01;31m[Kaddr([m[Kip):
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1060[m[K[36m[K-[m[K    try:
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K1061[m[K[36m[K:[m[K        return socket.gethostby[01;31m[Kaddr([m[Kip)[0]
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1062[m[K[36m[K-[m[K    except socket.herror:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1742[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K1743[m[K[36m[K:[m[K    class tim[01;31m[Keval(ctypes.Structure)[m[K:
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1744[m[K[36m[K-[m[K        _fields_ = [
