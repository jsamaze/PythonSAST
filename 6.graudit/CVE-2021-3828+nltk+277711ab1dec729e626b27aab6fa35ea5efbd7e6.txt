===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/nltk/jenkins.sh[m[K[36m[K-[m[K[32m[K2[m[K[36m[K-[m[K
[35m[K/tmp/nltk/jenkins.sh[m[K[36m[K:[m[K[32m[K3[m[K[36m[K:[m[Kcd [01;31m[K`dirname $0`[m[K
[35m[K/tmp/nltk/jenkins.sh[m[K[36m[K-[m[K[32m[K4[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/tag/sequential.py[m[K[36m[K-[m[K[32m[K313[m[K[36m[K-[m[K
[35m[K/tmp/nltk/nltk/tag/sequential.py[m[K[36m[K:[m[K[32m[K314[m[K[36m[K:[m[K        _context_to_tag = {ast.literal_[01;31m[Keval(k)[m[K: v for k, v in _context_to_tag.items()}
[35m[K/tmp/nltk/nltk/tag/sequential.py[m[K[36m[K-[m[K[32m[K315[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1301[m[K[36m[K-[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K:[m[K[32m[K1302[m[K[36m[K:[m[Kdef demo_[01;31m[Keval(chunkparser, text)[m[K:
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1303[m[K[36m[K-[m[K    """
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1391[m[K[36m[K-[m[K    cp = chunk.RegexpParser(grammar)
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K:[m[K[32m[K1392[m[K[36m[K:[m[K    demo_[01;31m[Keval(cp, text)[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1393[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1400[m[K[36m[K-[m[K    cp = chunk.RegexpParser(grammar)
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K:[m[K[32m[K1401[m[K[36m[K:[m[K    demo_[01;31m[Keval(cp, text)[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1402[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1407[m[K[36m[K-[m[K    cp = chunk.RegexpParser(grammar)
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K:[m[K[32m[K1408[m[K[36m[K:[m[K    demo_[01;31m[Keval(cp, text)[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1409[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1417[m[K[36m[K-[m[K    cp = chunk.RegexpParser(grammar)
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K:[m[K[32m[K1418[m[K[36m[K:[m[K    demo_[01;31m[Keval(cp, text)[m[K
[35m[K/tmp/nltk/nltk/chunk/regexp.py[m[K[36m[K-[m[K[32m[K1419[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K-[m[K[32m[K135[m[K[36m[K-[m[K    src = "lambda %(signature)s: _wrapper_(%(signature)s)" % infodict
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K:[m[K[32m[K136[m[K[36m[K:[m[K    funcopy = [01;31m[Keval(src, dict(_wrapper_=wrapper)[m[K)
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K-[m[K[32m[K137[m[K[36m[K-[m[K    return update_wrapper(funcopy, model, infodict)
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K-[m[K[32m[K203[m[K[36m[K-[m[K        # import sys; print >> sys.stderr, src # for debugging purposes
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[K        dec_func = [01;31m[Keval(src, dict(_func_=func, _call_=caller)[m[K)
[35m[K/tmp/nltk/nltk/decorators.py[m[K[36m[K-[m[K[32m[K205[m[K[36m[K-[m[K        return update_wrapper(dec_func, func, infodict)
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/internals.py[m[K[36m[K-[m[K[32m[K242[m[K[36m[K-[m[K    try:
[35m[K/tmp/nltk/nltk/internals.py[m[K[36m[K:[m[K[32m[K243[m[K[36m[K:[m[K        return [01;31m[Keval(s[start_position : match.end()[m[K]), match.end()
[35m[K/tmp/nltk/nltk/internals.py[m[K[36m[K-[m[K[32m[K244[m[K[36m[K-[m[K    except ValueError as e:
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/parse/evaluate.py[m[K[36m[K-[m[K[32m[K87[m[K[36m[K-[m[K
[35m[K/tmp/nltk/nltk/parse/evaluate.py[m[K[36m[K:[m[K[32m[K88[m[K[36m[K:[m[K    def [01;31m[Keval(self)[m[K:
[35m[K/tmp/nltk/nltk/parse/evaluate.py[m[K[36m[K-[m[K[32m[K89[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/nltk/nltk/test/parse.doctest[m[K[36m[K-[m[K[32m[K67[m[K[36m[K-[m[K    >>> proc = subprocess.run([sys.executable, '-c', cmd], stdout=subprocess.PIPE)
[35m[K/tmp/nltk/nltk/test/parse.doctest[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K    >>> p1 = pickle.loads([01;31m[Keval(proc.stdout)[m[K)
[35m[K/tmp/nltk/nltk/test/parse.doctest[m[K[36m[K-[m[K[32m[K69[m[K[36m[K-[m[K    >>> p2 = Production('S', ['NP', 'VP'])
