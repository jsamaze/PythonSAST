===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/ParlAI/tests/test_teachers.py[m[K[36m[K-[m[K[32m[K381[m[K[36m[K-[m[Kclass TestCustomEvaluation(unittest.TestCase):
[35m[K/tmp/ParlAI/tests/test_teachers.py[m[K[36m[K:[m[K[32m[K382[m[K[36m[K:[m[K    def test_custom_[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/tests/test_teachers.py[m[K[36m[K-[m[K[32m[K383[m[K[36m[K-[m[K        opt = {'task': 'custom', 'datatype': 'valid'}
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/tests/nightly/gpu/test_wizard.py[m[K[36m[K-[m[K[32m[K62[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/tests/nightly/gpu/test_wizard.py[m[K[36m[K:[m[K[32m[K63[m[K[36m[K:[m[K    def test_retri[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/tests/nightly/gpu/test_wizard.py[m[K[36m[K-[m[K[32m[K64[m[K[36m[K-[m[K        _, test = testing_utils.eval_model(RETRIEVAL_OPTIONS, skip_valid=True)
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/tests/test_distributed.py[m[K[36m[K-[m[K[32m[K210[m[K[36m[K-[m[Kclass TestDistributedEval(unittest.TestCase):
[35m[K/tmp/ParlAI/tests/test_distributed.py[m[K[36m[K:[m[K[32m[K211[m[K[36m[K:[m[K    def test_mp_[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/tests/test_distributed.py[m[K[36m[K-[m[K[32m[K212[m[K[36m[K-[m[K        args = dict(
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/tests/test_train_model.py[m[K[36m[K-[m[K[32m[K17[m[K[36m[K-[m[Kclass TestTrainModel(unittest.TestCase):
[35m[K/tmp/ParlAI/tests/test_train_model.py[m[K[36m[K:[m[K[32m[K18[m[K[36m[K:[m[K    def test_fast_final_[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/tests/test_train_model.py[m[K[36m[K-[m[K[32m[K19[m[K[36m[K-[m[K        valid, test = testing_utils.train_model(
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/autoformat.sh[m[K[36m[K-[m[K[32m[K179[m[K[36m[K-[m[K    else
[35m[K/tmp/ParlAI/autoformat.sh[m[K[36m[K:[m[K[32m[K180[m[K[36m[K:[m[K        echo "Don't know how to \[01;31m[K`$CMD\`[m[K."
[35m[K/tmp/ParlAI/autoformat.sh[m[K[36m[K-[m[K[32m[K181[m[K[36m[K-[m[K        exit 1
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/tasks/image_chat/README.md[m[K[36m[K-[m[K[32m[K8[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/tasks/image_chat/README.md[m[K[36m[K:[m[K[32m[K9[m[K[36m[K:[m[KIf you just want to download data, run as `./parlai/tasks/image_chat/download_data.sh`. Change the required [01;31m[K`$DATA_DIR`[m[K variable to where you want to save the file. Defaults to `/tmp`. It basically calls the wrapper `parlai/tasks/image_chat/download_data.py`  
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K-[m[K[32m[K302[m[K[36m[K-[m[K                topic = match.group(1)
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K:[m[K[32m[K303[m[K[36m[K:[m[K                persona_strings = [01;31m[Keval(match.group(2)[m[K)
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K-[m[K[32m[K304[m[K[36m[K-[m[K                assert isinstance(persona_strings, list)
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K-[m[K[32m[K699[m[K[36m[K-[m[K                    continue
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K:[m[K[32m[K700[m[K[36m[K:[m[K                persona_strings = [01;31m[Keval(match.group(2)[m[K)
[35m[K/tmp/ParlAI/parlai/tasks/blended_skill_talk/agents.py[m[K[36m[K-[m[K[32m[K701[m[K[36m[K-[m[K                assert isinstance(persona_strings, list)
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/tasks/amazon_qa/build.py[m[K[36m[K-[m[K[32m[K243[m[K[36m[K-[m[K    for l in g:
[35m[K/tmp/ParlAI/parlai/tasks/amazon_qa/build.py[m[K[36m[K:[m[K[32m[K244[m[K[36m[K:[m[K        yield json.dumps([01;31m[Keval(l)[m[K)
[35m[K/tmp/ParlAI/parlai/tasks/amazon_qa/build.py[m[K[36m[K-[m[K[32m[K245[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K49[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K:[m[K[32m[K50[m[K[36m[K:[m[Kdef launch_and_[01;31m[Keval(opt, port)[m[K:
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K51[m[K[36m[K-[m[K    """
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K64[m[K[36m[K-[m[K    try:
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K:[m[K[32m[K65[m[K[36m[K:[m[K        retval = multiprocess_[01;31m[Keval(0, opt, port)[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K66[m[K[36m[K-[m[K        spawncontext.join()
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K90[m[K[36m[K-[m[K        port = random.randint(32000, 48000)
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K:[m[K[32m[K91[m[K[36m[K:[m[K        return launch_and_[01;31m[Keval(self.opt, port)[m[K
[35m[K/tmp/ParlAI/parlai/scripts/multiprocessing_eval.py[m[K[36m[K-[m[K[32m[K92[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K523[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K:[m[K[32m[K524[m[K[36m[K:[m[K    def _run_single_[01;31m[Keval(self, opt, valid_world, max_exs)[m[K:
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K525[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K543[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K:[m[K[32m[K544[m[K[36m[K:[m[K    def _run_[01;31m[Keval(self, valid_worlds, opt, datatype, max_exs=-1, write_log=False)[m[K:
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K545[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K565[m[K[36m[K-[m[K        for v_world in valid_worlds:
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K:[m[K[32m[K566[m[K[36m[K:[m[K            task_report = self._run_single_[01;31m[Keval(opt, v_world, max_exs_per_worker)[m[K
[35m[K/tmp/ParlAI/parlai/scripts/train_model.py[m[K[36m[K-[m[K[32m[K567[m[K[36m[K-[m[K            reports.append(task_report)
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K36[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[KThis task code assumes that you've parsed and saved your collected dialogues in a simple .jsonl format. The path to this file should be passed in as [01;31m[K`mephisto.blueprint.pairings_filepath=${PATH_TO_FILE}`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K38[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K183[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K184[m[K[36m[K:[m[KIf you are running self-chat, you can optionally specify a seed task to use for self-chat with [01;31m[K`mephisto.blueprint.task=${SELF_CHAT_TASK}`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K185[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K186[m[K[36m[K:[m[KWhen you are ready to run a **live** ACUTE-Eval, add [01;31m[K`mephisto.provider.requester_name=${REQUESTER_NAME} mephisto/architect=heroku`[m[K to this command, where [01;31m[K`${REQUESTER_NAME}`[m[K is the MTurk requester name that you specified when setting up Mephisto.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K187[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K203[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K204[m[K[36m[K:[m[KSelf-chats are saved to [01;31m[K`${ROOT_SAVE_DIR}/self_chats/`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K205[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K207[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K208[m[K[36m[K:[m[KThe script will then prepare each conversation-pairs file and save it in [01;31m[K`${ROOT_SAVE_DIR}/pairings_files/`[m[K, with a unique string according to which two self-chat files were used to create it. It will then run ACUTE-Eval with appropriate arguments.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K209[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K-[m[K[32m[K213[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/README.md[m[K[36m[K:[m[K[32m[K214[m[K[36m[K:[m[KAfter finishing ACUTE-Eval, the script will analyze and save relevant results to [01;31m[K`${ROOT_SAVE_DIR}/acute_results/<date>/<pairings_file>/`[m[K.
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K-[m[K[32m[K464[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K:[m[K[32m[K465[m[K[36m[K:[m[K    def run_acute_[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K-[m[K[32m[K466[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K-[m[K[32m[K477[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K:[m[K[32m[K478[m[K[36m[K:[m[K    def set_up_acute_[01;31m[Keval(self)[m[K:
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/acute_eval/fast_eval.py[m[K[36m[K-[m[K[32m[K479[m[K[36m[K-[m[K        self._load_pairings_file()
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/README.md[m[K[36m[K-[m[K[32m[K11[m[K[36m[K-[m[K    
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/README.md[m[K[36m[K:[m[K[32m[K12[m[K[36m[K:[m[KFor both variants of the blueprint, it is required to pass in your own file of conversations with [01;31m[K`mephisto.blueprint.data_jsonl=${PATH_TO_CONVERSATIONS}`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/README.md[m[K[36m[K-[m[K[32m[K13[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/task_components.jsx[m[K[36m[K-[m[K[32m[K234[m[K[36m[K-[m[K    <div>
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/task_components.jsx[m[K[36m[K:[m[K[32m[K235[m[K[36m[K:[m[K      <div className={[01;31m[K`alert ${agentIdx == 0 ? "alert-info" : "alert-warning"}`[m[K} style={{ float: [01;31m[K`${agentIdx == 0 ? "right" : "left"}`[m[K, display: 'table', minWidth: [01;31m[K`${agentIdx == 0 ? "30%" : "80%"}`[m[K, marginTop: "auto" }}>
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/task_components.jsx[m[K[36m[K-[m[K[32m[K236[m[K[36m[K-[m[K        <span><b>{turnIdx % 2 == 0 ? 'YOU' : 'THEM'}:</b> {text}
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/onboarding_components.jsx[m[K[36m[K-[m[K[32m[K91[m[K[36m[K-[m[K    return (
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/onboarding_components.jsx[m[K[36m[K:[m[K[32m[K92[m[K[36m[K:[m[K        <div className={[01;31m[K`alert ${turnIdx % 2 == 0 ? "alert-info" : "alert-warning"}`[m[K} style={{ float: [01;31m[K`${turnIdx % 2 == 0 ? "right" : "left"}`[m[K, display: 'table' }}>
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/turn_annotations_static/webapp/src/components/onboarding_components.jsx[m[K[36m[K-[m[K[32m[K93[m[K[36m[K-[m[K            <span className="onboarding-text"><b>{turnIdx % 2 == 0 ? 'YOU' : 'THEM'}:</b> {text}
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/chat_demo/README.md[m[K[36m[K-[m[K[32m[K4[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/chat_demo/README.md[m[K[36m[K:[m[K[32m[K5[m[K[36m[K:[m[KSince this task is imported from the Mephisto repo, `run.py` will look in [01;31m[K`${MEPHISTO_REPO}/examples/parlai_chat_task_demo/conf/`[m[K for YAML configuration files by default. See [here](https://github.com/facebookresearch/ParlAI/tree/master/parlai/crowdsourcing/tasks#specifying-your-own-yaml-file) for how to specify a custom folder for configuration files.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/chat_demo/README.md[m[K[36m[K-[m[K[32m[K6[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/model_chat/frontend/components/onboarding_components.jsx[m[K[36m[K-[m[K[32m[K109[m[K[36m[K-[m[K    return (
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/model_chat/frontend/components/onboarding_components.jsx[m[K[36m[K:[m[K[32m[K110[m[K[36m[K:[m[K        <div className={[01;31m[K`alert ${turnIdx % 2 == 0 ? "alert-info" : "alert-warning"}`[m[K} style={{ float: [01;31m[K`${turnIdx % 2 == 0 ? "right" : "left"}`[m[K, display: 'table' }}>
[35m[K/tmp/ParlAI/parlai/crowdsourcing/tasks/model_chat/frontend/components/onboarding_components.jsx[m[K[36m[K-[m[K[32m[K111[m[K[36m[K-[m[K            <span className="onboarding-text"><b>{turnIdx % 2 == 0 ? 'YOU' : 'THEM'}:</b> {text}
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K12[m[K[36m[K-[m[K 
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K:[m[K[32m[K13[m[K[36m[K:[m[K The easiest way to specify a different YAML file is to create a new file, say, `my_params.yaml`, in the `conf/` subfolder of the task. Then, you can launch HITs with [01;31m[K`python ${TASK_FOLDER}/run.py conf=my_params`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K14[m[K[36m[K-[m[K 
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K:[m[K[32m[K15[m[K[36m[K:[m[K You also can specify a path to a YAML file existing *outside* of [01;31m[K`${TASK_FOLDER}`[m[K: you will need to have your YAML file stored at a location [01;31m[K`${CUSTOM_FOLDER}/conf/my_params.yaml`[m[K, and then you can add a [01;31m[K`--config-dir ${CUSTOM_FOLDER}`[m[K string to the launch command above.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K16[m[K[36m[K-[m[K 
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K36[m[K[36m[K-[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K:[m[K[32m[K37[m[K[36m[K:[m[KBy default, HITs run locally in sandbox mode. To run live HITs, add [01;31m[K`mephisto.provider.requester_name=${REQUESTER_NAME} mephisto/architect=heroku`[m[K to your launch command, where [01;31m[K`${REQUESTER_NAME}`[m[K is the MTurk requester name that you specified when setting up Mephisto.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K38[m[K[36m[K-[m[K 
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K44[m[K[36m[K-[m[K```
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K:[m[K[32m[K45[m[K[36m[K:[m[K- Internally, `<mephisto_root_dir>` defaults to [01;31m[K`/scratch/${USER}/mephisto`[m[K.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/README.md[m[K[36m[K-[m[K[32m[K46[m[K[36m[K-[m[K- The `NO_PROJECT` and `data` subfolders may be renamed in later versions of Mephisto.
[36m[K##############################################[m[K
[35m[K/tmp/ParlAI/parlai/crowdsourcing/utils/tests.py[m[K[36m[K-[m[K[32m[K70[m[K[36m[K-[m[K        :param task_directory: directory containing the `conf/` configuration folder.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/utils/tests.py[m[K[36m[K:[m[K[32m[K71[m[K[36m[K:[m[K          Will be injected as [01;31m[K`${task_dir}`[m[K in YAML files.
[35m[K/tmp/ParlAI/parlai/crowdsourcing/utils/tests.py[m[K[36m[K-[m[K[32m[K72[m[K[36m[K-[m[K        :param overrides: additional config overrides
