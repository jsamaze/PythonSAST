===========================================================
                                      .___ __  __   
          _________________  __ __  __| _/|__|/  |_ 
         / ___\_` __ \__  \ |  |  \/ __ | | \\_  __\
        / /_/  >  | \// __ \|  |  / /_/ | |  ||  |  
        \___  /|__|  (____  /____/\____ | |__||__|  
       /_____/            \/           \/           
              grep rough audit - static analysis tool
                  v3.5 written by @Wireghoul
=================================[justanotherhacker.com]===
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8071[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8072[m[K[36m[K:[m[K    def _se_get_ib_interface_hw[01;31m[Kaddr([m[Kself, name, ethernet_format):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8073[m[K[36m[K-[m[K        ib_hwaddr = self.data.get("ib_hwaddr", {})
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8337[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8338[m[K[36m[K:[m[K    def _se_get_ib_interface_hw[01;31m[Kaddr([m[Kself, name, ethernet_format):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8339[m[K[36m[K-[m[K        ib_hwaddr = self.data.get("ib_hwaddr", {})
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8651[m[K[36m[K-[m[Kclass TestNetworkState(CiTestCase):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8652[m[K[36m[K:[m[K    def test_bcast_[01;31m[Kaddr([m[Kself):
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8653[m[K[36m[K-[m[K        """Test mask_and_ipv4_to_bcast_addr proper execution."""
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8655[m[K[36m[K-[m[K        self.assertEqual(
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8656[m[K[36m[K:[m[K            "192.168.1.255", bcast_[01;31m[Kaddr([m[K"255.255.255.0", "192.168.1.1")
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8657[m[K[36m[K-[m[K        )
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8658[m[K[36m[K-[m[K        self.assertEqual(
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8659[m[K[36m[K:[m[K            "128.42.7.255", bcast_[01;31m[Kaddr([m[K"255.255.248.0", "128.42.5.4")
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8660[m[K[36m[K-[m[K        )
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8661[m[K[36m[K-[m[K        self.assertEqual(
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K:[m[K[32m[K8662[m[K[36m[K:[m[K            "10.1.21.255", bcast_[01;31m[Kaddr([m[K"255.255.255.0", "10.1.21.4")
[35m[K/tmp/cloud-init/tests/unittests/test_net.py[m[K[36m[K-[m[K[32m[K8663[m[K[36m[K-[m[K        )
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K29[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K30[m[K[36m[K:[m[Kdef _get_ip_[01;31m[Kaddr([m[Kclient):
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[K    ips = []
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K39[m[K[36m[K-[m[K        ip6 = ip6_cidr.split("/")[0] if ip6_cidr else None
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K40[m[K[36m[K:[m[K        ip = ip_[01;31m[Kaddr([m[Kinterface, state, ip4, ip6)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K41[m[K[36m[K-[m[K        ips.append(ip)
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K57[m[K[36m[K-[m[Kdef test_hotplug_add_remove(client: IntegrationInstance):
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K58[m[K[36m[K:[m[K    ips_before = _get_ip_[01;31m[Kaddr([m[Kclient)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K59[m[K[36m[K-[m[K    log = client.read_from_file("/var/log/cloud-init.log")
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K67[m[K[36m[K-[m[K    _wait_till_hotplug_complete(client, expected_runs=1)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K68[m[K[36m[K:[m[K    ips_after_add = _get_ip_[01;31m[Kaddr([m[Kclient)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K69[m[K[36m[K-[m[K    new_addition = [ip for ip in ips_after_add if ip.ip4 == added_ip][0]
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K82[m[K[36m[K-[m[K    _wait_till_hotplug_complete(client, expected_runs=2)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K83[m[K[36m[K:[m[K    ips_after_remove = _get_ip_[01;31m[Kaddr([m[Kclient)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K84[m[K[36m[K-[m[K    assert len(ips_after_remove) == len(ips_before)
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K103[m[K[36m[K-[m[Kdef test_no_hotplug_in_userdata(client: IntegrationInstance):
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K104[m[K[36m[K:[m[K    ips_before = _get_ip_[01;31m[Kaddr([m[Kclient)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K105[m[K[36m[K-[m[K    log = client.read_from_file("/var/log/cloud-init.log")
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K115[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K:[m[K[32m[K116[m[K[36m[K:[m[K    ips_after_add = _get_ip_[01;31m[Kaddr([m[Kclient)
[35m[K/tmp/cloud-init/tests/integration_tests/modules/test_hotplug.py[m[K[36m[K-[m[K[32m[K117[m[K[36m[K-[m[K    if len(ips_after_add) == len(ips_before) + 1:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/doc/rtd/reference/datasources/azure.rst[m[K[36m[K-[m[K[32m[K128[m[K[36m[K-[m[Khandles this by setting the hostname in the datasource's ``get_data`` method
[35m[K/tmp/cloud-init/doc/rtd/reference/datasources/azure.rst[m[K[36m[K:[m[K[32m[K129[m[K[36m[K:[m[Kvia :command:[01;31m[K`hostname $HostName`[m[K, and then bouncing the interface. This
[35m[K/tmp/cloud-init/doc/rtd/reference/datasources/azure.rst[m[K[36m[K-[m[K[32m[K130[m[K[36m[K-[m[Kbehaviour can be configured or disabled in the datasource config. See
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/ephemeral.py[m[K[36m[K-[m[K[32m[K388[m[K[36m[K-[m[K        if not kwargs["broadcast"]:
[35m[K/tmp/cloud-init/cloudinit/net/ephemeral.py[m[K[36m[K:[m[K[32m[K389[m[K[36m[K:[m[K            kwargs["broadcast"] = net.mask_and_ipv4_to_bcast_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/net/ephemeral.py[m[K[36m[K-[m[K[32m[K390[m[K[36m[K-[m[K                kwargs["prefix_or_mask"], kwargs["ip"]
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K167[m[K[36m[K-[m[K    @staticmethod
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K:[m[K[32m[K168[m[K[36m[K:[m[K    def mac_[01;31m[Kaddr([m[Kaddr):
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K169[m[K[36m[K-[m[K        """
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K286[m[K[36m[K-[m[K            if iface["mac_address"] is not None:
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K:[m[K[32m[K287[m[K[36m[K:[m[K                self.config["ethernet"]["mac-address"] = self.mac_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K288[m[K[36m[K-[m[K                    iface["mac_address"]
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K300[m[K[36m[K-[m[K            if iface["mac_address"] is not None:
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K:[m[K[32m[K301[m[K[36m[K:[m[K                self.config["bridge"]["mac-address"] = self.mac_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K302[m[K[36m[K-[m[K                    iface["mac_address"]
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K307[m[K[36m[K-[m[K            if iface["mac_address"] is not None:
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K:[m[K[32m[K308[m[K[36m[K:[m[K                self.config["infiniband"]["mac-address"] = self.mac_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/net/network_manager.py[m[K[36m[K-[m[K[32m[K309[m[K[36m[K-[m[K                    iface["mac_address"]
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K901[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K902[m[K[36m[K:[m[Kdef get_ib_interface_hw[01;31m[Kaddr([m[Kifname, ethernet_format):
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K903[m[K[36m[K-[m[K    """Returns the string value of an Infiniband interface's hardware
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1065[m[K[36m[K-[m[K        # TODO: move this format to openstack
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K1066[m[K[36m[K:[m[K        ib_mac = get_ib_interface_hw[01;31m[Kaddr([m[Kname, True)
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1067[m[K[36m[K-[m[K        if ib_mac:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1076[m[K[36m[K-[m[K            #
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K1077[m[K[36m[K:[m[K            # These few bits selected in get_ib_interface_hw[01;31m[Kaddr([m[K) are not
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1078[m[K[36m[K-[m[K            # guaranteed to be globally unique in InfiniBand, and really make
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1148[m[K[36m[K-[m[K    for name, _, _, _ in get_interfaces():
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K1149[m[K[36m[K:[m[K        ib_mac = get_ib_interface_hw[01;31m[Kaddr([m[Kname, False)
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1150[m[K[36m[K-[m[K        if ib_mac:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1361[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K:[m[K[32m[K1362[m[K[36m[K:[m[Kdef mask_and_ipv4_to_bcast_[01;31m[Kaddr([m[Kmask: str, ip: str) -> str:
[35m[K/tmp/cloud-init/cloudinit/net/__init__.py[m[K[36m[K-[m[K[32m[K1363[m[K[36m[K-[m[K    """Get string representation of broadcast address from an ip/mask pair"""
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K-[m[K[32m[K808[m[K[36m[K-[m[K                if resolve_ip:
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K:[m[K[32m[K809[m[K[36m[K:[m[K                    toks = util.gethostby[01;31m[Kaddr([m[Klhost)
[35m[K/tmp/cloud-init/cloudinit/sources/__init__.py[m[K[36m[K-[m[K[32m[K810[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K806[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K:[m[K[32m[K807[m[K[36m[K:[m[Kdef is_valid_ip_[01;31m[Kaddr([m[Kval):
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K808[m[K[36m[K-[m[K    """
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K868[m[K[36m[K-[m[K                for ip_info in af_inet4:
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K:[m[K[32m[K869[m[K[36m[K:[m[K                    if not is_valid_ip_[01;31m[Kaddr([m[Kip_info["addr"]):
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K870[m[K[36m[K-[m[K                        continue
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K875[m[K[36m[K-[m[K                for ip_info in af_inet6:
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K:[m[K[32m[K876[m[K[36m[K:[m[K                    if not is_valid_ip_[01;31m[Kaddr([m[Kip_info["addr"]):
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K877[m[K[36m[K-[m[K                        continue
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K884[m[K[36m[K-[m[K                key = ip_info["addr"]
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K:[m[K[32m[K885[m[K[36m[K:[m[K                if not is_valid_ip_[01;31m[Kaddr([m[Kkey):
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K886[m[K[36m[K-[m[K                    continue
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K895[m[K[36m[K-[m[K                key = ip_info["addr"]
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K:[m[K[32m[K896[m[K[36m[K:[m[K                if not is_valid_ip_[01;31m[Kaddr([m[Kkey):
[35m[K/tmp/cloud-init/cloudinit/sources/DataSourceVMware.py[m[K[36m[K-[m[K[32m[K897[m[K[36m[K-[m[K                    continue
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K63[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K:[m[K[32m[K64[m[K[36m[K:[m[K    def get_ib_interface_hw[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K65[m[K[36m[K-[m[K        self, devname: DeviceName, ethernet_format: bool
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K66[m[K[36m[K-[m[K    ):
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K:[m[K[32m[K67[m[K[36m[K:[m[K        return net.get_ib_interface_hw[01;31m[Kaddr([m[Kdevname, ethernet_format)
[35m[K/tmp/cloud-init/cloudinit/distros/networking.py[m[K[36m[K-[m[K[32m[K68[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K-[m[K[32m[K149[m[K[36m[K-[m[K                        # if we set the netmask, we also can set the broadcast
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K:[m[K[32m[K150[m[K[36m[K:[m[K                        iface_info["broadcast"] = mask_and_ipv4_to_bcast_[01;31m[Kaddr([m[K
[35m[K/tmp/cloud-init/cloudinit/distros/net_util.py[m[K[36m[K-[m[K[32m[K151[m[K[36m[K-[m[K                            iface_info["netmask"], addr
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K-[m[K[32m[K28[m[K[36m[K-[m[Kusing the template located in ``/etc/cloud/templates/hosts.tmpl``. In the
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K:[m[K[32m[K29[m[K[36m[K:[m[K``/etc/cloud/templates/hosts.tmpl`` template, the strings `[01;31m[K`$hostname`[m[K` and
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K:[m[K[32m[K30[m[K[36m[K:[m[K`[01;31m[K`$fqdn`[m[K` will be replaced with the hostname and fqdn respectively.
[35m[K/tmp/cloud-init/cloudinit/config/cc_update_etc_hosts.py[m[K[36m[K-[m[K[32m[K31[m[K[36m[K-[m[K
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K-[m[K[32m[K34[m[K[36m[K-[m[KThis module can be used to post data to a remote host after boot is complete.
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K:[m[K[32m[K35[m[K[36m[K:[m[KIf the post url contains the string `[01;31m[K`$INSTANCE_ID`[m[K` it will be replaced with
[35m[K/tmp/cloud-init/cloudinit/config/cc_phone_home.py[m[K[36m[K-[m[K[32m[K36[m[K[36m[K-[m[Kthe id of the current instance. Either all data can be posted or a list of
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K764[m[K[36m[K-[m[K              "uniqueItems": true,
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K765[m[K[36m[K:[m[K              "description": "Entries in the sources list can be disabled using ``disable_suites``, which takes a list of suites to be disabled. If the string `[01;31m[K`$RELEASE`[m[K` is present in a suite in the ``disable_suites`` list, it will be replaced with the release name. If a suite specified in ``disable_suites`` is not present in ``sources.list`` it will be ignored. For convenience, several aliases are provided for`` disable_suites``:\n\n - ``updates`` => `[01;31m[K`$RELEASE-updates`[m[K`\n - ``backports`` => `[01;31m[K`$RELEASE-backports`[m[K`\n - ``security`` => `[01;31m[K`$RELEASE-security`[m[K`\n - ``proposed`` => `[01;31m[K`$RELEASE-proposed`[m[K`\n - ``release`` => `[01;31m[K`$RELEASE`[m[K`.\n\nWhen a suite is disabled using ``disable_suites``, its entry in ``sources.list`` is not deleted; it is just commented out."
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K766[m[K[36m[K-[m[K            },
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K792[m[K[36m[K-[m[K              "type": "string",
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K793[m[K[36m[K:[m[K              "description": "Specifies a custom template for rendering ``sources.list`` . If no ``sources_list`` template is given, cloud-init will use sane default. Within this template, the following strings will be replaced with the appropriate values:\n\n - `[01;31m[K`$MIRROR`[m[K`\n - `[01;31m[K`$RELEASE`[m[K`\n - `[01;31m[K`$PRIMARY`[m[K`\n - `[01;31m[K`$SECURITY`[m[K`\n - `[01;31m[K`$KEY_FILE`[m[K`"
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K794[m[K[36m[K-[m[K            },
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K845[m[K[36m[K-[m[K              },
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K846[m[K[36m[K:[m[K              "description": "Source list entries can be specified as a dictionary under the ``sources`` config key, with each key in the dict representing a different source file. The key of each source entry will be used as an id that can be referenced in other config entries, as well as the filename for the source's configuration under ``/etc/apt/sources.list.d``. If the name does not end with ``.list``, it will be appended. If there is no configuration for a key in ``sources``, no file will be written, but the key may still be referred to as an id in other ``sources`` entries.\n\nEach entry under ``sources`` is a dictionary which may contain any of the following optional keys:\n - ``source``: a sources.list entry (some variable replacements apply).\n - ``keyid``: a key to import via shortid or fingerprint.\n - ``key``: a raw PGP key.\n - ``keyserver``: alternate keyserver to pull ``keyid`` key from.\n - ``filename``: specify the name of the list file.\n - ``append``: If ``true``, append to sources file, otherwise overwrite it. Default: ``true``.\n\nThe ``source`` key supports variable replacements for the following strings:\n\n - `[01;31m[K`$MIRROR`[m[K`\n - `[01;31m[K`$PRIMARY`[m[K`\n - `[01;31m[K`$SECURITY`[m[K`\n - `[01;31m[K`$RELEASE`[m[K`\n - `[01;31m[K`$KEY_FILE`[m[K`"
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K847[m[K[36m[K-[m[K            }
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2628[m[K[36m[K-[m[K              "minItems": 1,
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K2629[m[K[36m[K:[m[K              "description": "List of ``username:password`` pairs. Each user will have the corresponding password set. A password can be randomly generated by specifying ``RANDOM`` [01;31m[Kor ``R`` as a user's password. A hashed password, created by a tool like ``mkpasswd``, can be specified. A regex (``r'\\$(1|2a|2y|5|6)(\\$[m[K.+){2}'``) is used to determine if a password value should be treated as a hash.",
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2630[m[K[36m[K-[m[K              "deprecated": true,
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2810[m[K[36m[K-[m[K          "type": "string",
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K2811[m[K[36m[K:[m[K          "default": "`[01;31m[K`no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=\"echo 'Please login as the user \\\"$USER\\\" rather than the user \\\"$DISABLE_USER\\\".';echo;sleep 10;exit 142\"`[m[K`",
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K2812[m[K[36m[K:[m[K          "description": "Disable root login options.  If ``disable_root_opts`` is specified and contains the string `[01;31m[K`$USER`[m[K`, it will be replaced with the username of the default user. Default: `[01;31m[K`no-port-forwarding,no-agent-forwarding,no-X11-forwarding,command=\"echo 'Please login as the user \\\"$USER\\\" rather than the user \\\"$DISABLE_USER\\\".';echo;sleep 10;exit 142\"`[m[K`"
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2813[m[K[36m[K-[m[K        },
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2981[m[K[36m[K-[m[K          "default": false,
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K:[m[K[32m[K2982[m[K[36m[K:[m[K          "description": "Whether to manage ``/etc/hosts`` on the system. If ``true``, render the hosts file using ``/etc/cloud/templates/hosts.tmpl`` replacing `[01;31m[K`$hostname`[m[K` and `[01;31m[K`$fdqn`[m[K`. If ``localhost``, append a ``127.0.1.1`` entry that resolves from FQDN and hostname every boot. Default: ``false``.",
[35m[K/tmp/cloud-init/cloudinit/config/schemas/schema-cloud-config-v1.json[m[K[36m[K-[m[K[32m[K2983[m[K[36m[K-[m[K          "oneOf": [
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1293[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K1294[m[K[36m[K:[m[Kdef gethostby[01;31m[Kaddr([m[Kip):
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1295[m[K[36m[K-[m[K    try:
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K1296[m[K[36m[K:[m[K        return socket.gethostby[01;31m[Kaddr([m[Kip)[0]
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K1297[m[K[36m[K-[m[K    except socket.herror:
[36m[K##############################################[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K2031[m[K[36m[K-[m[K
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K:[m[K[32m[K2032[m[K[36m[K:[m[K    class tim[01;31m[Keval(ctypes.Structure)[m[K:
[35m[K/tmp/cloud-init/cloudinit/util.py[m[K[36m[K-[m[K[32m[K2033[m[K[36m[K-[m[K        _fields_ = [("tv_sec", ctypes.c_int64), ("tv_usec", ctypes.c_int64)]
