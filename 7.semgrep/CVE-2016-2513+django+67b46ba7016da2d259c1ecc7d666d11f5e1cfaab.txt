                     
                     
┌───────────────────┐
│ 650 Code Findings │
└───────────────────┘
                                        
  [36m[22m[24m  django/apps/config.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           90┆ module = import_module(entry)
            ⋮┆----------------------------------------
          116┆ mod = import_module(mod_path)
            ⋮┆----------------------------------------
          123┆ import_module(entry)
            ⋮┆----------------------------------------
          142┆ app_module = import_module(app_name)
            ⋮┆----------------------------------------
          202┆ self.models_module = import_module(models_module_name)
                                          
  [36m[22m[24m  django/conf/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           97┆ mod = importlib.import_module(self.SETTINGS_MODULE)
                                               
  [36m[22m[24m  django/conf/urls/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           50┆ urlconf_module = import_module(urlconf_module)
                                                  
  [36m[22m[24m  django/contrib/admin/helpers.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          112┆ return mark_safe(
          113┆     '\n'.join(self.form[f].errors.as_ul()
          114┆     for f in self.fields if f not in self.readonly_fields).strip('\n')
          115┆ )
            ⋮┆----------------------------------------
          138┆ return self.field.label_tag(contents=mark_safe(contents), attrs=attrs,
            ⋮┆----------------------------------------
          142┆ return mark_safe(self.field.errors.as_ul())
            ⋮┆----------------------------------------
          211┆ result_repr = mark_safe(value)
                                                  
  [36m[22m[24m  django/contrib/admin/options.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          281┆ return mark_safe(self.empty_value_display)
            ⋮┆----------------------------------------
          283┆ return mark_safe(self.admin_site.empty_value_display)
   
    ❯❱ [1mpython.django.security.injection.open-redirect.open-redirect[0m
          Data from request (redirect_url) is passed to redirect(). This is an open redirect and could be 
          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See
          https://cwe.mitre.org/data/definitions/601.html for more information.                           
          Details: https://sg.run/Ave2                                                                    
                                                                                                          
          1125┆ redirect_url = request.path
          1126┆ redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts':
               opts}, redirect_url)                                                                  
          1127┆ return HttpResponseRedirect(redirect_url)
            ⋮┆----------------------------------------
          1172┆ redirect_url = request.path
          1173┆ redirect_url = add_preserved_filters({'preserved_filters': preserved_filters, 'opts':
               opts}, redirect_url)                                                                  
          1174┆ return HttpResponseRedirect(redirect_url)
                                                                                  
  [36m[22m[24m  django/contrib/admin/static/admin/js/admin/DateTimeShortcuts.js[0m
    ❯❱ [1mjavascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization[0m
          `format.replace` method will only replace the first occurrence when used with a string argument
          ('\r'). If this method is used for escaping of dangerous data then there is a possibility for a
          bypass. Try to use sanitization library instead or use a Regex with a global flag.             
          Details: https://sg.run/1GbQ                                                                   
                                                                                                         
          410┆ format = format.replace('\r', '\\r');
            ⋮┆----------------------------------------
    ❯❱ [1mjavascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization[0m
          `format.replace` method will only replace the first occurrence when used with a string argument
          ('\n'). If this method is used for escaping of dangerous data then there is a possibility for a
          bypass. Try to use sanitization library instead or use a Regex with a global flag.             
          Details: https://sg.run/1GbQ                                                                   
                                                                                                         
          411┆ format = format.replace('\n', '\\n');
            ⋮┆----------------------------------------
    ❯❱ [1mjavascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization[0m
          `format.replace` method will only replace the first occurrence when used with a string argument
          ('\t'). If this method is used for escaping of dangerous data then there is a possibility for a
          bypass. Try to use sanitization library instead or use a Regex with a global flag.             
          Details: https://sg.run/1GbQ                                                                   
                                                                                                         
          412┆ format = format.replace('\t', '\\t');
            ⋮┆----------------------------------------
    ❯❱ [1mjavascript.lang.security.audit.incomplete-sanitization.incomplete-sanitization[0m
          `format.replace` method will only replace the first occurrence when used with a string argument
          ("'"). If this method is used for escaping of dangerous data then there is a possibility for a 
          bypass. Try to use sanitization library instead or use a Regex with a global flag.             
          Details: https://sg.run/1GbQ                                                                   
                                                                                                         
          413┆ format = format.replace("'", "\\'");
                                                                                     
  [36m[22m[24m  django/contrib/admin/static/admin/js/admin/RelatedObjectLookups.js[0m
   ❯❯❱ [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          107┆ this.innerHTML = newRepr;
                                                                  
  [36m[22m[24m  django/contrib/admin/static/admin/js/inlines.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `prefix` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           25┆ var id_regex = new RegExp("(" + prefix + "-(\\d+|__prefix__))");
                                                                    
  [36m[22m[24m  django/contrib/admin/templates/admin/actions.html[0m
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
           10┆ <a href="#" title="{% trans "Click here to select the objects across all pages" %}">{%
               blocktrans with cl.result_count as total_count %}Select all {{ total_count }} {{      
               module_name }}{% endblocktrans %}</a>                                                 
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           10┆ <a href="#" title="{% trans "Click here to select the objects across all pages" %}">{%
               blocktrans with cl.result_count as total_count %}Select all {{ total_count }} {{      
               module_name }}{% endblocktrans %}</a>                                                 
                                                                                      
  [36m[22m[24m  django/contrib/admin/templates/admin/auth/user/change_password.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           31┆ <p>{% blocktrans with username=original %}Enter a new password for the user <strong>{{
               username }}</strong>.{% endblocktrans %}</p>                                          
                                                                 
  [36m[22m[24m  django/contrib/admin/templates/admin/base.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           35┆ <a href="{{ site_url }}">{% trans 'View site' %}</a> /
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           35┆ <a href="{{ site_url }}">{% trans 'View site' %}</a> /
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           35┆ <a href="{{ site_url }}">{% trans 'View site' %}</a> /
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           40┆ <a href="{{ docsroot }}">{% trans 'Documentation' %}</a> /
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           40┆ <a href="{{ docsroot }}">{% trans 'Documentation' %}</a> /
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           40┆ <a href="{{ docsroot }}">{% trans 'Documentation' %}</a> /
                                                                        
  [36m[22m[24m  django/contrib/admin/templates/admin/change_form.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           21┆ &rsaquo; {% if add %}{% blocktrans with name=opts.verbose_name %}Add {{ name }}{%
               endblocktrans %}{% else %}{{ original|truncatewords:"18" }}{% endif %}           
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           35┆ {% if has_absolute_url %}<li><a href="{{ absolute_url }}" class="viewsitelink">{% trans
               "View on site" %}</a></li>{% endif %}                                                  
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           35┆ {% if has_absolute_url %}<li><a href="{{ absolute_url }}" class="viewsitelink">{% trans
               "View on site" %}</a></li>{% endif %}                                                  
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           35┆ {% if has_absolute_url %}<li><a href="{{ absolute_url }}" class="viewsitelink">{% trans
               "View on site" %}</a></li>{% endif %}                                                  
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-src.var-in-script-src[0m
          Detected a template variable used as the 'src' in a script tag. Although template variables are HTML
          escaped, HTML escaping does not always prevent malicious URLs from being injected and could results 
          in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src'         
          attribute and use static URLs instead. If you must do this, carefully check URLs against an         
          allowlist and be sure to URL-encode the result.                                                     
          Details: https://sg.run/OPob                                                                        
                                                                                                              
           75┆ data-model-name="{{ opts.model_name }}"
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           75┆ data-model-name="{{ opts.model_name }}"
                                                                        
  [36m[22m[24m  django/contrib/admin/templates/admin/change_list.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           49┆ {% blocktrans with cl.opts.verbose_name as name %}Add {{ name }}{% endblocktrans %}
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           75┆ <form id="changelist-form" method="post"{% if cl.formset.is_multipart %}
               enctype="multipart/form-data"{% endif %} novalidate>{% csrf_token %}    
           76┆ {% if cl.formset %}
           77┆   <div>{{ cl.formset.management_form }}</div>
           78┆ {% endif %}
           79┆
           80┆ {% block result_list %}
           81┆     {% if action_form and actions_on_top and cl.show_admin_actions %}{% admin_actions %}{%
               endif %}                                                                                  
           82┆     {% result_list cl %}
           83┆     {% if action_form and actions_on_bottom and cl.show_admin_actions %}{% admin_actions
               %}{% endif %}                                                                           
           84┆ {% endblock %}
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
                                                                                
  [36m[22m[24m  django/contrib/admin/templates/admin/change_list_results.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           17┆ <a class="sortremove" href="{{ header.url_remove }}" title="{% trans "Remove from sorting"
               %}"></a>                                                                                  
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           17┆ <a class="sortremove" href="{{ header.url_remove }}" title="{% trans "Remove from sorting"
               %}"></a>                                                                                  
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           17┆ <a class="sortremove" href="{{ header.url_remove }}" title="{% trans "Remove from sorting"
               %}"></a>                                                                                  
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           18┆ {% if num_sorted_fields > 1 %}<span class="sortpriority" title="{% blocktrans with
               priority_number=header.sort_priority %}Sorting priority: {{ priority_number }}{%  
               endblocktrans %}">{{ header.sort_priority }}</span>{% endif %}                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <a href="{{ header.url_toggle }}" class="toggle {% if header.ascending %}ascending{% else
               %}descending{% endif %}" title="{% trans "Toggle sorting" %}"></a>                       
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19┆ <a href="{{ header.url_toggle }}" class="toggle {% if header.ascending %}ascending{% else
               %}descending{% endif %}" title="{% trans "Toggle sorting" %}"></a>                       
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19┆ <a href="{{ header.url_toggle }}" class="toggle {% if header.ascending %}ascending{% else
               %}descending{% endif %}" title="{% trans "Toggle sorting" %}"></a>                       
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           23┆ <div class="text">{% if header.sortable %}<a href="{{ header.url_primary }}">{{     
               header.text|capfirst }}</a>{% else %}<span>{{ header.text|capfirst }}</span>{% endif
               %}</div>                                                                            
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           23┆ <div class="text">{% if header.sortable %}<a href="{{ header.url_primary }}">{{     
               header.text|capfirst }}</a>{% else %}<span>{{ header.text|capfirst }}</span>{% endif
               %}</div>                                                                            
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           23┆ <div class="text">{% if header.sortable %}<a href="{{ header.url_primary }}">{{     
               header.text|capfirst }}</a>{% else %}<span>{{ header.text|capfirst }}</span>{% endif
               %}</div>                                                                            
                                                                           
  [36m[22m[24m  django/contrib/admin/templates/admin/date_hierarchy.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            4┆ {% if back %}<li class="date-back"><a href="{{ back.link }}">&lsaquo; {{ back.title
               }}</a></li>{% endif %}                                                             
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            4┆ {% if back %}<li class="date-back"><a href="{{ back.link }}">&lsaquo; {{ back.title
               }}</a></li>{% endif %}                                                             
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            4┆ {% if back %}<li class="date-back"><a href="{{ back.link }}">&lsaquo; {{ back.title
               }}</a></li>{% endif %}                                                             
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            6┆ <li> {% if choice.link %}<a href="{{ choice.link }}">{% endif %}{{ choice.title }}{% if
               choice.link %}</a>{% endif %}</li>                                                     
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            6┆ <li> {% if choice.link %}<a href="{{ choice.link }}">{% endif %}{{ choice.title }}{% if
               choice.link %}</a>{% endif %}</li>                                                     
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            6┆ <li> {% if choice.link %}<a href="{{ choice.link }}">{% endif %}{{ choice.title }}{% if
               choice.link %}</a>{% endif %}</li>                                                     
                                                                                
  [36m[22m[24m  django/contrib/admin/templates/admin/delete_confirmation.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           23┆ <p>{% blocktrans with escaped_object=object %}Deleting the {{ object_name }} '{{          
               escaped_object }}' would result in deleting related objects, but your account doesn't have
               permission to delete the following types of objects:{% endblocktrans %}</p>               
            ⋮┆----------------------------------------
           30┆ <p>{% blocktrans with escaped_object=object %}Deleting the {{ object_name }} '{{    
               escaped_object }}' would require deleting the following protected related objects:{%
               endblocktrans %}</p>                                                                
            ⋮┆----------------------------------------
           37┆ <p>{% blocktrans with escaped_object=object %}Are you sure you want to delete the {{
               object_name }} "{{ escaped_object }}"? All of the following related items will be   
               deleted:{% endblocktrans %}</p>                                                     
                                                                                         
  [36m[22m[24m  django/contrib/admin/templates/admin/delete_selected_confirmation.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           22┆ <p>{% blocktrans %}Deleting the selected {{ objects_name }} would result in deleting      
               related objects, but your account doesn't have permission to delete the following types of
               objects:{% endblocktrans %}</p>                                                           
            ⋮┆----------------------------------------
           29┆ <p>{% blocktrans %}Deleting the selected {{ objects_name }} would require deleting the
               following protected related objects:{% endblocktrans %}</p>                           
            ⋮┆----------------------------------------
           36┆ <p>{% blocktrans %}Are you sure you want to delete the selected {{ objects_name }}? All of
               the following objects and their related items will be deleted:{% endblocktrans %}</p>     
                                                                                
  [36m[22m[24m  django/contrib/admin/templates/admin/edit_inline/stacked.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
                                                                                
  [36m[22m[24m  django/contrib/admin/templates/admin/edit_inline/tabular.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           36┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           36┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           36┆ {% if inline_admin_form.show_url %}<a href="{{ inline_admin_form.absolute_url }}">{% trans
               "View on site" %}</a>{% endif %}                                                          
                                                                   
  [36m[22m[24m  django/contrib/admin/templates/admin/filter.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
            2┆ <h3>{% blocktrans with filter_title=title %} By {{ filter_title }} {% endblocktrans %}</h3>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            6┆ <a href="{{ choice.query_string|iriencode }}">{{ choice.display }}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            6┆ <a href="{{ choice.query_string|iriencode }}">{{ choice.display }}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            6┆ <a href="{{ choice.query_string|iriencode }}">{{ choice.display }}</a></li>
                                                                  
  [36m[22m[24m  django/contrib/admin/templates/admin/index.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           20┆ <a href="{{ app.app_url }}" class="section" title="{% blocktrans with name=app.name
               %}Models in the {{ name }} application{% endblocktrans %}">{{ app.name }}</a>      
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           20┆ <a href="{{ app.app_url }}" class="section" title="{% blocktrans with name=app.name
               %}Models in the {{ name }} application{% endblocktrans %}">{{ app.name }}</a>      
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           20┆ <a href="{{ app.app_url }}" class="section" title="{% blocktrans with name=app.name
               %}Models in the {{ name }} application{% endblocktrans %}">{{ app.name }}</a>      
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           20┆ <a href="{{ app.app_url }}" class="section" title="{% blocktrans with name=app.name
               %}Models in the {{ name }} application{% endblocktrans %}">{{ app.name }}</a>      
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           25┆ <th scope="row"><a href="{{ model.admin_url }}">{{ model.name }}</a></th>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           25┆ <th scope="row"><a href="{{ model.admin_url }}">{{ model.name }}</a></th>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           25┆ <th scope="row"><a href="{{ model.admin_url }}">{{ model.name }}</a></th>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           31┆ <td><a href="{{ model.add_url }}" class="addlink">{% trans 'Add' %}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           31┆ <td><a href="{{ model.add_url }}" class="addlink">{% trans 'Add' %}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           31┆ <td><a href="{{ model.add_url }}" class="addlink">{% trans 'Add' %}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           37┆ <td><a href="{{ model.admin_url }}" class="changelink">{% trans 'Change' %}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           37┆ <td><a href="{{ model.admin_url }}" class="changelink">{% trans 'Change' %}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           37┆ <td><a href="{{ model.admin_url }}" class="changelink">{% trans 'Change' %}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           68┆ <a href="{{ entry.get_admin_url }}">{{ entry.object_repr }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           68┆ <a href="{{ entry.get_admin_url }}">{{ entry.object_repr }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           68┆ <a href="{{ entry.get_admin_url }}">{{ entry.object_repr }}</a>
                                                                  
  [36m[22m[24m  django/contrib/admin/templates/admin/login.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           37┆ {% blocktrans with username=request.user.get_username trimmed %}
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           44┆ <form action="{{ app_path }}" method="post" id="login-form">{% csrf_token %}
           45┆   <div class="form-row">
           46┆     {{ form.username.errors }}
           47┆     {{ form.username.label_tag }} {{ form.username }}
           48┆   </div>
           49┆   <div class="form-row">
           50┆     {{ form.password.errors }}
           51┆     {{ form.password.label_tag }} {{ form.password }}
           52┆     <input type="hidden" name="next" value="{{ next }}" />
           53┆   </div>
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           57┆ <a href="{{ password_reset_url }}">{% trans 'Forgotten your password or username?' %}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           57┆ <a href="{{ password_reset_url }}">{% trans 'Forgotten your password or username?' %}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           57┆ <a href="{{ password_reset_url }}">{% trans 'Forgotten your password or username?' %}</a>
                                                                       
  [36m[22m[24m  django/contrib/admin/templates/admin/pagination.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           10┆ {% if show_all_url %}&nbsp;&nbsp;<a href="{{ show_all_url }}" class="showall">{% trans
               'Show all' %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           10┆ {% if show_all_url %}&nbsp;&nbsp;<a href="{{ show_all_url }}" class="showall">{% trans
               'Show all' %}</a>{% endif %}                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           10┆ {% if show_all_url %}&nbsp;&nbsp;<a href="{{ show_all_url }}" class="showall">{% trans
               'Show all' %}</a>{% endif %}                                                          
                                                                           
  [36m[22m[24m  django/contrib/admin/templates/admin/popup_response.html[0m
    ❯❱ [1mgeneric.html-templates.security.var-in-script-src.var-in-script-src[0m
          Detected a template variable used as the 'src' in a script tag. Although template variables are HTML
          escaped, HTML escaping does not always prevent malicious URLs from being injected and could results 
          in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src'         
          attribute and use static URLs instead. If you must do this, carefully check URLs against an         
          allowlist and be sure to URL-encode the result.                                                     
          Details: https://sg.run/OPob                                                                        
                                                                                                              
            8┆ data-popup-response="{{ popup_response_data }}">
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
            8┆ data-popup-response="{{ popup_response_data }}">
                                                                                   
  [36m[22m[24m  django/contrib/admin/templates/admin/prepopulated_fields_js.html[0m
    ❯❱ [1mgeneric.html-templates.security.var-in-script-src.var-in-script-src[0m
          Detected a template variable used as the 'src' in a script tag. Although template variables are HTML
          escaped, HTML escaping does not always prevent malicious URLs from being injected and could results 
          in a cross-site scripting (XSS) vulnerability. Prefer not to dynamically generate the 'src'         
          attribute and use static URLs instead. If you must do this, carefully check URLs against an         
          allowlist and be sure to URL-encode the result.                                                     
          Details: https://sg.run/OPob                                                                        
                                                                                                              
            5┆ data-prepopulated-fields="{{ prepopulated_fields_json }}">
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
            5┆ data-prepopulated-fields="{{ prepopulated_fields_json }}">
                                                                                   
  [36m[22m[24m  django/contrib/admin/templates/admin/related_widget_wrapper.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
            8┆ title="{% blocktrans %}Change selected {{ model }}{% endblocktrans %}">
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ href="{{ add_related_url }}?{{ url_params }}"
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ href="{{ add_related_url }}?{{ url_params }}"
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           15┆ title="{% blocktrans %}Add another {{ model }}{% endblocktrans %}">
            ⋮┆----------------------------------------
           22┆ title="{% blocktrans %}Delete selected {{ model }}{% endblocktrans %}">
                                                                        
  [36m[22m[24m  django/contrib/admin/templates/admin/search_form.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
            9┆ <span class="small quiet">{% blocktrans count counter=cl.result_count %}{{ counter }}      
               result{% plural %}{{ counter }} results{% endblocktrans %} (<a href="?{% if cl.is_popup    
               %}_popup=1{% endif %}">{% if cl.show_full_result_count %}{% blocktrans with                
               full_result_count=cl.full_result_count %}{{ full_result_count }} total{% endblocktrans %}{%
               else %}{% trans "Show all" %}{% endif %}</a>)</span>                                       
            ⋮┆----------------------------------------
            9┆ <span class="small quiet">{% blocktrans count counter=cl.result_count %}{{ counter }}      
               result{% plural %}{{ counter }} results{% endblocktrans %} (<a href="?{% if cl.is_popup    
               %}_popup=1{% endif %}">{% if cl.show_full_result_count %}{% blocktrans with                
               full_result_count=cl.full_result_count %}{{ full_result_count }} total{% endblocktrans %}{%
               else %}{% trans "Show all" %}{% endif %}</a>)</span>                                       
                                                                                        
  [36m[22m[24m  django/contrib/admin/templates/registration/password_change_done.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            3┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %}{% trans 'Change      
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            3┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %}{% trans 'Change      
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            3┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %}{% trans 'Change      
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
                                                                                        
  [36m[22m[24m  django/contrib/admin/templates/registration/password_change_form.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            4┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %} {% trans 'Change     
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            4┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %} {% trans 'Change     
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            4┆ {% block userlinks %}{% url 'django-admindocs-docroot' as docsroot %}{% if docsroot %}<a 
               href="{{ docsroot }}">{% trans 'Documentation' %}</a> / {% endif %} {% trans 'Change     
               password' %} / <a href="{% url 'admin:logout' %}">{% trans 'Log out' %}</a>{% endblock %}
                                                                                           
  [36m[22m[24m  django/contrib/admin/templates/registration/password_reset_complete.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           18┆ <p><a href="{{ login_url }}">{% trans 'Log in' %}</a></p>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           18┆ <p><a href="{{ login_url }}">{% trans 'Log in' %}</a></p>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           18┆ <p><a href="{{ login_url }}">{% trans 'Log in' %}</a></p>
                                                                                        
  [36m[22m[24m  django/contrib/admin/templates/registration/password_reset_email.html[0m
    ❯❱ [1mpython.django.security.audit.xss.template-autoescape-off.template-autoescape-off[0m
          Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'.
          This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site   
          scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.       
          Details: https://sg.run/Q5WZ                                                                    
                                                                                                          
            1┆ {% load i18n %}{% autoescape off %}
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
            2┆ {% blocktrans %}You're receiving this email because you requested a password reset for your
               user account at {{ site_name }}.{% endblocktrans %}                                        
            ⋮┆----------------------------------------
           12┆ {% blocktrans %}The {{ site_name }} team{% endblocktrans %}
                                                                  
  [36m[22m[24m  django/contrib/admin/templatetags/admin_list.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          235┆ result_repr = mark_safe(result_repr)
            ⋮┆----------------------------------------
          251┆ row_class = mark_safe(' class="%s"' % ' '.join(row_classes))
            ⋮┆----------------------------------------
          293┆ result_repr = mark_safe(force_text(bf.errors) + force_text(bf))
            ⋮┆----------------------------------------
          322┆ yield mark_safe(force_text(form[cl.model._meta.pk.name]))
   
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          436┆ return tpl.render({
          437┆     'title': spec.title,
          438┆     'choices': list(spec.choices(cl)),
          439┆     'spec': spec,
          440┆ })
                                                  
  [36m[22m[24m  django/contrib/admin/widgets.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           50┆ return mark_safe(output)
            ⋮┆----------------------------------------
          178┆ return mark_safe(''.join(output))
            ⋮┆----------------------------------------
          327┆ return mark_safe(render_to_string(self.template, context))
                                                                                 
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/bookmarklets.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           15┆ <p class="help">{% blocktrans trimmed %}
                                                                                     
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/missing_docutils.html[0m
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
           14┆ <h1>{% trans 'Documentation' %}</h1>
           15┆
           16┆ <div id="content-main">
           17┆   <h3>{% blocktrans with "http://docutils.sf.net/" as link %}The admin documentation system
               requires Python's <a href="{{ link }}">docutils</a> library.{% endblocktrans %}</h3>       
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           17┆ <h3>{% blocktrans with "http://docutils.sf.net/" as link %}The admin documentation system
               requires Python's <a href="{{ link }}">docutils</a> library.{% endblocktrans %}</h3>     
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           17┆ <h3>{% blocktrans with "http://docutils.sf.net/" as link %}The admin documentation system
               requires Python's <a href="{{ link }}">docutils</a> library.{% endblocktrans %}</h3>     
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           17┆ <h3>{% blocktrans with "http://docutils.sf.net/" as link %}The admin documentation system
               requires Python's <a href="{{ link }}">docutils</a> library.{% endblocktrans %}</h3>     
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           17┆ <h3>{% blocktrans with "http://docutils.sf.net/" as link %}The admin documentation system
               requires Python's <a href="{{ link }}">docutils</a> library.{% endblocktrans %}</h3>     
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           19┆ <p>{% blocktrans with "http://docutils.sf.net/" as link %}Please ask your administrators to
               install <a href="{{ link }}">docutils</a>.{% endblocktrans %}</p>                          
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <p>{% blocktrans with "http://docutils.sf.net/" as link %}Please ask your administrators to
               install <a href="{{ link }}">docutils</a>.{% endblocktrans %}</p>                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19┆ <p>{% blocktrans with "http://docutils.sf.net/" as link %}Please ask your administrators to
               install <a href="{{ link }}">docutils</a>.{% endblocktrans %}</p>                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19┆ <p>{% blocktrans with "http://docutils.sf.net/" as link %}Please ask your administrators to
               install <a href="{{ link }}">docutils</a>.{% endblocktrans %}</p>                          
                                                                                 
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/model_detail.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           21┆ {% block title %}{% blocktrans %}Model: {{ name }}{% endblocktrans %}{% endblock %}
                                                                                    
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/template_detail.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           13┆ {% block title %}{% blocktrans %}Template: {{ name }}{% endblocktrans %}{% endblock %}
            ⋮┆----------------------------------------
           16┆ <h1>{% blocktrans %}Template: "{{ name }}"{% endblocktrans %}</h1>
            ⋮┆----------------------------------------
           19┆ <h2>{% blocktrans %}Search path for template "{{ name }}":{% endblocktrans %}</h2>
                                                                                          
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/template_filter_index.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           23┆ {% if library.grouper %}<p class="small quiet">{% blocktrans with code="{"|add:"% load    
               "|add:library.grouper|add:" %"|add:"}" %}To use these filters, put <code>{{ code }}</code>
               in your template before using the filter.{% endblocktrans %}</p><hr />{% endif %}         
                                                                                       
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/template_tag_index.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           23┆ {% if library.grouper %}<p class="small quiet">{% blocktrans with code="{"|add:"% load    
               "|add:library.grouper|add:" %"|add:"}" %}To use these tags, put <code>{{ code }}</code> in
               your template before using the tag.{% endblocktrans %}</p><hr />{% endif %}               
                                                                                
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/view_detail.html[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           12┆ {% block title %}{% blocktrans %}View: {{ name }}{% endblocktrans %}{% endblock %}
                                                                               
  [36m[22m[24m  django/contrib/admindocs/templates/admin_doc/view_index.html[0m
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
           16┆ <h1>{% trans 'View documentation' %}</h1>
           17┆
           18┆ {% regroup views|dictsort:'namespace' by namespace as views_by_ns %}
           19┆
           20┆ <div id="content-related" class="sidebar">
           21┆ <div class="module">
           22┆ <h2>{% trans 'Jump to namespace' %}</h2>
           23┆ <ul>
           24┆ {% for ns_views in views_by_ns %}
           25┆     <li><a href="#ns|{{ ns_views.grouper }}">
             [hid 13 additional lines, adjust with --max-lines-per-finding] 
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           40┆ {% blocktrans with ns_views.grouper as name %}Views by namespace {{ name }}{% endblocktrans
               %}                                                                                         
            ⋮┆----------------------------------------
           42┆ {% blocktrans %}Views by empty namespace{% endblocktrans %}
            ⋮┆----------------------------------------
           49┆ <p class="small quiet">{% blocktrans with view.full_name as full_name and view.url_name as
               url_name %}                                                                               
                                                    
  [36m[22m[24m  django/contrib/admindocs/utils.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           88┆ return mark_safe(parts['fragment'])
                                                    
  [36m[22m[24m  django/contrib/admindocs/views.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          131┆ urlconf = import_module(settings.ROOT_URLCONF)
            ⋮┆----------------------------------------
          153┆ view_func = getattr(import_module(mod), func)
                                                   
  [36m[22m[24m  django/contrib/auth/base_user.py[0m
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'self' is being set without validating the password. Call                           
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(raw_password,
              user=self):self.set_password(raw_password)                                           
          106┆ self.set_password(raw_password)
                                               
  [36m[22m[24m  django/contrib/auth/forms.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           30┆ summary = mark_safe("<strong>%s</strong>" % ugettext("No password set."))
            ⋮┆----------------------------------------
           35┆ summary = mark_safe("<strong>%s</strong>" % ugettext(
           36┆     "Invalid password format or unknown hashing algorithm."))
   
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'user' is being set without validating the password. Call                           
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(self.cleaned_data["password1"],
              user=user):user.set_password(self.cleaned_data["password1"])                                           
           99┆ user.set_password(self.cleaned_data["password1"])
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'self.user' is being set without validating the password. Call                      
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=self.user):self.user.set_password(password)                                 
          301┆ self.user.set_password(password)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=self.user):self.user.set_password(password)                                 
          376┆ self.user.set_password(password)
                                                 
  [36m[22m[24m  django/contrib/auth/hashers.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          178┆ module = importlib.import_module(mod_path)
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(force_bytes(salt + password))
          370┆ hash = hashlib.sha1(force_bytes(salt + password)).hexdigest()
   
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          398┆ hash = hashlib.md5(force_bytes(salt + password)).hexdigest()
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(force_bytes(password))
          433┆ hash = hashlib.sha1(force_bytes(password)).hexdigest()
   
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          467┆ return hashlib.md5(force_bytes(password)).hexdigest()
                                                                            
  [36m[22m[24m  django/contrib/auth/management/commands/changepassword.py[0m
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'u' is being set without validating the password. Call                              
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(p1, user=u):u.set_password(p1)
           71┆ u.set_password(p1)
                                                
  [36m[22m[24m  django/contrib/auth/models.py[0m
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'user' is being set without validating the password. Call                           
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=user):user.set_password(password)                                           
          147┆ user.set_password(password)
                                                                                        
  [36m[22m[24m  django/contrib/auth/templates/registration/password_reset_subject.txt[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
            2┆ {% blocktrans %}Password reset on {{ site_name }}{% endblocktrans %}
                                               
  [36m[22m[24m  django/contrib/auth/views.py[0m
    ❯❱ [1mpython.django.security.injection.open-redirect.open-redirect[0m
          Data from request (redirect_to) is passed to redirect(). This is an open redirect and could be  
          exploited. Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See
          https://cwe.mitre.org/data/definitions/601.html for more information.                           
          Details: https://sg.run/Ave2                                                                    
                                                                                                          
           69┆ redirect_to = request.POST.get(redirect_field_name, request.GET.get(redirect_field_name,
               ''))                                                                                    
           70┆
           71┆ if redirect_authenticated_user and request.user.is_authenticated():
           72┆     redirect_to = _get_login_redirect_url(request, redirect_to)
           73┆     if redirect_to == request.path:
           74┆         raise ValueError(
           75┆             "Redirection loop for authenticated user detected. Check that "
           76┆             "your LOGIN_REDIRECT_URL doesn't point to a login page."
           77┆         )
           78┆     return HttpResponseRedirect(redirect_to)
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
                                                       
  [36m[22m[24m  django/contrib/contenttypes/views.py[0m
    ❯❱ [1mpython.django.security.injection.tainted-url-host.tainted-url-host[0m
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server runnig this code can access. (This is called server-side request forgery, 
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the
          correct host.                                                                                       
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
           87┆ return http.HttpResponseRedirect('%s://%s%s'
           88┆                                  % (protocol, object_domain, absurl))
                                                    
  [36m[22m[24m  django/contrib/flatpages/views.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           68┆ f.title = mark_safe(f.title)
            ⋮┆----------------------------------------
           69┆ f.content = mark_safe(f.content)
   
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           71┆ response = HttpResponse(template.render({'flatpage': f}, request))
                                                                        
  [36m[22m[24m  django/contrib/gis/db/backends/mysql/introspection.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           18┆ cursor.execute('DESCRIBE %s' %
           19┆                self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           18┆ cursor.execute('DESCRIBE %s' %
           19┆                self.connection.ops.quote_name(table_name))
                                                                 
  [36m[22m[24m  django/contrib/gis/db/backends/mysql/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           56┆ self.execute(sql)
                                                                      
  [36m[22m[24m  django/contrib/gis/db/backends/oracle/operations.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(SDORelate, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user  
          input enters this function or that user input is properly sanitized.                               
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           53┆ return super(SDORelate, self).as_sql(connection, lookup, template_params, sql_params)
                                                                  
  [36m[22m[24m  django/contrib/gis/db/backends/oracle/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           66┆ self.execute(self.sql_clear_geometry_table_metadata % {
           67┆     'table': self.geo_quote_name(model._meta.db_table),
           68┆ })
            ⋮┆----------------------------------------
           76┆ self.execute(self.sql_clear_geometry_field_metadata % {
           77┆     'table': self.geo_quote_name(model._meta.db_table),
           78┆     'column': self.geo_quote_name(field.column),
           79┆ })
            ⋮┆----------------------------------------
           81┆ self.execute(self.sql_drop_spatial_index % {
           82┆     'index': self.quote_name(self._create_spatial_index_name(model, field)),
           83┆ })
                                                                       
  [36m[22m[24m  django/contrib/gis/db/backends/postgis/operations.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(PostGISOperator, self)'' calling ''as_sql(...).'' This could   
          lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no
          user input enters this function or that user input is properly sanitized.                           
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           30┆ return super(PostGISOperator, self).as_sql(connection, lookup, *args)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(PostGISDistanceOperator, self)'' calling ''as_sql(...).'' This
          could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead,   
          ensure no user input enters this function or that user input is properly sanitized.                
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           48┆ return super(PostGISDistanceOperator, self).as_sql(connection, lookup, template_params,
               sql_params)                                                                            
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          309┆ cursor.execute('SELECT %s()' % func)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          309┆ cursor.execute('SELECT %s()' % func)
                                                                   
  [36m[22m[24m  django/contrib/gis/db/backends/postgis/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           64┆ self.execute(self.sql_clear_geometry_columns % {
           65┆     "table": self.geo_quote_name(model._meta.db_table),
           66┆ })
                                                                    
  [36m[22m[24m  django/contrib/gis/db/backends/spatialite/base.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           75┆ cursor.execute("SELECT InitSpatialMetaData(%s)" % arg)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           75┆ cursor.execute("SELECT InitSpatialMetaData(%s)" % arg)
                                                                             
  [36m[22m[24m  django/contrib/gis/db/backends/spatialite/introspection.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           33┆ cursor.execute('SELECT coord_dimension, srid, %s '
           34┆                'FROM geometry_columns '
           35┆                'WHERE f_table_name=%%s AND f_geometry_column=%%s' % type_col,
           36┆                (table_name, geo_col))
                                                                          
  [36m[22m[24m  django/contrib/gis/db/backends/spatialite/operations.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          204┆ cursor.execute('SELECT %s' % func)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          204┆ cursor.execute('SELECT %s' % func)
                                                                      
  [36m[22m[24m  django/contrib/gis/db/backends/spatialite/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           60┆ self.execute(
           61┆     self.sql_remove_geometry_metadata % {
           62┆         "table": self.quote_name(model._meta.db_table),
           63┆         "column": self.quote_name(field.column),
           64┆     }
           65┆ )
            ⋮┆----------------------------------------
           66┆ self.execute(
           67┆     self.sql_drop_spatial_index % {
           68┆         "table": model._meta.db_table,
           69┆         "column": field.column,
           70┆     }
           71┆ )
            ⋮┆----------------------------------------
           89┆ self.execute(
           90┆     self.sql_discard_geometry_columns % {
           91┆         "geom_table": geom_table,
           92┆         "table": self.quote_name(model._meta.db_table),
           93┆     }
           94┆ )
            ⋮┆----------------------------------------
          127┆ self.execute(
          128┆     self.sql_remove_geometry_metadata % {
          129┆         "table": self.quote_name(old_db_table),
          130┆         "column": self.quote_name(field.column),
          131┆     }
          132┆ )
            ⋮┆----------------------------------------
          138┆ self.execute(
          139┆     self.sql_update_geometry_columns % {
          140┆         "geom_table": geom_table,
          141┆         "old_table": self.quote_name(old_db_table),
          142┆         "new_table": self.quote_name(new_db_table),
          143┆     }
          144┆ )
            ⋮┆----------------------------------------
          150┆ self.execute(self.sql_add_geometry_column % {
          151┆     "table": self.geo_quote_name(new_db_table),
          152┆     "column": self.geo_quote_name(field.column),
          153┆     "srid": field.srid,
          154┆     "geom_type": self.geo_quote_name(field.geom_type),
          155┆     "dim": field.dim,
          156┆     "null": int(not field.null),
          157┆ })
            ⋮┆----------------------------------------
          159┆ self.execute(self.sql_rename_table % {
          160┆     "old_table": self.quote_name("idx_%s_%s" % (old_db_table, field.column)),
          161┆     "new_table": self.quote_name("idx_%s_%s" % (new_db_table, field.column)),
          162┆ })
                                                             
  [36m[22m[24m  django/contrib/gis/db/models/aggregates.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(GeoAggregate, self)'' calling ''as_sql(...).'' This could lead 
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           16┆ return super(GeoAggregate, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           24┆ return self.as_sql(compiler, connection)
                                                            
  [36m[22m[24m  django/contrib/gis/db/models/functions.py[0m
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: GeoFunc. Extending expressions in this way could inadvertently
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data.   
          Instead, ensure no user input enters this function or that user input is properly sanitized.        
          Details: https://sg.run/N4Ay                                                                        
                                                                                                              
           16┆ class GeoFunc(Func):
           17┆     function = None
           18┆     output_field_class = None
           19┆     geom_param_pos = 0
           20┆
           21┆     def __init__(self, *expressions, **extra):
           22┆         if 'output_field' not in extra and self.output_field_class:
           23┆             extra['output_field'] = self.output_field_class()
           24┆         super(GeoFunc, self).__init__(*expressions, **extra)
           25┆
             [hid 39 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(GeoFunc, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                             
          Details: https://sg.run/b7bW                                                                     
                                                                                                           
           43┆ return super(GeoFunc, self).as_sql(compiler, connection)
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: GeomValue. Extending expressions in this way could         
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
           67┆ class GeomValue(Value):
           68┆     geography = False
           69┆
           70┆     @property
           71┆     def srid(self):
           72┆         return self.value.srid
           73┆
           74┆     def as_sql(self, compiler, connection):
           75┆         if self.geography:
           76┆             self.value = connection.ops.Adapter(self.value, geography=self.geography)
             [hid 12 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(GeomValue, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user  
          input enters this function or that user input is properly sanitized.                               
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           79┆ return super(GeomValue, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(SQLiteDecimalToFloatMixin, self)'' calling ''as_sql(...).''
          This could lead to SQL injection, which can result in attackers exfiltrating sensitive data.    
          Instead, ensure no user input enters this function or that user input is properly sanitized.    
          Details: https://sg.run/b7bW                                                                    
                                                                                                          
          107┆ return super(SQLiteDecimalToFloatMixin, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(OracleToleranceMixin, self)'' calling ''as_sql(...).'' This
          could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead,
          ensure no user input enters this function or that user input is properly sanitized.             
          Details: https://sg.run/b7bW                                                                    
                                                                                                          
          116┆ return super(OracleToleranceMixin, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Area, self)'' calling ''as_sql(...).'' This could lead to SQL 
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          137┆ return super(Area, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(AsKML, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          178┆ return super(AsKML, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Distance, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user 
          input enters this function or that user input is properly sanitized.                              
          Details: https://sg.run/b7bW                                                                      
                                                                                                            
          255┆ return super(Distance, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Length, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input 
          enters this function or that user input is properly sanitized.                                      
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          296┆ return super(Length, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
          310┆ return super(Length, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
          319┆ return super(Length, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(NumPoints, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user  
          input enters this function or that user input is properly sanitized.                               
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          339┆ return super(NumPoints, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Perimeter, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user  
          input enters this function or that user input is properly sanitized.                               
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          353┆ return super(Perimeter, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
          359┆ return super(Perimeter, self).as_sql(compiler, connection)
                                                          
  [36m[22m[24m  django/contrib/gis/db/models/lookups.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''rhs_op'' calling ''as_sql(...).'' This could lead to SQL injection,  
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          108┆ return rhs_op.as_sql(connection, self, template_params, sql_params)
                                                        
  [36m[22m[24m  django/contrib/gis/db/models/query.py[0m
    ❯❱ [1mpython.django.security.audit.raw-query.avoid-raw-sql[0m
          Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query.    
          This could lead to a SQL injection and therefore protected information could be leaked. Instead, use
          Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is:         
          `People.objects.get(name='Bob')`                                                                    
          Details: https://sg.run/weDA                                                                        
                                                                                                              
          481┆ RawSQL(fmt % settings['procedure_args'], settings['select_params'], select_field),
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''col'' calling ''as_sql(...).'' This could lead to SQL injection,     
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          686┆ return col.as_sql(compiler, compiler.connection)[0]
                                                                  
  [36m[22m[24m  django/contrib/gis/geometry/backend/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
            9┆ module = import_module('django.contrib.gis.geometry.backend.%s' % geom_backend)
            ⋮┆----------------------------------------
           12┆ module = import_module(geom_backend)
                                                         
  [36m[22m[24m  django/contrib/gis/maps/google/gmap.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          215┆ return mark_safe(''.join(result))
            ⋮┆----------------------------------------
          236┆ return mark_safe('onload="%s.load()"' % self.js_module)
                                                             
  [36m[22m[24m  django/contrib/gis/maps/google/overlays.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           13┆ @html_safe
           14┆ @python_2_unicode_compatible
           15┆ class GEvent(object):
           16┆     """
           17┆     A Python wrapper for the Google GEvent object.
           18┆
           19┆     Events can be attached to any object derived from GOverlayBase with the
           20┆     add_event() call.
           21┆
           22┆     For more information please see the Google Maps API Reference:
             [hid 40 additional lines, adjust with --max-lines-per-finding] 
           13┆ @html_safe
            ⋮┆----------------------------------------
           65┆ @html_safe
           66┆ @python_2_unicode_compatible
           67┆ class GOverlayBase(object):
           68┆     def __init__(self):
           69┆         self.events = []
           70┆
           71┆     def latlng_from_coords(self, coords):
           72┆         "Generates a JavaScript array of GLatLng objects for the given coordinates."
           73┆         return '[%s]' % ','.join('new GLatLng(%s,%s)' % (y, x) for x, y in coords)
           74┆
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
           65┆ @html_safe
                                                            
  [36m[22m[24m  django/contrib/gis/serializers/geojson.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           64┆ data["geometry"] = eval(self._geometry.geojson)
                                                                         
  [36m[22m[24m  django/contrib/gis/templates/gis/admin/openlayers.html[0m
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           39┆ <script type="text/javascript">{% block init_function %}{{ module }}.init();{% endblock
               %}</script>                                                                            
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           39┆ <script type="text/javascript">{% block init_function %}{{ module }}.init();{% endblock
               %}</script>                                                                            
                                                                   
  [36m[22m[24m  django/contrib/humanize/templatetags/humanize.py[0m
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
           20┆ @register.filter(is_safe=True)
           21┆ def ordinal(value):
           22┆     """
           23┆     Converts an integer to its ordinal as a string. 1 is '1st', 2 is '2nd',
           24┆     3 is '3rd', etc. Works for any integer.
           25┆     """
           26┆     try:
           27┆         value = int(value)
           28┆     except (TypeError, ValueError):
           29┆         return value
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           32┆ return mark_safe("%d%s" % (value, suffixes[0]))
            ⋮┆----------------------------------------
           34┆ return mark_safe("%d%s" % (value, suffixes[value % 10]))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
           37┆ @register.filter(is_safe=True)
           38┆ def intcomma(value, use_l10n=True):
           39┆     """
           40┆     Converts an integer to a string containing commas every three digits.
           41┆     For example, 3000 becomes '3,000' and 45000 becomes '45,000'.
           42┆     """
           43┆     if settings.USE_L10N and use_l10n:
           44┆         try:
           45┆             if not isinstance(value, (float, Decimal)):
           46┆                 value = int(value)
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
          141┆ @register.filter(is_safe=True)
          142┆ def apnumber(value):
          143┆     """
          144┆     For numbers 1-9, returns the number spelled out. Otherwise, returns the
          145┆     number. This follows Associated Press style.
          146┆     """
          147┆     try:
          148┆         value = int(value)
          149┆     except (TypeError, ValueError):
          150┆         return value
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
                                                            
  [36m[22m[24m  django/contrib/messages/storage/cookie.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           40┆ obj[3] = mark_safe(obj[3])
                                                          
  [36m[22m[24m  django/contrib/postgres/fields/array.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ArrayContains, self)'' calling ''as_sql(...).'' This could lead
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          181┆ sql, params = super(ArrayContains, self).as_sql(qn, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ArrayContainedBy, self)'' calling ''as_sql(...).'' This could  
          lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no
          user input enters this function or that user input is properly sanitized.                           
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          189┆ sql, params = super(ArrayContainedBy, self).as_sql(qn, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ArrayExact, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user   
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          197┆ sql, params = super(ArrayExact, self).as_sql(qn, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ArrayOverlap, self)'' calling ''as_sql(...).'' This could lead 
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          205┆ sql, params = super(ArrayOverlap, self).as_sql(qn, connection)
                                                         
  [36m[22m[24m  django/contrib/postgres/forms/array.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          127┆ return mark_safe(self.format_output(output))
                                                        
  [36m[22m[24m  django/contrib/postgres/operations.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           17┆ schema_editor.execute("CREATE EXTENSION IF NOT EXISTS %s" % self.name)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           17┆ schema_editor.execute("CREATE EXTENSION IF NOT EXISTS %s" % self.name)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           20┆ schema_editor.execute("DROP EXTENSION %s" % self.name)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           20┆ schema_editor.execute("DROP EXTENSION %s" % self.name)
                                                                               
  [36m[22m[24m  django/contrib/sessions/management/commands/clearsessions.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           14┆ engine = import_module(settings.SESSION_ENGINE)
                                                        
  [36m[22m[24m  django/contrib/sessions/middleware.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           13┆ engine = import_module(settings.SESSION_ENGINE)
   
    ❯❱ [1mpython.django.security.injection.open-redirect.open-redirect[0m
          Data from request ($DATA) is passed to redirect(). This is an open redirect and could be exploited.
          Ensure you are redirecting to safe URLs by using django.utils.http.is_safe_url(). See              
          https://cwe.mitre.org/data/definitions/601.html for more information.                              
          Details: https://sg.run/Ave2                                                                       
                                                                                                             
           58┆ return redirect(request.path)
            ⋮┆----------------------------------------
           58┆ return redirect(request.path)
                                                         
  [36m[22m[24m  django/contrib/sessions/serializers.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           15┆ return pickle.dumps(obj, pickle.HIGHEST_PROTOCOL)
            ⋮┆----------------------------------------
           18┆ return pickle.loads(data)
                                                   
  [36m[22m[24m  django/contrib/sitemaps/views.py[0m
    ❯❱ [1mpython.django.security.injection.tainted-url-host.tainted-url-host[0m
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server runnig this code can access. (This is called server-side request forgery, 
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the
          correct host.                                                                                       
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
           36┆ absolute_url = '%s://%s%s' % (protocol, req_site.domain, sitemap_url)
                                                   
  [36m[22m[24m  django/core/cache/backends/db.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           61┆ cursor.execute("SELECT cache_key, value, expires FROM %s "
           62┆                "WHERE cache_key = %%s" % table, [key])
            ⋮┆----------------------------------------
           77┆ cursor.execute("DELETE FROM %s "
           78┆                "WHERE cache_key = %%s" % table, [key])
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           82┆ return pickle.loads(base64.b64decode(force_bytes(value)))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          101┆ cursor.execute("SELECT COUNT(*) FROM %s" % table)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          101┆ cursor.execute("SELECT COUNT(*) FROM %s" % table)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          114┆ pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          126┆ cursor.execute("SELECT cache_key, expires FROM %s "
          127┆                "WHERE cache_key = %%s" % table, [key])
            ⋮┆----------------------------------------
          139┆ cursor.execute("UPDATE %s SET value = %%s, expires = %%s "
          140┆                "WHERE cache_key = %%s" % table,
          141┆                [b64encoded, exp, key])
            ⋮┆----------------------------------------
          143┆ cursor.execute("INSERT INTO %s (cache_key, value, expires) "
          144┆                "VALUES (%%s, %%s, %%s)" % table,
          145┆                [key, b64encoded, exp])
            ⋮┆----------------------------------------
          161┆ cursor.execute("DELETE FROM %s WHERE cache_key = %%s" % table, [key])
            ⋮┆----------------------------------------
          178┆ cursor.execute("SELECT cache_key FROM %s "
          179┆                "WHERE cache_key = %%s and expires > %%s" % table,
          180┆                [key, connection.ops.adapt_datetimefield_value(now)])
            ⋮┆----------------------------------------
          189┆ cursor.execute("DELETE FROM %s WHERE expires < %%s" % table,
          190┆                [connection.ops.adapt_datetimefield_value(now)])
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          191┆ cursor.execute("SELECT COUNT(*) FROM %s" % table)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          191┆ cursor.execute("SELECT COUNT(*) FROM %s" % table)
            ⋮┆----------------------------------------
          195┆ cursor.execute(
          196┆     connection.ops.cache_key_culling_sql() % table,
          197┆     [cull_num])
            ⋮┆----------------------------------------
          198┆ cursor.execute("DELETE FROM %s "
          199┆                "WHERE cache_key < %%s" % table,
          200┆                [cursor.fetchone()[0]])
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          207┆ cursor.execute('DELETE FROM %s' % table)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          207┆ cursor.execute('DELETE FROM %s' % table)
                                                          
  [36m[22m[24m  django/core/cache/backends/filebased.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           42┆ return pickle.loads(zlib.decompress(f.read()))
            ⋮┆----------------------------------------
           57┆ f.write(pickle.dumps(expiry, pickle.HIGHEST_PROTOCOL))
            ⋮┆----------------------------------------
           58┆ f.write(zlib.compress(pickle.dumps(value, pickle.HIGHEST_PROTOCOL)))
            ⋮┆----------------------------------------
          138┆ exp = pickle.load(f)
                                                       
  [36m[22m[24m  django/core/cache/backends/locmem.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           38┆ pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
            ⋮┆----------------------------------------
           54┆ return pickle.loads(pickled)
            ⋮┆----------------------------------------
           75┆ pickled = pickle.dumps(value, pickle.HIGHEST_PROTOCOL)
            ⋮┆----------------------------------------
           86┆ pickled = pickle.dumps(new_value, pickle.HIGHEST_PROTOCOL)
                                                     
  [36m[22m[24m  django/core/management/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           40┆ module = import_module('%s.management.commands.%s' % (app_name, name))
                                                           
  [36m[22m[24m  django/core/management/commands/shell.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           85┆ exec(compile(handle.read(), pythonrc, 'exec'), imported_objects)
            ⋮┆----------------------------------------
          100┆ exec(options['command'])
                                                              
  [36m[22m[24m  django/core/management/commands/startapp.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           19┆ import_module(app_name)
                                                                  
  [36m[22m[24m  django/core/management/commands/startproject.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           21┆ import_module(project_name)
                                                      
  [36m[22m[24m  django/core/serializers/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           71┆ module = importlib.import_module(serializer_module)
                                                      
  [36m[22m[24m  django/db/backends/base/creation.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          167┆ cursor.execute(
          168┆     "CREATE DATABASE %s %s" % (qn(test_database_name), suffix))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          167┆ cursor.execute(
          168┆     "CREATE DATABASE %s %s" % (qn(test_database_name), suffix))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          187┆ cursor.execute(
          188┆     "DROP DATABASE %s" % qn(test_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          187┆ cursor.execute(
          188┆     "DROP DATABASE %s" % qn(test_database_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          189┆ cursor.execute(
          190┆     "CREATE DATABASE %s %s" % (qn(test_database_name),
          191┆                                suffix))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          189┆ cursor.execute(
          190┆     "CREATE DATABASE %s %s" % (qn(test_database_name),
          191┆                                suffix))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          282┆ cursor.execute("DROP DATABASE %s"
          283┆                % self.connection.ops.quote_name(test_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          282┆ cursor.execute("DROP DATABASE %s"
          283┆                % self.connection.ops.quote_name(test_database_name))
                                                        
  [36m[22m[24m  django/db/backends/base/operations.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          307┆ self._cache = import_module(self.compiler_module)
                                                    
  [36m[22m[24m  django/db/backends/base/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          285┆ self.execute(sql, params or None)
            ⋮┆----------------------------------------
          305┆ self.execute(self.sql_delete_table % {
          306┆     "table": self.quote_name(model._meta.db_table),
          307┆ })
            ⋮┆----------------------------------------
          358┆ self.execute(self.sql_rename_table % {
          359┆     "old_table": self.quote_name(old_db_table),
          360┆     "new_table": self.quote_name(new_db_table),
          361┆ })
            ⋮┆----------------------------------------
          367┆ self.execute(self.sql_retablespace_table % {
          368┆     "table": self.quote_name(model._meta.db_table),
          369┆     "old_tablespace": self.quote_name(old_db_tablespace),
          370┆     "new_tablespace": self.quote_name(new_db_tablespace),
          371┆ })
            ⋮┆----------------------------------------
          397┆ self.execute(sql, params)
            ⋮┆----------------------------------------
          407┆ self.execute(sql)
            ⋮┆----------------------------------------
          439┆ self.execute(sql)
            ⋮┆----------------------------------------
          630┆ self.execute(
          631┆     self.sql_alter_column % {
          632┆         "table": self.quote_name(model._meta.db_table),
          633┆         "changes": sql,
          634┆     },
          635┆     params,
          636┆ )
            ⋮┆----------------------------------------
          639┆ self.execute(
          640┆     self.sql_update_with_default % {
          641┆         "table": self.quote_name(model._meta.db_table),
          642┆         "column": self.quote_name(new_field.column),
          643┆         "default": "%s",
          644┆     },
          645┆     [new_default],
          646┆ )
            ⋮┆----------------------------------------
          650┆ self.execute(
          651┆     self.sql_alter_column % {
          652┆         "table": self.quote_name(model._meta.db_table),
          653┆         "changes": sql,
          654┆     },
          655┆     params,
          656┆ )
            ⋮┆----------------------------------------
          689┆ self.execute(
          690┆     self.sql_create_pk % {
          691┆         "table": self.quote_name(model._meta.db_table),
          692┆         "name": self.quote_name(self._create_index_name(model, [new_field.column],
               suffix="_pk")),                                                                   
          693┆         "columns": self.quote_name(new_field.column),
          694┆     }
          695┆ )
            ⋮┆----------------------------------------
          705┆ self.execute(
          706┆     self.sql_alter_column % {
          707┆         "table": self.quote_name(new_rel.related_model._meta.db_table),
          708┆         "changes": fragment[0],
          709┆     },
          710┆     fragment[1],
          711┆ )
            ⋮┆----------------------------------------
          726┆ self.execute(
          727┆     self.sql_create_check % {
          728┆         "table": self.quote_name(model._meta.db_table),
          729┆         "name": self.quote_name(self._create_index_name(model, [new_field.column],
               suffix="_check")),                                                                
          730┆         "column": self.quote_name(new_field.column),
          731┆         "check": new_db_params['check'],
          732┆     }
          733┆ )
            ⋮┆----------------------------------------
          743┆ self.execute(sql)
                                                   
  [36m[22m[24m  django/db/backends/mysql/base.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          337┆ cursor.execute("""
          338┆     SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING
          339┆     LEFT JOIN `%s` as REFERRED
          340┆     ON (REFERRING.`%s` = REFERRED.`%s`)
          341┆     WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL"""
          342┆     % (primary_key_column_name, column_name, table_name, referenced_table_name,
          343┆     column_name, referenced_column_name, column_name, referenced_column_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          337┆ cursor.execute("""
          338┆     SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING
          339┆     LEFT JOIN `%s` as REFERRED
          340┆     ON (REFERRING.`%s` = REFERRED.`%s`)
          341┆     WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL"""
          342┆     % (primary_key_column_name, column_name, table_name, referenced_table_name,
          343┆     column_name, referenced_column_name, column_name, referenced_column_name))
                                                       
  [36m[22m[24m  django/db/backends/mysql/compiler.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
            8┆ sql, params = self.as_sql()
                                                       
  [36m[22m[24m  django/db/backends/mysql/creation.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           27┆ cursor.execute("CREATE DATABASE %s" % qn(target_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           27┆ cursor.execute("CREATE DATABASE %s" % qn(target_database_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           36┆ cursor.execute("DROP DATABASE %s" % qn(target_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           36┆ cursor.execute("DROP DATABASE %s" % qn(target_database_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           37┆ cursor.execute("CREATE DATABASE %s" % qn(target_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           37┆ cursor.execute("CREATE DATABASE %s" % qn(target_database_name))
                                                            
  [36m[22m[24m  django/db/backends/mysql/introspection.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           73┆ cursor.execute("SELECT * FROM %s LIMIT 1" % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           73┆ cursor.execute("SELECT * FROM %s LIMIT 1" % self.connection.ops.quote_name(table_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          121┆ cursor.execute("SHOW INDEX FROM %s" % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          121┆ cursor.execute("SHOW INDEX FROM %s" % self.connection.ops.quote_name(table_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          199┆ cursor.execute("SHOW INDEX FROM %s" % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          199┆ cursor.execute("SHOW INDEX FROM %s" % self.connection.ops.quote_name(table_name))
                                                     
  [36m[22m[24m  django/db/backends/mysql/schema.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           53┆ self.execute('UPDATE %(table)s SET %(column)s = %%s' % {
           54┆     'table': self.quote_name(model._meta.db_table),
           55┆     'column': self.quote_name(field.column),
           56┆ }, [effective_default])
                                                    
  [36m[22m[24m  django/db/backends/oracle/base.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          229┆ cursor.execute(
          230┆     "ALTER SESSION SET NLS_DATE_FORMAT = 'YYYY-MM-DD HH24:MI:SS'"
          231┆     " NLS_TIMESTAMP_FORMAT = 'YYYY-MM-DD HH24:MI:SS.FF'"
          232┆     + (" TIME_ZONE = 'UTC'" if settings.USE_TZ else ''))
            ⋮┆----------------------------------------
          242┆ cursor.execute("SELECT 1 FROM DUAL WHERE DUMMY %s"
          243┆                % self._standard_operators['contains'],
          244┆                ['X'])
                                                        
  [36m[22m[24m  django/db/backends/oracle/compiler.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(SQLCompiler, self)'' calling ''as_sql(...).'' This could lead  
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           20┆ sql, params = super(SQLCompiler, self).as_sql(
           21┆     with_limits=False,
           22┆     with_col_aliases=with_col_aliases,
           23┆     subquery=subquery,
           24┆ )
            ⋮┆----------------------------------------
           26┆ sql, params = super(SQLCompiler, self).as_sql(
           27┆     with_limits=False,
           28┆     with_col_aliases=True,
           29┆     subquery=subquery,
           30┆ )
                                                        
  [36m[22m[24m  django/db/backends/oracle/creation.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          257┆ cursor.execute(stmt)
                                                         
  [36m[22m[24m  django/db/backends/oracle/functions.py[0m
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: IntervalToSeconds. Extending expressions in this way could 
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
            4┆ class IntervalToSeconds(Func):
            5┆     function = ''
            6┆     template = """
            7┆     EXTRACT(day from %(expressions)s) * 86400 +
            8┆     EXTRACT(hour from %(expressions)s) * 3600 +
            9┆     EXTRACT(minute from %(expressions)s) * 60 +
           10┆     EXTRACT(second from %(expressions)s)
           11┆     """
           12┆
           13┆     def __init__(self, expression, **extra):
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: SecondsToInterval. Extending expressions in this way could 
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
           18┆ class SecondsToInterval(Func):
           19┆     function = 'NUMTODSINTERVAL'
           20┆     template = "%(function)s(%(expressions)s, 'SECOND')"
           21┆
           22┆     def __init__(self, expression, **extra):
           23┆         output_field = extra.pop('output_field', DurationField())
           24┆         super(SecondsToInterval, self).__init__(expression, output_field=output_field,
               **extra)                                                                              
                                                             
  [36m[22m[24m  django/db/backends/oracle/introspection.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           61┆ cursor.execute("SELECT * FROM {} WHERE ROWNUM < 2 AND {} > 0".format(
           62┆     self.connection.ops.quote_name(table_name),
           63┆     self.cache_bust_counter))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           61┆ cursor.execute("SELECT * FROM {} WHERE ROWNUM < 2 AND {} > 0".format(
           62┆     self.connection.ops.quote_name(table_name),
           63┆     self.cache_bust_counter))
                                                          
  [36m[22m[24m  django/db/backends/oracle/operations.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          258┆ cursor.execute('SELECT "%s".currval FROM dual' % sq_name)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          258┆ cursor.execute('SELECT "%s".currval FROM dual' % sq_name)
                                                      
  [36m[22m[24m  django/db/backends/oracle/schema.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           39┆ self.execute("""
           40┆     DECLARE
           41┆         i INTEGER;
           42┆     BEGIN
           43┆         SELECT COUNT(*) INTO i FROM USER_CATALOG
           44┆             WHERE TABLE_NAME = '%(sq_name)s' AND TABLE_TYPE = 'SEQUENCE';
           45┆         IF i = 1 THEN
           46┆             EXECUTE IMMEDIATE 'DROP SEQUENCE "%(sq_name)s"';
           47┆         END IF;
           48┆     END;
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           39┆ self.execute("""
           40┆     DECLARE
           41┆         i INTEGER;
           42┆     BEGIN
           43┆         SELECT COUNT(*) INTO i FROM USER_CATALOG
           44┆             WHERE TABLE_NAME = '%(sq_name)s' AND TABLE_TYPE = 'SEQUENCE';
           45┆         IF i = 1 THEN
           46┆             EXECUTE IMMEDIATE 'DROP SEQUENCE "%(sq_name)s"';
           47┆         END IF;
           48┆     END;
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           96┆ self.execute("UPDATE %s set %s=%s" % (
           97┆     self.quote_name(model._meta.db_table),
           98┆     self.quote_name(new_temp_field.column),
           99┆     new_value,
          100┆ ))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           96┆ self.execute("UPDATE %s set %s=%s" % (
           97┆     self.quote_name(model._meta.db_table),
           98┆     self.quote_name(new_temp_field.column),
           99┆     new_value,
          100┆ ))
                                                            
  [36m[22m[24m  django/db/backends/postgresql/creation.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           28┆ cursor.execute("CREATE DATABASE %s WITH TEMPLATE %s" % (
           29┆     qn(target_database_name), qn(source_database_name)))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           28┆ cursor.execute("CREATE DATABASE %s WITH TEMPLATE %s" % (
           29┆     qn(target_database_name), qn(source_database_name)))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           38┆ cursor.execute("DROP DATABASE %s" % qn(target_database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           38┆ cursor.execute("DROP DATABASE %s" % qn(target_database_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           39┆ cursor.execute("CREATE DATABASE %s WITH TEMPLATE %s" % (
           40┆     qn(target_database_name), qn(source_database_name)))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           39┆ cursor.execute("CREATE DATABASE %s WITH TEMPLATE %s" % (
           40┆     qn(target_database_name), qn(source_database_name)))
                                                                 
  [36m[22m[24m  django/db/backends/postgresql/introspection.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           80┆ cursor.execute("SELECT * FROM %s LIMIT 1" % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           80┆ cursor.execute("SELECT * FROM %s LIMIT 1" % self.connection.ops.quote_name(table_name))
                                                              
  [36m[22m[24m  django/db/backends/postgresql/operations.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           82┆ cursor.execute("SELECT CURRVAL(pg_get_serial_sequence('%s','%s'))" % (
           83┆     self.quote_name(table_name), pk_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           82┆ cursor.execute("SELECT CURRVAL(pg_get_serial_sequence('%s','%s'))" % (
           83┆     self.quote_name(table_name), pk_name))
                                                     
  [36m[22m[24m  django/db/backends/sqlite3/base.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          285┆ cursor.execute("""
          286┆     SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING
          287┆     LEFT JOIN `%s` as REFERRED
          288┆     ON (REFERRING.`%s` = REFERRED.`%s`)
          289┆     WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL"""
          290┆     % (primary_key_column_name, column_name, table_name, referenced_table_name,
          291┆     column_name, referenced_column_name, column_name, referenced_column_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          285┆ cursor.execute("""
          286┆     SELECT REFERRING.`%s`, REFERRING.`%s` FROM `%s` as REFERRING
          287┆     LEFT JOIN `%s` as REFERRED
          288┆     ON (REFERRING.`%s` = REFERRED.`%s`)
          289┆     WHERE REFERRING.`%s` IS NOT NULL AND REFERRED.`%s` IS NULL"""
          290┆     % (primary_key_column_name, column_name, table_name, referenced_table_name,
          291┆     column_name, referenced_column_name, column_name, referenced_column_name))
                                                              
  [36m[22m[24m  django/db/backends/sqlite3/introspection.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          191┆ cursor.execute('PRAGMA index_list(%s)' % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          191┆ cursor.execute('PRAGMA index_list(%s)' % self.connection.ops.quote_name(table_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          194┆ cursor.execute('PRAGMA index_info(%s)' % self.connection.ops.quote_name(index))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          194┆ cursor.execute('PRAGMA index_info(%s)' % self.connection.ops.quote_name(index))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          223┆ cursor.execute('PRAGMA table_info(%s)' % self.connection.ops.quote_name(name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          223┆ cursor.execute('PRAGMA table_info(%s)' % self.connection.ops.quote_name(name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          240┆ cursor.execute("PRAGMA index_list(%s)" % self.connection.ops.quote_name(table_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          240┆ cursor.execute("PRAGMA index_list(%s)" % self.connection.ops.quote_name(table_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          246┆ cursor.execute('PRAGMA index_info(%s)' % self.connection.ops.quote_name(index))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          246┆ cursor.execute('PRAGMA index_info(%s)' % self.connection.ops.quote_name(index))
                                                           
  [36m[22m[24m  django/db/backends/sqlite3/operations.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          129┆ return cursor.execute(sql, params).fetchone()
                                                       
  [36m[22m[24m  django/db/backends/sqlite3/schema.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           33┆ c.execute('PRAGMA foreign_keys = %s' % int(self._initial_pragma_fk))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           33┆ c.execute('PRAGMA foreign_keys = %s' % int(self._initial_pragma_fk))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          185┆ self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
          186┆     self.quote_name(temp_model._meta.db_table),
          187┆     ', '.join(self.quote_name(x) for x, y in field_maps),
          188┆     ', '.join(y for x, y in field_maps),
          189┆     self.quote_name(model._meta.db_table),
          190┆ ))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          185┆ self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
          186┆     self.quote_name(temp_model._meta.db_table),
          187┆     ', '.join(self.quote_name(x) for x, y in field_maps),
          188┆     ', '.join(y for x, y in field_maps),
          189┆     self.quote_name(model._meta.db_table),
          190┆ ))
            ⋮┆----------------------------------------
          208┆ self.execute(self.sql_delete_table % {
          209┆     "table": self.quote_name(model._meta.db_table),
          210┆ })
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          284┆ self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
          285┆     self.quote_name(new_field.remote_field.through._meta.db_table),
          286┆     ', '.join([
          287┆         "id",
          288┆         new_field.m2m_column_name(),
          289┆         new_field.m2m_reverse_name(),
          290┆     ]),
          291┆     ', '.join([
          292┆         "id",
          293┆         old_field.m2m_column_name(),
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          284┆ self.execute("INSERT INTO %s (%s) SELECT %s FROM %s" % (
          285┆     self.quote_name(new_field.remote_field.through._meta.db_table),
          286┆     ', '.join([
          287┆         "id",
          288┆         new_field.m2m_column_name(),
          289┆         new_field.m2m_reverse_name(),
          290┆     ]),
          291┆     ', '.join([
          292┆         "id",
          293┆         old_field.m2m_column_name(),
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
                                                 
  [36m[22m[24m  django/db/migrations/loader.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           74┆ module = import_module(module_name)
            ⋮┆----------------------------------------
          105┆ migration_module = import_module("%s.%s" % (module_name, migration_name))
                                                     
  [36m[22m[24m  django/db/migrations/questioner.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           45┆ migrations_module = importlib.import_module(migrations_import_path)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          121┆ return eval(code, {}, {"datetime": datetime_safe, "timezone": timezone})
                                                     
  [36m[22m[24m  django/db/migrations/serializer.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          174┆ module = import_module(module_name)
                                                 
  [36m[22m[24m  django/db/migrations/writer.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          235┆ migrations_module = import_module(migrations_package_name)
            ⋮┆----------------------------------------
          256┆ base_module = import_module(".".join(existing_dirs))
                                                 
  [36m[22m[24m  django/db/models/aggregates.py[0m
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Aggregate. Extending expressions in this way could         
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
           13┆ class Aggregate(Func):
           14┆     contains_aggregate = True
           15┆     name = None
           16┆
           17┆     def resolve_expression(self, query=None, allow_joins=True, reuse=None, summarize=False,
               for_save=False):                                                                           
           18┆         # Aggregates are not allowed in UPDATE queries, so ignore for_save
           19┆         c = super(Aggregate, self).resolve_expression(query, allow_joins, reuse, summarize)
           20┆         if not summarize:
           21┆             expressions = c.get_source_expressions()
           22┆             for index, expr in enumerate(expressions):
             [hid 15 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Avg, self)'' calling ''as_sql(...).'' This could lead to SQL  
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           55┆ return super(Avg, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Sum, self)'' calling ''as_sql(...).'' This could lead to SQL  
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          123┆ return super(Sum, self).as_sql(compiler, connection)
                                                  
  [36m[22m[24m  django/db/models/expressions.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''DurationExpression(self.lhs, self.connector, self.rhs)'' calling  
          ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating    
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/b7bW                                                                     
                                                                                                           
          400┆ return DurationExpression(self.lhs, self.connector, self.rhs).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''TemporalSubtraction(self.lhs, self.rhs)'' calling ''as_sql(...).''
          This could lead to SQL injection, which can result in attackers exfiltrating sensitive data.     
          Instead, ensure no user input enters this function or that user input is properly sanitized.     
          Details: https://sg.run/b7bW                                                                     
                                                                                                           
          404┆ return TemporalSubtraction(self.lhs, self.rhs).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          554┆ sql, params = self.as_sql(*args, **kwargs)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(DurationValue, self)'' calling ''as_sql(...).'' This could lead
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          618┆ return super(DurationValue, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self.expression'' calling ''as_sql(...).'' This could lead to SQL   
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          739┆ return self.expression.as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self.col'' calling ''as_sql(...).'' This could lead to SQL injection,
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          905┆ sql, params = self.col.as_sql(compiler, connection)
            ⋮┆----------------------------------------
          956┆ sql, params = self.col.as_sql(compiler, connection)
                                                      
  [36m[22m[24m  django/db/models/fields/__init__.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''value'' calling ''as_sql(...).'' This could lead to SQL injection,   
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          767┆ sql, params = value.as_sql()
                                                                 
  [36m[22m[24m  django/db/models/fields/related_descriptors.py[0m
    ❯❱ [1mpython.django.security.audit.query-set-extra.avoid-query-set-extra[0m
          QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL
          injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the   
          Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.                      
          Details: https://sg.run/kXZP                                                                        
                                                                                                              
          810┆ queryset = queryset.extra(select={
          811┆     '_prefetch_related_val_%s' % f.attname:
          812┆     '%s.%s' % (qn(join_table), qn(f.column)) for f in fk.local_related_fields})
                                                             
  [36m[22m[24m  django/db/models/fields/related_lookups.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''root_constraint'' calling ''as_sql(...).'' This could lead to SQL   
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           81┆ return root_constraint.as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(RelatedIn, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user  
          input enters this function or that user input is properly sanitized.                               
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
           83┆ return super(RelatedIn, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''root_constraint'' calling ''as_sql(...).'' This could lead to SQL   
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          113┆ return root_constraint.as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(RelatedLookupMixin, self)'' calling ''as_sql(...).'' This could
          lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no
          user input enters this function or that user input is properly sanitized.                           
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          114┆ return super(RelatedLookupMixin, self).as_sql(compiler, connection)
                                                
  [36m[22m[24m  django/db/models/functions.py[0m
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Coalesce. Extending expressions in this way could          
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
            9┆ class Coalesce(Func):
           10┆     """
           11┆     Chooses, from left to right, the first non-null expression and returns it.
           12┆     """
           13┆     function = 'COALESCE'
           14┆
           15┆     def __init__(self, *expressions, **extra):
           16┆         if len(expressions) < 2:
           17┆             raise ValueError('Coalesce must take at least two expressions')
           18┆         super(Coalesce, self).__init__(*expressions, **extra)
             [hid 12 additional lines, adjust with --max-lines-per-finding] 
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: ToNCLOB. Extending expressions in this way could inadvertently
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data.   
          Instead, ensure no user input enters this function or that user input is properly sanitized.        
          Details: https://sg.run/N4Ay                                                                        
                                                                                                              
           24┆ class ToNCLOB(Func):
           25┆     function = 'TO_NCLOB'
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Coalesce, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user 
          input enters this function or that user input is properly sanitized.                              
          Details: https://sg.run/b7bW                                                                      
                                                                                                            
           30┆ return super(Coalesce, self).as_sql(compiler, connection)
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: ConcatPair. Extending expressions in this way could        
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
           33┆ class ConcatPair(Func):
           34┆     """
           35┆     A helper class that concatenates two arguments together. This is used
           36┆     by `Concat` because not all backend databases support more than two
           37┆     arguments.
           38┆     """
           39┆     function = 'CONCAT'
           40┆
           41┆     def __init__(self, left, right, **extra):
           42┆         super(ConcatPair, self).__init__(left, right, **extra)
             [hid 21 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ConcatPair, coalesced)'' calling ''as_sql(...).'' This could   
          lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no
          user input enters this function or that user input is properly sanitized.                           
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           48┆ return super(ConcatPair, coalesced).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(ConcatPair, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user   
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
           54┆ return super(ConcatPair, self).as_sql(compiler, connection)
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Concat. Extending expressions in this way could inadvertently
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data.  
          Instead, ensure no user input enters this function or that user input is properly sanitized.       
          Details: https://sg.run/N4Ay                                                                       
                                                                                                             
           66┆ class Concat(Func):
           67┆     """
           68┆     Concatenates text fields together. Backends that result in an entire
           69┆     null expression when any arguments are null will wrap each argument in
           70┆     coalesce functions to ensure we always get a non-null result.
           71┆     """
           72┆     function = None
           73┆     template = "%(expressions)s"
           74┆
           75┆     def __init__(self, *expressions, **extra):
             [hid 12 additional lines, adjust with --max-lines-per-finding] 
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Greatest. Extending expressions in this way could          
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
           90┆ class Greatest(Func):
           91┆     """
           92┆     Chooses the maximum expression and returns it.
           93┆
           94┆     If any expression is null the return value is database-specific:
           95┆     On Postgres, the maximum not-null expression is returned.
           96┆     On MySQL, Oracle, and SQLite, if any expression is null, null is returned.
           97┆     """
           98┆     function = 'GREATEST'
           99┆
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Greatest, self)'' calling ''as_sql(...).'' This could lead to
          SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user 
          input enters this function or that user input is properly sanitized.                              
          Details: https://sg.run/b7bW                                                                      
                                                                                                            
          107┆ return super(Greatest, self).as_sql(compiler, connection, function='MAX')
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Least. Extending expressions in this way could inadvertently
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data. 
          Instead, ensure no user input enters this function or that user input is properly sanitized.      
          Details: https://sg.run/N4Ay                                                                      
                                                                                                            
          110┆ class Least(Func):
          111┆     """
          112┆     Chooses the minimum expression and returns it.
          113┆
          114┆     If any expression is null the return value is database-specific:
          115┆     On Postgres, the minimum not-null expression is returned.
          116┆     On MySQL, Oracle, and SQLite, if any expression is null, null is returned.
          117┆     """
          118┆     function = 'LEAST'
          119┆
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Least, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          127┆ return super(Least, self).as_sql(compiler, connection, function='MIN')
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Length, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input 
          enters this function or that user input is properly sanitized.                                      
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          141┆ return super(Length, self).as_sql(compiler, connection)
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Now. Extending expressions in this way could inadvertently 
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data.
          Instead, ensure no user input enters this function or that user input is properly sanitized.     
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
          149┆ class Now(Func):
          150┆     template = 'CURRENT_TIMESTAMP'
          151┆
          152┆     def __init__(self, output_field=None, **extra):
          153┆         if output_field is None:
          154┆             output_field = DateTimeField()
          155┆         super(Now, self).__init__(output_field=output_field, **extra)
          156┆
          157┆     def as_postgresql(self, compiler, connection):
          158┆         # Postgres' CURRENT_TIMESTAMP means "the time at the start of the
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          162┆ return self.as_sql(compiler, connection)
   
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Substr. Extending expressions in this way could inadvertently
          lead to a SQL injection vulnerability, which can result in attackers exfiltrating sensitive data.  
          Instead, ensure no user input enters this function or that user input is properly sanitized.       
          Details: https://sg.run/N4Ay                                                                       
                                                                                                             
          165┆ class Substr(Func):
          166┆     function = 'SUBSTRING'
          167┆
          168┆     def __init__(self, expression, pos, length=None, **extra):
          169┆         """
          170┆         expression: the name of a field, or an expression returning a string
          171┆         pos: an integer > 0, or an expression returning an integer
          172┆         length: an optional number of characters to return
          173┆         """
          174┆         if not hasattr(pos, 'resolve_expression'):
             [hid 17 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Substr, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input 
          enters this function or that user input is properly sanitized.                                      
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          187┆ return super(Substr, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
          191┆ return super(Substr, self).as_sql(compiler, connection)
                                              
  [36m[22m[24m  django/db/models/lookups.py[0m
    ❯❱ [1mpython.django.security.audit.extends-custom-expression.extends-custom-expression[0m
          Found extension of custom expression: Transform. Extending expressions in this way could         
          inadvertently lead to a SQL injection vulnerability, which can result in attackers exfiltrating  
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/N4Ay                                                                     
                                                                                                           
          120┆ class Transform(RegisterLookupMixin, Func):
          121┆     """
          122┆     RegisterLookupMixin() is first so that get_lookup() and get_transform()
          123┆     first examine self and then check output_field.
          124┆     """
          125┆     bilateral = False
          126┆     arity = 1
          127┆
          128┆     @property
          129┆     def lhs(self):
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(In, self)'' calling ''as_sql(...).'' This could lead to SQL   
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          238┆ return super(In, self).as_sql(compiler, connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''super(Regex, self)'' calling ''as_sql(...).'' This could lead to SQL
          injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user input
          enters this function or that user input is properly sanitized.                                     
          Details: https://sg.run/b7bW                                                                       
                                                                                                             
          388┆ return super(Regex, self).as_sql(compiler, connection)
                                              
  [36m[22m[24m  django/db/models/manager.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           99┆ module = import_module(module_name)
                                                   
  [36m[22m[24m  django/db/models/sql/compiler.py[0m
    ❯❱ [1mpython.django.security.audit.raw-query.avoid-raw-sql[0m
          Detected the use of 'RawSQL' or 'raw' indicating the execution of a non-parameterized SQL query.    
          This could lead to a SQL injection and therefore protected information could be leaked. Instead, use
          Django ORM and parameterized queries before raw SQL. An example of using the Django ORM is:         
          `People.objects.get(name='Bob')`                                                                    
          Details: https://sg.run/weDA                                                                        
                                                                                                              
          189┆ select.append((RawSQL(sql, params), alias))
            ⋮┆----------------------------------------
          284┆ RawSQL('%s.%s' % (self.quote_name_unless_alias(table), col), []),
            ⋮┆----------------------------------------
          297┆ OrderBy(RawSQL(*self.query.extra[col]), descending=descending),
            ⋮┆----------------------------------------
          301┆ OrderBy(Ref(col, RawSQL(*self.query.extra[col])), descending=descending),
   
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''node'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          353┆ sql, params = node.as_sql(self, self.connection)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''obj.get_compiler(connection=self.connection)'' calling            
          ''as_sql(...).'' This could lead to SQL injection, which can result in attackers exfiltrating    
          sensitive data. Instead, ensure no user input enters this function or that user input is properly
          sanitized.                                                                                       
          Details: https://sg.run/b7bW                                                                     
                                                                                                           
          470┆ nested_sql = obj.get_compiler(connection=self.connection).as_sql(subquery=True)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self'' calling ''as_sql(...).'' This could lead to SQL injection,    
          which can result in attackers exfiltrating sensitive data. Instead, ensure no user input enters this
          function or that user input is properly sanitized.                                                  
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          824┆ sql, params = self.as_sql()
            ⋮┆----------------------------------------
          876┆ sql, params = self.as_sql()
            ⋮┆----------------------------------------
          885┆ sql, params = self.as_sql()
            ⋮┆----------------------------------------
          1046┆ for sql, params in self.as_sql():
                                                
  [36m[22m[24m  django/db/models/sql/query.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''self.get_compiler(DEFAULT_DB_ALIAS)'' calling ''as_sql(...).'' This
          could lead to SQL injection, which can result in attackers exfiltrating sensitive data. Instead,  
          ensure no user input enters this function or that user input is properly sanitized.               
          Details: https://sg.run/b7bW                                                                      
                                                                                                            
          233┆ return self.get_compiler(DEFAULT_DB_ALIAS).as_sql()
                                                     
  [36m[22m[24m  django/db/models/sql/subqueries.py[0m
    ❯❱ [1mpython.django.security.audit.custom-expression-as-sql.custom-expression-as-sql[0m
          Detected a Custom Expression ''query.get_compiler(using)'' calling ''as_sql(...).'' This could lead 
          to SQL injection, which can result in attackers exfiltrating sensitive data. Instead, ensure no user
          input enters this function or that user input is properly sanitized.                                
          Details: https://sg.run/b7bW                                                                        
                                                                                                              
          215┆ self.subquery, self.sub_params = query.get_compiler(using).as_sql(
          216┆     with_col_aliases=True,
          217┆     subquery=True,
          218┆ )
                                     
  [36m[22m[24m  django/db/utils.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          115┆ return import_module('%s.base' % backend_name)
                                             
  [36m[22m[24m  django/forms/boundfield.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           21┆ @html_safe
           22┆ @python_2_unicode_compatible
           23┆ class BoundField(object):
           24┆     "A Field plus data"
           25┆     def __init__(self, form, field, name):
           26┆         self.form = form
           27┆         self.field = field
           28┆         self.name = name
           29┆         self.html_name = form.add_prefix(name)
           30┆         self.html_initial_name = form.add_initial_prefix(name)
             [hid 197 additional lines, adjust with --max-lines-per-finding] 
           21┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          185┆ return mark_safe(contents)
                                        
  [36m[22m[24m  django/forms/forms.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           62┆ @html_safe
           63┆ @python_2_unicode_compatible
           64┆ class BaseForm(object):
           65┆     # This is the main implementation of all the Form logic. Note that this
           66┆     # class is different than Form. See the comments by the Form class for more
           67┆     # information. Any improvements to the form API should be made to *this*
           68┆     # class, not to the Form class.
           69┆     field_order = None
           70┆     prefix = None
           71┆
             [hid 404 additional lines, adjust with --max-lines-per-finding] 
           62┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          254┆ return mark_safe('\n'.join(output))
                                           
  [36m[22m[24m  django/forms/formsets.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           50┆ @html_safe
           51┆ @python_2_unicode_compatible
           52┆ class BaseFormSet(object):
           53┆     """
           54┆     A collection of instances of the same Form class.
           55┆     """
           56┆     def __init__(self, data=None, files=None, auto_id='id_%s', prefix=None,
           57┆                  initial=None, error_class=ErrorList, form_kwargs=None):
           58┆         self.is_bound = data is not None or files is not None
           59┆         self.prefix = prefix or self.get_default_prefix()
             [hid 365 additional lines, adjust with --max-lines-per-finding] 
           50┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          414┆ return mark_safe('\n'.join([six.text_type(self.management_form), forms]))
            ⋮┆----------------------------------------
          419┆ return mark_safe('\n'.join([six.text_type(self.management_form), forms]))
            ⋮┆----------------------------------------
          424┆ return mark_safe('\n'.join([six.text_type(self.management_form), forms]))
                                        
  [36m[22m[24m  django/forms/utils.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           52┆ @html_safe
           53┆ @python_2_unicode_compatible
           54┆ class ErrorDict(dict):
           55┆     """
           56┆     A collection of errors that knows how to display itself in various formats.
           57┆
           58┆     The dictionary keys are the field names, and the values are the errors.
           59┆     """
           60┆     def as_data(self):
           61┆         return {f: e.as_data() for f, e in self.items()}
             [hid 21 additional lines, adjust with --max-lines-per-finding] 
           52┆ @html_safe
            ⋮┆----------------------------------------
           85┆ @html_safe
           86┆ @python_2_unicode_compatible
           87┆ class ErrorList(UserList, list):
           88┆     """
           89┆     A collection of errors that knows how to display itself in various formats.
           90┆     """
           91┆     def __init__(self, initlist=None, error_class=None):
           92┆         super(ErrorList, self).__init__(initlist)
           93┆
           94┆         if error_class is None:
             [hid 62 additional lines, adjust with --max-lines-per-finding] 
           85┆ @html_safe
                                          
  [36m[22m[24m  django/forms/widgets.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
           40┆ @html_safe
           41┆ @python_2_unicode_compatible
           42┆ class Media(object):
           43┆     def __init__(self, media=None, **kwargs):
           44┆         if media:
           45┆             media_attrs = media.__dict__
           46┆         else:
           47┆             media_attrs = kwargs
           48┆
           49┆         self._css = {}
             [hid 65 additional lines, adjust with --max-lines-per-finding] 
           40┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           59┆ return mark_safe('\n'.join(chain(*[getattr(self, 'render_' + name)() for name in
               MEDIA_TYPES])))                                                                 
   
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
          159┆ @html_safe
          160┆ @python_2_unicode_compatible
          161┆ class SubWidget(object):
          162┆     """
          163┆     Some widgets are made of multiple HTML elements -- namely, RadioSelect.
          164┆     This is a class that represents the "inner" HTML element of a widget.
          165┆     """
          166┆     def __init__(self, parent_widget, name, value, attrs, choices):
          167┆         self.parent_widget = parent_widget
          168┆         self.name, self.value = name, value
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
          159┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          323┆ return mark_safe('\n'.join(inputs))
            ⋮┆----------------------------------------
          407┆ return mark_safe(template % substitutions)
            ⋮┆----------------------------------------
          526┆ return mark_safe('\n'.join(output))
            ⋮┆----------------------------------------
          598┆ return mark_safe('\n'.join(output))
   
    ❯❱ [1mpython.django.security.audit.xss.html-safe.html-safe[0m
          `html_safe()` add the `__html__` magic method to the provided class. The `__html__` method indicates
          to the Django template engine that the value is 'safe' for rendering. This means that normal HTML   
          escaping will not be applied to the return value. This exposes your application to cross-site       
          scripting (XSS) vulnerabilities. If you need to render raw HTML, consider instead using             
          `mark_safe()` which more clearly marks the intent to render raw HTML than a class with a magic      
          method.                                                                                             
          Details: https://sg.run/gLO0                                                                        
                                                                                                              
          606┆ @html_safe
          607┆ @python_2_unicode_compatible
          608┆ class ChoiceInput(SubWidget):
          609┆     """
          610┆     An object used by ChoiceFieldRenderer that represents a single
          611┆     <input type='$input_type'>.
          612┆     """
          613┆     input_type = None  # Subclasses must define this
          614┆
          615┆     def __init__(self, name, value, attrs, choice, index):
             [hid 35 additional lines, adjust with --max-lines-per-finding] 
          606┆ @html_safe
            ⋮┆----------------------------------------
          672┆ @html_safe
          673┆ @python_2_unicode_compatible
          674┆ class ChoiceFieldRenderer(object):
          675┆     """
          676┆     An object used by RadioSelect to enable customization of radio widgets.
          677┆     """
          678┆
          679┆     choice_input_class = None
          680┆     outer_html = '<ul{id_attr}>{content}</ul>'
          681┆     inner_html = '<li>{choice_value}{sub_widgets}</li>'
             [hid 45 additional lines, adjust with --max-lines-per-finding] 
          672┆ @html_safe
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          838┆ return mark_safe(self.format_output(output))
            ⋮┆----------------------------------------
          1004┆ return mark_safe('\n'.join(output))
                                              
  [36m[22m[24m  django/middleware/common.py[0m
    ❯❱ [1mpython.django.security.injection.tainted-url-host.tainted-url-host[0m
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server runnig this code can access. (This is called server-side request forgery, 
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the
          correct host.                                                                                       
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
           68┆ return self.response_redirect_class('%s://%s%s' % (request.scheme, host, path))
                                                
  [36m[22m[24m  django/middleware/security.py[0m
    ❯❱ [1mpython.django.security.injection.tainted-url-host.tainted-url-host[0m
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server runnig this code can access. (This is called server-side request forgery, 
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the
          correct host.                                                                                       
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
           24┆ "https://%s%s" % (host, request.get_full_path())
                                      
  [36m[22m[24m  django/shortcuts.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           25┆ return HttpResponse(content, content_type, status)
            ⋮┆----------------------------------------
           34┆ return HttpResponse(content, content_type, status)
                                                     
  [36m[22m[24m  django/template/backends/django.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           96┆ pkg = import_module(candidate)
            ⋮┆----------------------------------------
          115┆ module = import_module(entry[1])
                                          
  [36m[22m[24m  django/template/base.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          729┆ arg_vals.append(mark_safe(arg))
            ⋮┆----------------------------------------
          739┆ obj = mark_safe(new_obj)
            ⋮┆----------------------------------------
          824┆ self.literal = mark_safe(unescape_string_literal(var))
            ⋮┆----------------------------------------
          845┆ msgid = mark_safe(msgid) if is_safe else msgid
            ⋮┆----------------------------------------
          984┆ return mark_safe(''.join(bits))
                                                    
  [36m[22m[24m  django/template/defaultfilters.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           48┆ return mark_safe(func(*args, **kwargs))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
           63┆ @register.filter(is_safe=True)
           64┆ @stringfilter
           65┆ def addslashes(value):
           66┆     """
           67┆     Adds slashes before quotes. Useful for escaping strings in CSV, for
           68┆     example. Less useful for escaping JavaScript; use the ``escapejs``
           69┆     filter instead.
           70┆     """
           71┆     return value.replace('\\', '\\\\').replace('"', '\\"').replace("'", "\\'")
            ⋮┆----------------------------------------
           74┆ @register.filter(is_safe=True)
           75┆ @stringfilter
           76┆ def capfirst(value):
           77┆     """Capitalizes the first character of the value."""
           78┆     return value and value[0].upper() + value[1:]
            ⋮┆----------------------------------------
          101┆ @register.filter(is_safe=True)
          102┆ def floatformat(text, arg=-1):
          103┆     """
          104┆     Displays a float to a specified number of decimal places.
          105┆
          106┆     If called without an argument, it displays the floating point number with
          107┆     one decimal place -- but only if there's a decimal place to be displayed:
          108┆
          109┆     * num1 = 34.23234
          110┆     * num2 = 34.00000
             [hid 72 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          157┆ return mark_safe(formats.number_format('%d' % (int(d)), 0))
            ⋮┆----------------------------------------
          180┆ return mark_safe(formats.number_format(number, abs(p)))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          185┆ @register.filter(is_safe=True)
          186┆ @stringfilter
          187┆ def iriencode(value):
          188┆     """Escapes an IRI value for use in a URL."""
          189┆     return force_text(iri_to_uri(value))
            ⋮┆----------------------------------------
          192┆ @register.filter(is_safe=True, needs_autoescape=True)
          193┆ @stringfilter
          194┆ def linenumbers(value, autoescape=True):
          195┆     """Displays text with line numbers."""
          196┆     lines = value.split('\n')
          197┆     # Find the maximum width of the line count, for use with zero padding
          198┆     # string format command
          199┆     width = six.text_type(len(six.text_type(len(lines))))
          200┆     if not autoescape or isinstance(value, SafeData):
          201┆         for i, line in enumerate(lines):
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          206┆ return mark_safe('\n'.join(lines))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          209┆ @register.filter(is_safe=True)
          210┆ @stringfilter
          211┆ def lower(value):
          212┆     """Converts a string into all lowercase."""
          213┆     return value.lower()
            ⋮┆----------------------------------------
          228┆ @register.filter(is_safe=True)
          229┆ @stringfilter
          230┆ def slugify(value):
          231┆     """
          232┆     Converts to ASCII. Converts spaces to hyphens. Removes characters that
          233┆     aren't alphanumerics, underscores, or hyphens. Converts to lowercase.
          234┆     Also strips leading and trailing whitespace.
          235┆     """
          236┆     return _slugify(value)
            ⋮┆----------------------------------------
          239┆ @register.filter(is_safe=True)
          240┆ def stringformat(value, arg):
          241┆     """
          242┆     Formats the variable according to the arg, a string formatting specifier.
          243┆
          244┆     This specifier uses Python string formating syntax, with the exception that
          245┆     the leading "%" is dropped.
          246┆
          247┆     See http://docs.python.org/lib/typesseq-strings.html for documentation
          248┆     of Python string formatting
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          256┆ @register.filter(is_safe=True)
          257┆ @stringfilter
          258┆ def title(value):
          259┆     """Converts a string into titlecase."""
          260┆     t = re.sub("([a-z])'([A-Z])", lambda m: m.group(0).lower(), value.title())
          261┆     return re.sub("\d([A-Z])", lambda m: m.group(0).lower(), t)
            ⋮┆----------------------------------------
          264┆ @register.filter(is_safe=True)
          265┆ @stringfilter
          266┆ def truncatechars(value, arg):
          267┆     """
          268┆     Truncates a string after a certain number of characters.
          269┆
          270┆     Argument: Number of characters to truncate after.
          271┆     """
          272┆     try:
          273┆         length = int(arg)
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
          279┆ @register.filter(is_safe=True)
          280┆ @stringfilter
          281┆ def truncatechars_html(value, arg):
          282┆     """
          283┆     Truncates HTML after a certain number of chars.
          284┆
          285┆     Argument: Number of chars to truncate after.
          286┆
          287┆     Newlines in the HTML are preserved.
          288┆     """
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          296┆ @register.filter(is_safe=True)
          297┆ @stringfilter
          298┆ def truncatewords(value, arg):
          299┆     """
          300┆     Truncates a string after a certain number of words.
          301┆
          302┆     Argument: Number of words to truncate after.
          303┆
          304┆     Newlines within the string are removed.
          305┆     """
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          313┆ @register.filter(is_safe=True)
          314┆ @stringfilter
          315┆ def truncatewords_html(value, arg):
          316┆     """
          317┆     Truncates HTML after a certain number of words.
          318┆
          319┆     Argument: Number of words to truncate after.
          320┆
          321┆     Newlines in the HTML are preserved.
          322┆     """
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
          354┆ @register.filter(is_safe=True, needs_autoescape=True)
          355┆ @stringfilter
          356┆ def urlize(value, autoescape=True):
          357┆     """Converts URLs in plain text into clickable links."""
          358┆     return mark_safe(_urlize(value, nofollow=True, autoescape=autoescape))
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          358┆ return mark_safe(_urlize(value, nofollow=True, autoescape=autoescape))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          361┆ @register.filter(is_safe=True, needs_autoescape=True)
          362┆ @stringfilter
          363┆ def urlizetrunc(value, limit, autoescape=True):
          364┆     """
          365┆     Converts URLs into clickable links, truncating URLs to the given character
          366┆     limit, and adding 'rel=nofollow' attribute to discourage spamming.
          367┆
          368┆     Argument: Length to truncate URLs to.
          369┆     """
          370┆     return mark_safe(_urlize(value, trim_url_limit=int(limit), nofollow=True,
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          370┆ return mark_safe(_urlize(value, trim_url_limit=int(limit), nofollow=True,
          371┆                         autoescape=autoescape))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          381┆ @register.filter(is_safe=True)
          382┆ @stringfilter
          383┆ def wordwrap(value, arg):
          384┆     """
          385┆     Wraps words at specified line length.
          386┆
          387┆     Argument: number of characters to wrap the text at.
          388┆     """
          389┆     return wrap(value, int(arg))
            ⋮┆----------------------------------------
          392┆ @register.filter(is_safe=True)
          393┆ @stringfilter
          394┆ def ljust(value, arg):
          395┆     """
          396┆     Left-aligns the value in a field of a given width.
          397┆
          398┆     Argument: field size.
          399┆     """
          400┆     return value.ljust(int(arg))
            ⋮┆----------------------------------------
          403┆ @register.filter(is_safe=True)
          404┆ @stringfilter
          405┆ def rjust(value, arg):
          406┆     """
          407┆     Right-aligns the value in a field of a given width.
          408┆
          409┆     Argument: field size.
          410┆     """
          411┆     return value.rjust(int(arg))
            ⋮┆----------------------------------------
          414┆ @register.filter(is_safe=True)
          415┆ @stringfilter
          416┆ def center(value, arg):
          417┆     """Centers the value in a field of a given width."""
          418┆     return value.center(int(arg))
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          430┆ return mark_safe(value)
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          438┆ @register.filter("escape", is_safe=True)
          439┆ @stringfilter
          440┆ def escape_filter(value):
          441┆     """
          442┆     Marks the value as a string that should be auto-escaped.
          443┆     """
          444┆     return mark_for_escaping(value)
            ⋮┆----------------------------------------
          447┆ @register.filter(is_safe=True)
          448┆ @stringfilter
          449┆ def force_escape(value):
          450┆     """
          451┆     Escapes a string's HTML. This returns a new string containing the escaped
          452┆     characters (as opposed to "escape", which marks the content for later
          453┆     possible escaping).
          454┆     """
          455┆     return escape(value)
            ⋮┆----------------------------------------
          458┆ @register.filter("linebreaks", is_safe=True, needs_autoescape=True)
          459┆ @stringfilter
          460┆ def linebreaks_filter(value, autoescape=True):
          461┆     """
          462┆     Replaces line breaks in plain text with appropriate HTML; a single
          463┆     newline becomes an HTML line break (``<br />``) and a new line
          464┆     followed by a blank line becomes a paragraph break (``</p>``).
          465┆     """
          466┆     autoescape = autoescape and not isinstance(value, SafeData)
          467┆     return mark_safe(linebreaks(value, autoescape))
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          467┆ return mark_safe(linebreaks(value, autoescape))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          470┆ @register.filter(is_safe=True, needs_autoescape=True)
          471┆ @stringfilter
          472┆ def linebreaksbr(value, autoescape=True):
          473┆     """
          474┆     Converts all newlines in a piece of plain text to HTML line breaks
          475┆     (``<br />``).
          476┆     """
          477┆     autoescape = autoescape and not isinstance(value, SafeData)
          478┆     value = normalize_newlines(value)
          479┆     if autoescape:
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          481┆ return mark_safe(value.replace('\n', '<br />'))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          484┆ @register.filter(is_safe=True)
          485┆ @stringfilter
          486┆ def safe(value):
          487┆     """
          488┆     Marks the value as a string that should not be auto-escaped.
          489┆     """
          490┆     return mark_safe(value)
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          490┆ return mark_safe(value)
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          493┆ @register.filter(is_safe=True)
          494┆ def safeseq(value):
          495┆     """
          496┆     A "safe" filter for sequences. Marks each element in the sequence,
          497┆     individually, as safe, after converting them to unicode. Returns a list
          498┆     with the results.
          499┆     """
          500┆     return [mark_safe(force_text(obj)) for obj in value]
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          500┆ return [mark_safe(force_text(obj)) for obj in value]
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          503┆ @register.filter(is_safe=True)
          504┆ @stringfilter
          505┆ def striptags(value):
          506┆     """Strips all [X]HTML tags."""
          507┆     return strip_tags(value)
            ⋮┆----------------------------------------
          573┆ @register.filter(is_safe=True, needs_autoescape=True)
          574┆ def join(value, arg, autoescape=True):
          575┆     """
          576┆     Joins a list with a string, like Python's ``str.join(list)``.
          577┆     """
          578┆     value = map(force_text, value)
          579┆     if autoescape:
          580┆         value = [conditional_escape(v) for v in value]
          581┆     try:
          582┆         data = conditional_escape(arg).join(value)
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          585┆ return mark_safe(data)
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          588┆ @register.filter(is_safe=True)
          589┆ def last(value):
          590┆     "Returns the last item in a list"
          591┆     try:
          592┆         return value[-1]
          593┆     except IndexError:
          594┆         return ''
            ⋮┆----------------------------------------
          615┆ @register.filter(is_safe=True)
          616┆ def random(value):
          617┆     """Returns a random item from the list."""
          618┆     return random_module.choice(value)
            ⋮┆----------------------------------------
          621┆ @register.filter("slice", is_safe=True)
          622┆ def slice_filter(value, arg):
          623┆     """
          624┆     Returns a slice of the list.
          625┆
          626┆     Uses the same syntax as Python's list slicing; see
          627┆     http://www.diveintopython3.net/native-datatypes.html#slicinglists
          628┆     for an introduction.
          629┆     """
          630┆     try:
             [hid 10 additional lines, adjust with --max-lines-per-finding] 
          643┆ @register.filter(is_safe=True, needs_autoescape=True)
          644┆ def unordered_list(value, autoescape=True):
          645┆     """
          646┆     Recursively takes a self-nested list and returns an HTML unordered list --
          647┆     WITHOUT opening and closing <ul> tags.
          648┆
          649┆     The list is assumed to be in the proper format. For example, if ``var``
          650┆     contains: ``['States', ['Kansas', ['Lawrence', 'Topeka'], 'Illinois']]``,
          651┆     then ``{{ var|unordered_list }}`` would return::
          652┆
             [hid 55 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          707┆ return mark_safe(list_formatter(value))
   
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
          864┆ @register.filter(is_safe=True)
          865┆ def filesizeformat(bytes_):
          866┆     """
          867┆     Formats the value like a 'human-readable' file size (i.e. 13 KB, 4.1 MB,
          868┆     102 bytes, etc.).
          869┆     """
          870┆     try:
          871┆         bytes_ = float(bytes_)
          872┆     except (TypeError, ValueError, UnicodeDecodeError):
          873┆         value = ungettext("%(size)d byte", "%(size)d bytes", 0) % {'size': 0}
             [hid 31 additional lines, adjust with --max-lines-per-finding] 
          952┆ @register.filter("phone2numeric", is_safe=True)
          953┆ def phone2numeric_filter(value):
          954┆     """Takes a phone number and converts it in to its numerical equivalent."""
          955┆     return phone2numeric(value)
            ⋮┆----------------------------------------
          958┆ @register.filter(is_safe=True)
          959┆ def pprint(value):
          960┆     """A wrapper around pprint.pprint -- for debugging, really."""
          961┆     try:
          962┆         return pformat(value)
          963┆     except Exception as e:
          964┆         return "Error in formatting: %s: %s" % (e.__class__.__name__, force_text(e,
               errors="replace"))                                                                 
                                                 
  [36m[22m[24m  django/template/defaulttags.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           42┆ return mark_safe(output)
            ⋮┆----------------------------------------
          226┆ return mark_safe(''.join(force_text(n) for n in nodelist))
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          1397┆ {% blocktrans %}The width is: {{ width }}{% endblocktrans %}
                                             
  [36m[22m[24m  django/template/library.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          319┆ module = import_module(name)
                                                 
  [36m[22m[24m  django/template/loader_tags.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           83┆ return mark_safe(self.render(self.context))
                                                    
  [36m[22m[24m  django/template/loaders/cached.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(force_bytes('|'.join(values)))
           85┆ return hashlib.sha1(force_bytes('|'.join(values))).hexdigest()
                                              
  [36m[22m[24m  django/templatetags/i18n.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           94┆ value = mark_safe(value) if is_safe else value
   
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
          358┆ {% trans "this is a test" as var %}
          359┆ {{ var }}
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          424┆ {% blocktrans with bar=foo|filter boo=baz|filter %}
            ⋮┆----------------------------------------
          430┆ {% blocktrans count count=var|length %}
            ⋮┆----------------------------------------
          440┆ {% blocktrans with foo|filter as bar and baz|filter as boo %}
            ⋮┆----------------------------------------
          441┆ {% blocktrans count var|length as count %}
            ⋮┆----------------------------------------
          445┆ {% blocktrans with bar=foo|filter boo=baz|filter asvar var %}
            ⋮┆----------------------------------------
          452┆ {% blocktrans with bar=foo|filter context "greeting" %}
                                           
  [36m[22m[24m  django/urls/resolvers.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          290┆ return import_module(self.urlconf_name)
                                       
  [36m[22m[24m  django/urls/utils.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           30┆ mod = import_module(mod_name)
            ⋮┆----------------------------------------
           33┆ if submod and not module_has_submodule(import_module(parentmod), submod):
                                         
  [36m[22m[24m  django/utils/crypto.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(key_salt + secret)
           45┆ key = hashlib.sha1(key_salt + secret).digest()
                                              
  [36m[22m[24m  django/utils/deconstruct.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           34┆ module = import_module(module_name)
                                          
  [36m[22m[24m  django/utils/formats.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           86┆ yield import_module('%s.formats' % (location % loc))
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          198┆ return mark_safe(six.text_type(value))
                                       
  [36m[22m[24m  django/utils/html.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           56┆ return mark_safe(force_text(text).replace('&', '&amp;').replace('<', '&lt;')
           57┆     .replace('>', '&gt;').replace('"', '&quot;').replace("'", '&#39;'))
            ⋮┆----------------------------------------
           80┆ return mark_safe(force_text(value).translate(_js_escapes))
            ⋮┆----------------------------------------
          104┆ return mark_safe(format_string.format(*args_safe, **kwargs_safe))
            ⋮┆----------------------------------------
          121┆ return mark_safe(conditional_escape(sep).join(
          122┆     format_html(format_string, *tuple(args))
          123┆     for args in args_generator))
            ⋮┆----------------------------------------
          342┆ words[i] = mark_safe('%s%s%s' % (lead, middle, trail))
            ⋮┆----------------------------------------
          345┆ words[i] = mark_safe(word)
            ⋮┆----------------------------------------
          349┆ words[i] = mark_safe(word)
            ⋮┆----------------------------------------
          380┆ klass.__unicode__ = lambda self: mark_safe(klass_unicode(self))
            ⋮┆----------------------------------------
          389┆ klass.__str__ = lambda self: mark_safe(klass_str(self))
                                                 
  [36m[22m[24m  django/utils/module_loading.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           20┆ module = import_module(module_path)
            ⋮┆----------------------------------------
           50┆ import_module('%s.%s' % (app_config.name, module_to_search))
                                               
  [36m[22m[24m  django/utils/numberformat.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           26┆ return mark_safe(six.text_type(number))
                                             
  [36m[22m[24m  django/utils/safestring.py[0m
    ❯❱ [1mpython.django.security.audit.xss.html-magic-method.html-magic-method[0m
          The `__html__` method indicates to the Django template engine that the value is 'safe' for       
          rendering. This means that normal HTML escaping will not be applied to the return value. This    
          exposes your application to cross-site scripting (XSS) vulnerabilities. If you need to render raw
          HTML, consider instead using `mark_safe()` which more clearly marks the intent to render raw HTML
          than a class with a magic method.                                                                
          Details: https://sg.run/8y9N                                                                     
                                                                                                           
           37┆ def __html__(self):
           38┆     """
           39┆     Returns the html representation of a string for interoperability.
           40┆
           41┆     This allows other template engines to understand Django's SafeData.
           42┆     """
           43┆     return self
                                       
  [36m[22m[24m  django/utils/text.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          425┆ return mark_safe(re.sub('[-\s]+', '-', value, flags=re.U))
            ⋮┆----------------------------------------
          428┆ return mark_safe(re.sub('[-\s]+', '-', value))
                                                         
  [36m[22m[24m  django/utils/translation/trans_real.py[0m
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          304┆ return mark_safe(result)
                                       
  [36m[22m[24m  django/views/csrf.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
          142┆ return HttpResponseForbidden(t.render(c), content_type='text/html')
                                        
  [36m[22m[24m  django/views/debug.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           85┆ return HttpResponse(html, status=status_code, content_type='text/html')
            ⋮┆----------------------------------------
          501┆ return HttpResponseNotFound(t.render(c), content_type='text/html')
            ⋮┆----------------------------------------
          517┆ return HttpResponse(t.render(c), content_type='text/html')
                                                  
  [36m[22m[24m  django/views/decorators/http.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           41┆ return HttpResponseNotAllowed(request_method_list)
                                           
  [36m[22m[24m  django/views/defaults.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           45┆ body = template.render(context, request)
   
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           74┆ return http.HttpResponseServerError(template.render())
            ⋮┆----------------------------------------
           93┆ return http.HttpResponseBadRequest(template.render())
            ⋮┆----------------------------------------
          117┆ return http.HttpResponseForbidden(
          118┆     template.render(request=request, context={'exception': force_text(exception)})
          119┆ )
                                               
  [36m[22m[24m  django/views/generic/base.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           97┆ return http.HttpResponseNotAllowed(self._allowed_methods())
                                       
  [36m[22m[24m  django/views/i18n.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
          201┆ return http.HttpResponse(template.render(context), 'text/javascript')
   
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          216┆ p = importlib.import_module(package)
                                         
  [36m[22m[24m  django/views/static.py[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
           85┆ <title>{% blocktrans %}Index of {{ directory }}{% endblocktrans %}</title>
            ⋮┆----------------------------------------
           88┆ <h1>{% blocktrans %}Index of {{ directory }}{% endblocktrans %}</h1>
   
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
          121┆ return HttpResponse(t.render(c))
                                                     
  [36m[22m[24m  docs/_theme/djangodocs/layout.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5┆ &laquo; <a href="{{ prev.link|e }}" title="{{ prev.title|e }}">previous</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5┆ &laquo; <a href="{{ prev.link|e }}" title="{{ prev.title|e }}">previous</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5┆ &laquo; <a href="{{ prev.link|e }}" title="{{ prev.title|e }}">previous</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            9┆ <a href="{{ parents.0.link|e }}" title="{{ parents.0.title|e }}" accesskey="U">up</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            9┆ <a href="{{ parents.0.link|e }}" title="{{ parents.0.title|e }}" accesskey="U">up</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            9┆ <a href="{{ parents.0.link|e }}" title="{{ parents.0.title|e }}" accesskey="U">up</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           11┆ <a title="{{ docstitle }}" href="{{ pathto('index') }}" accesskey="U">up</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           11┆ <a title="{{ docstitle }}" href="{{ pathto('index') }}" accesskey="U">up</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           11┆ <a title="{{ docstitle }}" href="{{ pathto('index') }}" accesskey="U">up</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           15┆ <a href="{{ next.link|e }}" title="{{ next.title|e }}">next</a> &raquo;
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           15┆ <a href="{{ next.link|e }}" title="{{ next.title|e }}">next</a> &raquo;
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           15┆ <a href="{{ next.link|e }}" title="{{ next.title|e }}">next</a> &raquo;
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           24┆ <script type="text/javascript" src="{{ pathto('templatebuiltins.js', 1) }}"></script>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           63┆ <h1><a href="{{ pathto('index') }}">{{ docstitle }}</a></h1>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           63┆ <h1><a href="{{ pathto('index') }}">{{ docstitle }}</a></h1>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           63┆ <h1><a href="{{ pathto('index') }}">{{ docstitle }}</a></h1>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           65┆ <a title="Home page" href="{{ pathto('index') }}">Home</a> {{ reldelim2 }}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           65┆ <a title="Home page" href="{{ pathto('index') }}">Home</a> {{ reldelim2 }}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           65┆ <a title="Home page" href="{{ pathto('index') }}">Home</a> {{ reldelim2 }}
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           66┆ <a title="Table of contents" href="{{ pathto('contents') }}">Table of contents</a> {{
               reldelim2 }}                                                                         
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           66┆ <a title="Table of contents" href="{{ pathto('contents') }}">Table of contents</a> {{
               reldelim2 }}                                                                         
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           66┆ <a title="Table of contents" href="{{ pathto('contents') }}">Table of contents</a> {{
               reldelim2 }}                                                                         
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           67┆ <a title="Global index" href="{{ pathto('genindex') }}">Index</a> {{ reldelim2 }}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           67┆ <a title="Global index" href="{{ pathto('genindex') }}">Index</a> {{ reldelim2 }}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           67┆ <a title="Global index" href="{{ pathto('genindex') }}">Index</a> {{ reldelim2 }}
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           68┆ <a title="Module index" href="{{ pathto('py-modindex') }}">Modules</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           68┆ <a title="Module index" href="{{ pathto('py-modindex') }}">Modules</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           68┆ <a title="Module index" href="{{ pathto('py-modindex') }}">Modules</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          104┆ <li>Prev: <a href="{{ prev.link }}">{{ prev.title }}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          104┆ <li>Prev: <a href="{{ prev.link }}">{{ prev.title }}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          104┆ <li>Prev: <a href="{{ prev.link }}">{{ prev.title }}</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          107┆ <li>Next: <a href="{{ next.link }}">{{ next.title }}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          107┆ <li>Next: <a href="{{ next.link }}">{{ next.title }}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          107┆ <li>Next: <a href="{{ next.link }}">{{ next.title }}</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          113┆ <a href="{{ pathto('index') }}">{{ docstitle }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          113┆ <a href="{{ pathto('index') }}">{{ docstitle }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          113┆ <a href="{{ pathto('index') }}">{{ docstitle }}</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          115┆ <ul><li><a href="{{ p.link }}">{{ p.title }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          115┆ <ul><li><a href="{{ p.link }}">{{ p.title }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          115┆ <ul><li><a href="{{ p.link }}">{{ p.title }}</a>
                                                  
  [36m[22m[24m  docs/ref/templates/builtins.txt[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          795┆ {% blocktrans %}Copyright {{ current_year }}{% endblocktrans %}
            ⋮┆----------------------------------------
          1114┆ {% blocktrans %}The width is: {{ width }}{% endblocktrans %}
                                        
  [36m[22m[24m  docs/releases/1.4.txt[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          387┆ Contextual translation support for ``{% trans %}`` and ``{% blocktrans %}``
                                        
  [36m[22m[24m  docs/releases/1.7.txt[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          676┆ content of the ``{% blocktrans %}`` tag, replace any whitespace at the
            ⋮┆----------------------------------------
          679┆ a ``{% blocktrans %}`` tag without having the indentation characters end up
                                                 
  [36m[22m[24m  docs/topics/auth/passwords.txt[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-bcrypt-hash.detected-bcrypt-hash[0m
          bcrypt hash detected        
          Details: https://sg.run/3A8G
                                      
          128┆ ``bcrypt$$2a$12$NT0I31Sa7ihGEWpka9ASYrEFkhuTNeBQ2xfZskIiiJeyFXhRgS.Sy``.
                                                   
  [36m[22m[24m  docs/topics/i18n/translation.txt[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          578┆ :ttag:`{% blocktrans %}<blocktrans>` instead.
   
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
          584┆ {% trans "This is the title" as the_title %}
          585┆
          586┆ <title>{{ the_title }}</title>
            ⋮┆----------------------------------------
          594┆ {% trans "end point" as end %}
          595┆ {% trans "La Grande Boucle" as race %}
          596┆
          597┆ <h1>
          598┆   <a href="/" title="{% blocktrans %}Back to '{{ race }}' homepage{% endblocktrans %}">{{
               race }}</a>                                                                              
          599┆ </h1>
          600┆ <p>
          601┆ {% for stage in tour_stages %}
          602┆     {% cycle start end %}: {{ stage }}{% if forloop.counter|divisibleby:2 %}<br />{% else
               %}, {% endif %}                                                                          
            ⋮┆----------------------------------------
          595┆ {% trans "La Grande Boucle" as race %}
          596┆
          597┆ <h1>
          598┆   <a href="/" title="{% blocktrans %}Back to '{{ race }}' homepage{% endblocktrans %}">{{
               race }}</a>                                                                              
   
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          598┆ <a href="/" title="{% blocktrans %}Back to '{{ race }}' homepage{% endblocktrans %}">{{
               race }}</a>                                                                            
            ⋮┆----------------------------------------
          622┆ {% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %}
            ⋮┆----------------------------------------
          628┆ {% blocktrans with amount=article.price %}
            ⋮┆----------------------------------------
          632┆ {% blocktrans with myvar=value|filter %}
            ⋮┆----------------------------------------
          638┆ {% blocktrans with book_t=book|title author_t=author|title %}
            ⋮┆----------------------------------------
          643┆ ``{% blocktrans with book|title as book_t and author|title as author_t %}``
            ⋮┆----------------------------------------
          659┆ ``{% plural %}`` tag within the ``{% blocktrans %}`` and
            ⋮┆----------------------------------------
          664┆ {% blocktrans count counter=list|length %}
            ⋮┆----------------------------------------
          672┆ {% blocktrans with amount=article.price count years=i.length %}
            ⋮┆----------------------------------------
          688┆ {% blocktrans %}
            ⋮┆----------------------------------------
          695┆ {% blocktrans asvar the_title %}The title is {{ title }}.{% endblocktrans %}
            ⋮┆----------------------------------------
          707┆ ``{% blocktrans %}`` also supports :ref:`contextual
            ⋮┆----------------------------------------
          712┆ {% blocktrans with name=user.username context "greeting" %}Hi {{ name }}{% endblocktrans %}
            ⋮┆----------------------------------------
          714┆ Another feature ``{% blocktrans %}`` supports is the ``trimmed`` option. This
            ⋮┆----------------------------------------
          716┆ content of the ``{% blocktrans %}`` tag, replace any whitespace at the beginning
            ⋮┆----------------------------------------
          718┆ separate them. This is quite useful for indenting the content of a ``{%
          719┆ blocktrans %}`` tag without having the indentation characters end up in the
            ⋮┆----------------------------------------
          722┆ For instance, the following ``{% blocktrans %}`` tag::
            ⋮┆----------------------------------------
          724┆ {% blocktrans trimmed %}
            ⋮┆----------------------------------------
          767┆ <p>{% blocktrans %}A multiline translatable
            ⋮┆----------------------------------------
          778┆ {% blocktrans %}Ambiguous translatable block of text{% endblocktrans %}
   
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
          823┆ <p>{% trans "Welcome to our page" %}</p>
          824┆
          825┆ {% language 'en' %}
          826┆     {% get_current_language as LANGUAGE_CODE %}
          827┆     <!-- Current language: {{ LANGUAGE_CODE }} -->
                                          
  [36m[22m[24m  js_tests/qunit/qunit.js[0m
   ❯❯❱ [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          1203┆ fixture.innerHTML = config.fixture;
            ⋮┆----------------------------------------
          3353┆ qunit.innerHTML =
          3354┆   "<h1 id='qunit-header'>" + escapeText( document.title ) + "</h1>" +
          3355┆   "<h2 id='qunit-banner'></h2>" +
          3356┆   "<div id='qunit-testrunner-toolbar'></div>" +
          3357┆   "<h2 id='qunit-userAgent'></h2>" +
          3358┆   "<ol id='qunit-tests'></ol>";
            ⋮┆----------------------------------------
          3641┆ urlConfigContainer.innerHTML = getUrlConfigHtml();
            ⋮┆----------------------------------------
          3725┆ moduleFilter.innerHTML = moduleFilterHtml;
            ⋮┆----------------------------------------
          3745┆ header.innerHTML = "<a href='" +
          3746┆   setUrl({ filter: undefined, module: undefined, testId: undefined }) +
          3747┆   "'>" + header.innerHTML + "</a> ";
            ⋮┆----------------------------------------
          3835┆ title.innerHTML = getNameHtml( name, moduleName );
            ⋮┆----------------------------------------
          3862┆ qunit.innerHTML =
          3863┆   "<h1 id='qunit-header'>" + escapeText( document.title ) + "</h1>" +
          3864┆   "<h2 id='qunit-banner'></h2>" +
          3865┆   "<div id='qunit-testrunner-toolbar'></div>" +
          3866┆   appendFilteredTest() +
          3867┆   "<h2 id='qunit-userAgent'></h2>" +
          3868┆   "<ol id='qunit-tests'></ol>";
            ⋮┆----------------------------------------
          3906┆ id( "qunit-testresult" ).innerHTML = html;
            ⋮┆----------------------------------------
          3964┆ running.innerHTML = ( bad ?
          3965┆   "Rerunning previously failed test: <br />" :
          3966┆   "Running: <br />" ) +
          3967┆   getNameHtml( details.name, details.module );
            ⋮┆----------------------------------------
          4053┆ assertLi.innerHTML = message;
            ⋮┆----------------------------------------
          4103┆ testTitle.innerHTML += " <b class='counts'>(" + testCounts +
          4104┆   details.assertions.length + ")</b>";
            ⋮┆----------------------------------------
          4121┆ time.innerHTML = details.runtime + " ms";
            ⋮┆----------------------------------------
          4128┆ sourceName.innerHTML = "<strong>Source: </strong>" + details.source;
                                      
  [36m[22m[24m  js_tests/tests.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           86┆ <script src='http://openlayers.org/api/2.13.1/OpenLayers.js'></script>
                                                 
  [36m[22m[24m  scripts/manage_translations.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mPopen("git diff -U0 %s | egrep '^[-+]msgid' | wc -l" % po_path,stdout=PIPE, stderr=PIPE,
              shell=False)                                                                                       
           74┆ p = Popen("git diff -U0 %s | egrep '^[-+]msgid' | wc -l" % po_path,
           75┆           stdout=PIPE, stderr=PIPE, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mPopen("msgfmt -vc -o /dev/null %(path)s/%(lang)s/LC_MESSAGES/django%(ext)s.po" % {'path': dir_,
              'lang': lang, 'ext': 'js' if name.endswith('-js') else ''},stdout=PIPE,                                   
              stderr=PIPE, shell=False)                                                                                 
          118┆ p = Popen("msgfmt -vc -o /dev/null %(path)s/%(lang)s/LC_MESSAGES/django%(ext)s.po" % {
          119┆     'path': dir_, 'lang': lang, 'ext': 'js' if name.endswith('-js') else ''},
          120┆     stdout=PIPE, stderr=PIPE, shell=True)
            ⋮┆----------------------------------------
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mcall('tx pull -r %(res)s -a -f  --minimum-perc=5' % {'res': _tx_resource_for_name(name)},
              shell=False)                                                                                        
          140┆ call('tx pull -r %(res)s -a -f  --minimum-perc=5' % {'res': _tx_resource_for_name(name)},
               shell=True)                                                                              
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mcall('tx pull -r %(res)s -f -l %(lang)s' % {'res': _tx_resource_for_name(name), 'lang': lang},
              shell=False)                                                                                             
          144┆ call('tx pull -r %(res)s -f -l %(lang)s' % {
          145┆     'res': _tx_resource_for_name(name), 'lang': lang}, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mcall('msgcat --no-location -o %s %s' % (po_path, po_path), shell=False)
          156┆ call('msgcat --no-location -o %s %s' % (po_path, po_path), shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mcall('msgfmt -c -o %s.mo %s' % (po_path[:-3], po_path), shell=False)
          157┆ res = call('msgfmt -c -o %s.mo %s' % (po_path[:-3], po_path), shell=True)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          178┆ eval(options.cmd[0])(options.resources, options.languages)
