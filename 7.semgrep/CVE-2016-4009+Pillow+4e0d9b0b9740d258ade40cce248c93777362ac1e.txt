                    
                    
┌──────────────────┐
│ 14 Code Findings │
└──────────────────┘
                                  
  [36m[22m[24m  PIL/ImageCms.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          961┆ exec("doc = %s.__doc__" % (f))
                                      
  [36m[22m[24m  Scripts/enhancer.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           42┆ self.value = eval(value)
                                       
  [36m[22m[24m  Scripts/pildriver.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          213┆ filter = eval("ImageFilter." + self.do_pop().upper())
                                         
  [36m[22m[24m  Scripts/thresholder.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           45┆ self.value = eval(value)
                                                      
  [36m[22m[24m  Tests/images/bmp/html/bmpsuite.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           20┆ <p><i>For <a href="http://entropymine.com/jason/bmpsuite/">BMP Suite</a>
                                      
  [36m[22m[24m  Tests/import_all.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           13┆ exec("from PIL import " + module)
                                       
  [36m[22m[24m  Tests/test_pickle.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           17┆ pickle.dump(im, f, protocol)
            ⋮┆----------------------------------------
           19┆ loaded_im = pickle.load(f)
            ⋮┆----------------------------------------
           31┆ dumped_string = pickle.dumps(im, protocol)
            ⋮┆----------------------------------------
           32┆ loaded_im = pickle.loads(dumped_string)
                                                   
  [36m[22m[24m  docs/_templates/sidebarhelp.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            3┆ You can get help via IRC at <a                                                        
               href="irc://irc.freenode.net#pil">irc://irc.freenode.net#pil</a> or Stack Overflow <a 
               href="http://stackoverflow.com/questions/tagged/pillow">here</a> and <a               
               href="http://stackoverflow.com/questions/tagged/pil">here</a>. Please <a              
               href="https://github.com/python-pillow/Pillow/issues/new">report issues on GitHub</a>.
            ⋮┆----------------------------------------
            3┆ You can get help via IRC at <a                                                        
               href="irc://irc.freenode.net#pil">irc://irc.freenode.net#pil</a> or Stack Overflow <a 
               href="http://stackoverflow.com/questions/tagged/pillow">here</a> and <a               
               href="http://stackoverflow.com/questions/tagged/pil">here</a>. Please <a              
               href="https://github.com/python-pillow/Pillow/issues/new">report issues on GitHub</a>.
                                    
  [36m[22m[24m  winbuild/fetch.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           12┆ content = urllib.request.urlopen(url).read()
                                    
  [36m[22m[24m  winbuild/untar.py[0m
   ❯❯❱ [1mtrailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal[0m
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled
          by an attacker                                                                                    
          Details: https://sg.run/2RLD                                                                      
                                                                                                            
            6┆ with tarfile.open(src, 'r:gz') as tgz:
            7┆     tgz.extractall(dest)
