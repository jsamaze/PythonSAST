                    
                    
┌──────────────────┐
│ 17 Code Findings │
└──────────────────┘
                                    
  [36m[22m[24m  framework/depcomp[0m
    ❯❱ [1mbash.lang.security.ifs-tampering.ifs-tampering[0m
          The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't
          set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data.
          If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.                     
          Details: https://sg.run/Q9pq                                                                       
                                                                                                             
          426┆ IFS=" "
            ⋮┆----------------------------------------
          529┆ IFS=" "
            ⋮┆----------------------------------------
          571┆ IFS=" "
                                       
  [36m[22m[24m  framework/install-sh[0m
    ❯❱ [1mbash.lang.security.ifs-tampering.ifs-tampering[0m
          The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't
          set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data.
          If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.                     
          Details: https://sg.run/Q9pq                                                                       
                                                                                                             
           46┆ IFS=" ""   $nl"
            ⋮┆----------------------------------------
          395┆ IFS=/
            ⋮┆----------------------------------------
          400┆ IFS=$oIFS
                                                             
  [36m[22m[24m  framework/src/setroubleshoot/audit_data.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call 
          will spawn the command using a shell process. Doing so propagates current shell settings and      
          variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False'
          instead.                                                                                          
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.check_output(command,stderr=subprocess.STDOUT,shell=False)
          869┆ output = subprocess.check_output(command,
          870┆                                  stderr=subprocess.STDOUT,
          871┆                                  shell=True)
                                                          
  [36m[22m[24m  framework/src/setroubleshoot/browser.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           34┆ from xmlrpclib  import ProtocolError
                                                      
  [36m[22m[24m  framework/src/setroubleshoot/rpc.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0666` are widely permissive and grant access to more people than may be        
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          653┆ os.chmod(self.socket_address.address, 0666)
                                                
  [36m[22m[24m  framework/src/xml_data_v01.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          450┆ schema[name] = eval("BuildSchema(%sAttrs)" % class_name)
            ⋮┆----------------------------------------
          458┆ schema[name] = eval("BuildSchema(%sAttrs)" % class_name)
            ⋮┆----------------------------------------
          731┆ self.__dict__[name] = eval(code)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          759┆ exec(code)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          772┆ self.__dict__[name] = eval(code)
                                     
  [36m[22m[24m  plugins/install-sh[0m
    ❯❱ [1mbash.lang.security.ifs-tampering.ifs-tampering[0m
          The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't
          set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data.
          If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.                     
          Details: https://sg.run/Q9pq                                                                       
                                                                                                             
           46┆ IFS=" ""   $nl"
            ⋮┆----------------------------------------
          395┆ IFS=/
            ⋮┆----------------------------------------
          400┆ IFS=$oIFS
