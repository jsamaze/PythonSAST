                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 13 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                    
  [36m[22m[24m  docs/_templates/sidebarlinks.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            3‚îÜ <li><a href="http://github.com/python-openxml/python-docx">python-docx @ GitHub</a></li>
            ‚ãÆ‚îÜ----------------------------------------
            4‚îÜ <li><a href="http://pypi.python.org/pypi/python-docx">python-docx @ PyPI</a></li>
            ‚ãÆ‚îÜ----------------------------------------
            5‚îÜ <li><a href="http://github.com/python-openxml/python-docx/issues">Issue Tracker</a></li>
                                                     
  [36m[22m[24m  docs/_themes/armstrong/layout.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           16‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           16‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           16‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           25‚îÜ {% trans sphinx_version=sphinx_version|e %}Created using <a                   
               href="http://sphinx.pocoo.org/">Sphinx</a> {{ sphinx_version }}.{% endtrans %}
            ‚ãÆ‚îÜ----------------------------------------
           28‚îÜ {% trans %}<br />Theme based on <a href="http://readthedocs.org/">Read The Docs</a>{%
               endtrans %}                                                                          
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           37‚îÜ _gaq.push(['_setAccount', '{{ theme_analytics_code }}']);
                                      
  [36m[22m[24m  docx/image/image.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(self._blob)
          168‚îÜ return hashlib.sha1(self._blob).hexdigest()
                                      
  [36m[22m[24m  docx/parts/image.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(self._blob)
           89‚îÜ return hashlib.sha1(self._blob).hexdigest()
                                          
  [36m[22m[24m  features/steps/shape.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(image_part.blob)
          115‚îÜ image_sha1 = hashlib.sha1(image_part.blob).hexdigest()
                                         
  [36m[22m[24m  features/steps/text.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(image_part.blob)
          241‚îÜ image_sha1 = hashlib.sha1(image_part.blob).hexdigest()
