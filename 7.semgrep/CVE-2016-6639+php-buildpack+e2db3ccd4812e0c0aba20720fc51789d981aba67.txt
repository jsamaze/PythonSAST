                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 263 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                   
  [36m[22m[24m  bin/populate-modules-in-manifest[0m
    ‚ùØ‚ù± [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
           10‚îÜ `wget #{url} && tar xzf #{File.basename(url)}`
                                       
  [36m[22m[24m  cf_exec/manifest-tgz[0m
    ‚ùØ‚ù± [1mruby.lang.security.weak-hashes-md5.weak-hashes-md5[0m
          Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force
          attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or     
          other hashing functions instead.                                                                    
          Details: https://sg.run/O1re                                                                        
                                                                                                              
           13‚îÜ 'md5' => Digest::MD5.hexdigest(File.read(filename)),
                                                                                                                       
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/Plugin/DebugKit/Controller/ToolbarAccessController.php[0m
    ‚ùØ‚ù± [1mphp.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect[0m
          The `redirect()` method does not check its destination in any way. If you redirect to a URL provided
          by end-users, your application may be open to the unvalidated redirects security vulnerability.     
          Consider using literal values or an allowlist to validate URLs.                                     
          Details: https://sg.run/4ey5                                                                        
                                                                                                              
           86‚îÜ return $this->redirect($this->referer());
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/Plugin/DebugKit/View/Helper/TidyHelper.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.exec-use.exec-use[0m
          Executing non-constant commands. This can lead to command injection.
          Details: https://sg.run/5Q1j                                        
                                                                              
          156‚îÜ $_out = exec($cmd . ' 2>&1', $out, $return);
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ $_out = exec($cmd, $out, $return);
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/Plugin/DebugKit/webroot/js/js_debug_toolbar.js[0m
    ‚ùØ‚ù± [1mjavascript.browser.security.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
           76‚îÜ eval(this.responseText);
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `className` function argument, this might allow an attacker to cause a       
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          181‚îÜ element.className = element.className.replace(new RegExp(' ?(' + className + ') ?'), '');
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          214‚îÜ sibling = sibling[walk];
                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/app/Controller/UsersController.php[0m
    ‚ùØ‚ù± [1mphp.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect[0m
          The `redirect()` method does not check its destination in any way. If you redirect to a URL provided
          by end-users, your application may be open to the unvalidated redirects security vulnerability.     
          Consider using literal values or an allowlist to validate URLs.                                     
          Details: https://sg.run/4ey5                                                                        
                                                                                                              
           22‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           50‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           92‚îÜ $this->redirect(array('action'=>'index'));
            ‚ãÆ‚îÜ----------------------------------------
          100‚îÜ $this->redirect(array('action'=>'index'));
            ‚ãÆ‚îÜ----------------------------------------
          105‚îÜ $this->redirect(array('action' => 'index'));
                                                                                                     
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Cache/Engine/FileEngine.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          194‚îÜ $data = unserialize((string)$data);
   
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          213‚îÜ return @unlink($path);
            ‚ãÆ‚îÜ----------------------------------------
          297‚îÜ @unlink($filePath);
            ‚ãÆ‚îÜ----------------------------------------
          425‚îÜ @unlink($path);
                                                                                                      
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Cache/Engine/RedisEngine.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          136‚îÜ $value = unserialize($value);
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Console/Command/ConsoleShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.eval-use.eval-use[0m
          Evaluating non-constant commands. This can lead to command injection.
          Details: https://sg.run/J9AP                                         
                                                                               
          336‚îÜ @eval($findCommand);
            ‚ãÆ‚îÜ----------------------------------------
          400‚îÜ @eval($saveCommand);
            ‚ãÆ‚îÜ----------------------------------------
          421‚îÜ @eval($fieldsCommand);
                                                                                                         
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Console/Command/ServerShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.exec-use.exec-use[0m
          Executing non-constant commands. This can lead to command injection.
          Details: https://sg.run/5Q1j                                        
                                                                              
          140‚îÜ system($command);
                                                                                                              
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Console/Command/Task/ProjectTask.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
           67‚îÜ while (!$response && is_dir($project) === true && file_exists($project . 'Config' .
               'core.php')) {                                                                     
            ‚ãÆ‚îÜ----------------------------------------
           67‚îÜ while (!$response && is_dir($project) === true && file_exists($project . 'Config' .
               'core.php')) {                                                                     
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Console/Command/UpgradeShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.exec-use.exec-use[0m
          Executing non-constant commands. This can lead to command injection.
          Details: https://sg.run/5Q1j                                        
                                                                              
          164‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          165‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          620‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          621‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          650‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          651‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          739‚îÜ exec('git mv -f ' . escapeshellarg($file) . ' ' . escapeshellarg($file . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          740‚îÜ exec('git mv -f ' . escapeshellarg($file . '__') . ' ' . escapeshellarg($new));
                                                                                                                  
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Console/Templates/skel/webroot/index.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
           71‚îÜ if ($_SERVER['REQUEST_URI'] !== '/' && file_exists(WWW_ROOT . $_SERVER['PHP_SELF'])) {
                                                                                                
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Log/Engine/FileLog.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          203‚îÜ $result = unlink($filepath);
            ‚ãÆ‚îÜ----------------------------------------
          212‚îÜ unlink(array_shift($files));
                                                                                                  
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/BasicsTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          286‚îÜ unlink(CACHE . 'basics_test');
            ‚ãÆ‚îÜ----------------------------------------
          355‚îÜ unlink(CACHE . 'views' . DS . 'empty');
            ‚ãÆ‚îÜ----------------------------------------
          784‚îÜ unlink(LOGS . 'error.log');
                                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Cache/Engine/FileEngineTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          187‚îÜ $this->assertSame(unserialize($newread), $data);
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Configure/IniReaderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          275‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          284‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          296‚îÜ unlink(TMP . 'test.ini');
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Configure/PhpReaderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          168‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          176‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          188‚îÜ unlink(TMP . 'test.php');
                                                                                                                       
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Console/Command/SchemaShellTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          299‚îÜ unlink(TMP . 'schema.php');
            ‚ãÆ‚îÜ----------------------------------------
          328‚îÜ unlink(TMP . 'schema.php');
            ‚ãÆ‚îÜ----------------------------------------
          626‚îÜ unlink($this->Shell->Schema->path . DS . 'custom_name.php');
            ‚ãÆ‚îÜ----------------------------------------
          632‚îÜ unlink($this->Shell->Schema->path . DS . 'custom_name.php');
            ‚ãÆ‚îÜ----------------------------------------
          658‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          667‚îÜ unlink($file);
                                                                                                                        
  [36m[22m[24m                                                                                                          
  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Console/Command/Task/PluginTaskTest.php[0m           
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           72‚îÜ unlink($this->Task->bootstrap);
                                                                                                         
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Console/ShellTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          851‚îÜ unlink(LOGS . 'error.log');
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Core/ConfigureTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           50‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_core_paths');
            ‚ãÆ‚îÜ----------------------------------------
           53‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_dir_map');
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_file_map');
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_object_map');
            ‚ãÆ‚îÜ----------------------------------------
           62‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'test.config.php');
            ‚ãÆ‚îÜ----------------------------------------
           65‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'test.php');
            ‚ãÆ‚îÜ----------------------------------------
          459‚îÜ unlink(TMP . 'config_test.php');
            ‚ãÆ‚îÜ----------------------------------------
          480‚îÜ unlink(TMP . 'config_test.php');
                                                                                                       
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Core/ObjectTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          317‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          327‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          337‚îÜ unlink(LOGS . 'error.log');
                                                                                                              
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Error/ErrorHandlerTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          142‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          157‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          170‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          186‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          210‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          232‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          311‚îÜ unlink(LOGS . 'error.log');
                                                                                                            
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Model/CakeSchemaTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          426‚îÜ unlink(TMP . 'tests' . DS . 'schema.php');
                                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          716‚îÜ unlink(TMP . 'download.txt');
                                                                                                              
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Routing/DispatcherTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          1626‚îÜ unlink($filename);
                                                                                                            
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Utility/DebuggerTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          455‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          464‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          482‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          494‚îÜ unlink(LOGS . 'debug.log');
                                                                                                        
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Utility/FileTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          401‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          418‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          431‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          518‚îÜ unlink($dest);
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/Utility/FolderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           71‚îÜ unlink($file->getPathname());
            ‚ãÆ‚îÜ----------------------------------------
          1000‚îÜ unlink($fileOneA);
                                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/View/Helper/CacheHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          132‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          192‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          223‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          268‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          315‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          349‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          379‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          408‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          442‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          474‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          508‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          543‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          647‚îÜ unlink($filename);
                                                                                                                  
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/View/Helper/HtmlHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          897‚îÜ unlink(WWW_ROOT . 'js' . DS . '__cake_js_test.js');
            ‚ãÆ‚îÜ----------------------------------------
          926‚îÜ unlink($pluginJsPath . DS . '__cake_js_test.js');
                                                                                                                
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/View/Helper/JsHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          380‚îÜ unlink(WWW_ROOT . $filename[1]);
                                                                                                     
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Test/Case/View/ViewTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          1143‚îÜ unlink($path);
            ‚ãÆ‚îÜ----------------------------------------
          1155‚îÜ unlink($path);
                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Utility/File.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          282‚îÜ return unlink($this->path);
                                                                                            
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Utility/Folder.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          593‚îÜ if (@unlink($filePath)) {
                                                                                              
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/Utility/Security.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.mcrypt-use.mcrypt-use[0m
          Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using
          Sodium or OpenSSL.                                                                            
          Details: https://sg.run/BkZR                                                                  
                                                                                                        
          232‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          237‚îÜ $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);
            ‚ãÆ‚îÜ----------------------------------------
          238‚îÜ return $iv . '$$' . mcrypt_encrypt($algorithm, $cryptKey, $text, $mode, $iv);
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ return rtrim(mcrypt_decrypt($algorithm, $cryptKey, $text, $mode, $iv), "\0");
            ‚ãÆ‚îÜ----------------------------------------
          247‚îÜ return rtrim(mcrypt_decrypt($algorithm, $cryptKey, $text, $mode, $iv), "\0");
            ‚ãÆ‚îÜ----------------------------------------
          322‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          323‚îÜ $iv = mcrypt_create_iv($ivSize, MCRYPT_DEV_URANDOM);
            ‚ãÆ‚îÜ----------------------------------------
          324‚îÜ $ciphertext = $iv . mcrypt_encrypt($algorithm, $key, $plain, $mode, $iv);
            ‚ãÆ‚îÜ----------------------------------------
          376‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          380‚îÜ $plain = mcrypt_decrypt($algorithm, $key, $cipher, $mode, $iv);
                                                                                       
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/View/View.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          570‚îÜ @unlink($filename);
                                                                                    
  [36m[22m[24m  cf_spec/fixtures/cake_with_local_dependencies/lib/Cake/basics.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          426‚îÜ @unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          463‚îÜ @unlink($cache . $ext);
            ‚ãÆ‚îÜ----------------------------------------
          476‚îÜ @unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          499‚îÜ @unlink($file);
                                                                                                    
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/app/Controller/UsersController.php[0m
    ‚ùØ‚ù± [1mphp.symfony.security.audit.symfony-non-literal-redirect.symfony-non-literal-redirect[0m
          The `redirect()` method does not check its destination in any way. If you redirect to a URL provided
          by end-users, your application may be open to the unvalidated redirects security vulnerability.     
          Consider using literal values or an allowlist to validate URLs.                                     
          Details: https://sg.run/4ey5                                                                        
                                                                                                              
           22‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           50‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           84‚îÜ $this->redirect(array('action' => 'index'));
            ‚ãÆ‚îÜ----------------------------------------
           92‚îÜ $this->redirect(array('action'=>'index'));
            ‚ãÆ‚îÜ----------------------------------------
          100‚îÜ $this->redirect(array('action'=>'index'));
            ‚ãÆ‚îÜ----------------------------------------
          105‚îÜ $this->redirect(array('action' => 'index'));
                                                                                                      
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Cache/Engine/FileEngine.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          194‚îÜ $data = unserialize((string)$data);
   
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          213‚îÜ return @unlink($path);
            ‚ãÆ‚îÜ----------------------------------------
          297‚îÜ @unlink($filePath);
            ‚ãÆ‚îÜ----------------------------------------
          425‚îÜ @unlink($path);
                                                                                                       
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Cache/Engine/RedisEngine.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          136‚îÜ $value = unserialize($value);
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Console/Command/ConsoleShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.eval-use.eval-use[0m
          Evaluating non-constant commands. This can lead to command injection.
          Details: https://sg.run/J9AP                                         
                                                                               
          336‚îÜ @eval($findCommand);
            ‚ãÆ‚îÜ----------------------------------------
          400‚îÜ @eval($saveCommand);
            ‚ãÆ‚îÜ----------------------------------------
          421‚îÜ @eval($fieldsCommand);
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Console/Command/ServerShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.exec-use.exec-use[0m
          Executing non-constant commands. This can lead to command injection.
          Details: https://sg.run/5Q1j                                        
                                                                              
          140‚îÜ system($command);
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Console/Command/Task/ProjectTask.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
           67‚îÜ while (!$response && is_dir($project) === true && file_exists($project . 'Config' .
               'core.php')) {                                                                     
            ‚ãÆ‚îÜ----------------------------------------
           67‚îÜ while (!$response && is_dir($project) === true && file_exists($project . 'Config' .
               'core.php')) {                                                                     
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Console/Command/UpgradeShell.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.exec-use.exec-use[0m
          Executing non-constant commands. This can lead to command injection.
          Details: https://sg.run/5Q1j                                        
                                                                              
          164‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          165‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          620‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          621‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          650‚îÜ exec('git mv -f ' . escapeshellarg($old) . ' ' . escapeshellarg($old . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          651‚îÜ exec('git mv -f ' . escapeshellarg($old . '__') . ' ' . escapeshellarg($new));
            ‚ãÆ‚îÜ----------------------------------------
          739‚îÜ exec('git mv -f ' . escapeshellarg($file) . ' ' . escapeshellarg($file . '__'));
            ‚ãÆ‚îÜ----------------------------------------
          740‚îÜ exec('git mv -f ' . escapeshellarg($file . '__') . ' ' . escapeshellarg($new));
                                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Console/Templates/skel/webroot/index.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
           71‚îÜ if ($_SERVER['REQUEST_URI'] !== '/' && file_exists(WWW_ROOT . $_SERVER['PHP_SELF'])) {
                                                                                                 
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Log/Engine/FileLog.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          203‚îÜ $result = unlink($filepath);
            ‚ãÆ‚îÜ----------------------------------------
          212‚îÜ unlink(array_shift($files));
                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/BasicsTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          286‚îÜ unlink(CACHE . 'basics_test');
            ‚ãÆ‚îÜ----------------------------------------
          355‚îÜ unlink(CACHE . 'views' . DS . 'empty');
            ‚ãÆ‚îÜ----------------------------------------
          784‚îÜ unlink(LOGS . 'error.log');
                                                                                                                    
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Cache/Engine/FileEngineTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
          187‚îÜ $this->assertSame(unserialize($newread), $data);
                                                                                                                
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Configure/IniReaderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          275‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          284‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          296‚îÜ unlink(TMP . 'test.ini');
                                                                                                                
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Configure/PhpReaderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          168‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          176‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          188‚îÜ unlink(TMP . 'test.php');
                                                                                                                        
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Console/Command/SchemaShellTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          299‚îÜ unlink(TMP . 'schema.php');
            ‚ãÆ‚îÜ----------------------------------------
          328‚îÜ unlink(TMP . 'schema.php');
            ‚ãÆ‚îÜ----------------------------------------
          626‚îÜ unlink($this->Shell->Schema->path . DS . 'custom_name.php');
            ‚ãÆ‚îÜ----------------------------------------
          632‚îÜ unlink($this->Shell->Schema->path . DS . 'custom_name.php');
            ‚ãÆ‚îÜ----------------------------------------
          658‚îÜ unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          667‚îÜ unlink($file);
                                                                                                                        
  [36m[22m[24m                                                                                                          
  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Console/Command/Task/PluginTaskTest.php[0m          
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           72‚îÜ unlink($this->Task->bootstrap);
                                                                                                          
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Console/ShellTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          851‚îÜ unlink(LOGS . 'error.log');
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Core/ConfigureTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           50‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_core_paths');
            ‚ãÆ‚îÜ----------------------------------------
           53‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_dir_map');
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_file_map');
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'cake_core_object_map');
            ‚ãÆ‚îÜ----------------------------------------
           62‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'test.config.php');
            ‚ãÆ‚îÜ----------------------------------------
           65‚îÜ unlink(TMP . 'cache' . DS . 'persistent' . DS . 'test.php');
            ‚ãÆ‚îÜ----------------------------------------
          459‚îÜ unlink(TMP . 'config_test.php');
            ‚ãÆ‚îÜ----------------------------------------
          480‚îÜ unlink(TMP . 'config_test.php');
                                                                                                        
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Core/ObjectTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          317‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          327‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          337‚îÜ unlink(LOGS . 'error.log');
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Error/ErrorHandlerTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          142‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          157‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          170‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          186‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          210‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          232‚îÜ unlink(LOGS . 'error.log');
            ‚ãÆ‚îÜ----------------------------------------
          311‚îÜ unlink(LOGS . 'error.log');
                                                                                                             
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Model/CakeSchemaTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          426‚îÜ unlink(TMP . 'tests' . DS . 'schema.php');
                                                                                                                    
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Network/Http/HttpSocketTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          716‚îÜ unlink(TMP . 'download.txt');
                                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Routing/DispatcherTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          1626‚îÜ unlink($filename);
                                                                                                             
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Utility/DebuggerTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          455‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          464‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          482‚îÜ unlink(LOGS . 'debug.log');
            ‚ãÆ‚îÜ----------------------------------------
          494‚îÜ unlink(LOGS . 'debug.log');
                                                                                                         
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Utility/FileTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          401‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          418‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          431‚îÜ unlink($tmpFile);
            ‚ãÆ‚îÜ----------------------------------------
          518‚îÜ unlink($dest);
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/Utility/FolderTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
           71‚îÜ unlink($file->getPathname());
            ‚ãÆ‚îÜ----------------------------------------
          1000‚îÜ unlink($fileOneA);
                                                                                                                    
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/View/Helper/CacheHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          132‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          158‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          192‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          223‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          268‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          315‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          349‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          379‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          408‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          442‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          474‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          508‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          543‚îÜ unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          647‚îÜ unlink($filename);
                                                                                                                   
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/View/Helper/HtmlHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          897‚îÜ unlink(WWW_ROOT . 'js' . DS . '__cake_js_test.js');
            ‚ãÆ‚îÜ----------------------------------------
          926‚îÜ unlink($pluginJsPath . DS . '__cake_js_test.js');
                                                                                                                 
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/View/Helper/JsHelperTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          380‚îÜ unlink(WWW_ROOT . $filename[1]);
                                                                                                      
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Test/Case/View/ViewTest.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          1143‚îÜ unlink($path);
            ‚ãÆ‚îÜ----------------------------------------
          1155‚îÜ unlink($path);
                                                                                           
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Utility/File.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          282‚îÜ return unlink($this->path);
                                                                                             
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Utility/Folder.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          593‚îÜ if (@unlink($filePath)) {
                                                                                               
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/Utility/Security.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.mcrypt-use.mcrypt-use[0m
          Mcrypt functionality has been deprecated and/or removed in recent PHP versions. Consider using
          Sodium or OpenSSL.                                                                            
          Details: https://sg.run/BkZR                                                                  
                                                                                                        
          232‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          237‚îÜ $iv = mcrypt_create_iv($ivSize, MCRYPT_RAND);
            ‚ãÆ‚îÜ----------------------------------------
          238‚îÜ return $iv . '$$' . mcrypt_encrypt($algorithm, $cryptKey, $text, $mode, $iv);
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ return rtrim(mcrypt_decrypt($algorithm, $cryptKey, $text, $mode, $iv), "\0");
            ‚ãÆ‚îÜ----------------------------------------
          247‚îÜ return rtrim(mcrypt_decrypt($algorithm, $cryptKey, $text, $mode, $iv), "\0");
            ‚ãÆ‚îÜ----------------------------------------
          322‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          323‚îÜ $iv = mcrypt_create_iv($ivSize, MCRYPT_DEV_URANDOM);
            ‚ãÆ‚îÜ----------------------------------------
          324‚îÜ $ciphertext = $iv . mcrypt_encrypt($algorithm, $key, $plain, $mode, $iv);
            ‚ãÆ‚îÜ----------------------------------------
          376‚îÜ $ivSize = mcrypt_get_iv_size($algorithm, $mode);
            ‚ãÆ‚îÜ----------------------------------------
          380‚îÜ $plain = mcrypt_decrypt($algorithm, $key, $cipher, $mode, $iv);
                                                                                        
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/View/View.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          570‚îÜ @unlink($filename);
                                                                                     
  [36m[22m[24m  cf_spec/fixtures/cake_with_remote_dependencies/lib/Cake/basics.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unlink-use.unlink-use[0m
          Using user input when deleting files with `unlink()` is potentially dangerous. A malicious actor
          could use this to modify or access files they have no right to.                                 
          Details: https://sg.run/rYeR                                                                    
                                                                                                          
          426‚îÜ @unlink($filename);
            ‚ãÆ‚îÜ----------------------------------------
          463‚îÜ @unlink($cache . $ext);
            ‚ãÆ‚îÜ----------------------------------------
          476‚îÜ @unlink($file);
            ‚ãÆ‚îÜ----------------------------------------
          499‚îÜ @unlink($file);
                                                                       
  [36m[22m[24m  cf_spec/fixtures/composer_with_custom_path/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                                 
  [36m[22m[24m  cf_spec/fixtures/composer_with_impossible_dependency/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                             
  [36m[22m[24m  cf_spec/fixtures/composer_with_multiple_versions/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                                 
  [36m[22m[24m  cf_spec/fixtures/composer_with_version_set_to_latest/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                        
  [36m[22m[24m  cf_spec/fixtures/php_5_app_with_all_modules/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                                       
  [36m[22m[24m  cf_spec/fixtures/php_5_app_with_all_modules_using_composer/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                        
  [36m[22m[24m  cf_spec/fixtures/php_7_app_with_all_modules/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                                       
  [36m[22m[24m  cf_spec/fixtures/php_7_app_with_all_modules_using_composer/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                     
  [36m[22m[24m  cf_spec/fixtures/php_app/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                 
  [36m[22m[24m  cf_spec/fixtures/php_app_using_httpd/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                             
  [36m[22m[24m  cf_spec/fixtures/php_app_using_invalid_webserver/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                 
  [36m[22m[24m  cf_spec/fixtures/php_app_using_nginx/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                        
  [36m[22m[24m  cf_spec/fixtures/php_app_using_php_7_latest/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                           
  [36m[22m[24m  cf_spec/fixtures/php_app_with_custom_extension/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                   
  [36m[22m[24m  cf_spec/fixtures/php_app_with_newrelic/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php phpinfo(); ?>
                                                                    
  [36m[22m[24m  cf_spec/fixtures/php_app_with_profile_d/index.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.phpinfo-use.phpinfo-use[0m
          The 'phpinfo' function may reveal sensitive information about your environment.
          Details: https://sg.run/W82E                                                   
                                                                                         
            1‚îÜ <?php echo phpinfo() ?>
                                                                                                           
  [36m[22m[24m  cf_spec/fixtures/symfony_2_hello_world_with_local_dependencies/app/config/parameters.yml[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-secret.detected-generic-secret[0m
          Generic Secret detected     
          Details: https://sg.run/l2o5
                                      
           14‚îÜ secret: a0765b1a5573c7f55e0b085df9d6afca9fff81c8
                                                                                                            
  [36m[22m[24m  cf_spec/fixtures/symfony_2_hello_world_with_remote_dependencies/app/config/parameters.yml[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-secret.detected-generic-secret[0m
          Generic Secret detected     
          Details: https://sg.run/l2o5
                                      
           13‚îÜ secret: a0765b1a5573c7f55e0b085df9d6afca9fff81c8
                                                                                                       
  [36m[22m[24m  cf_spec/fixtures/zend_framework_hello_world_with_local_dependencies/public/index.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
            9‚îÜ if (php_sapi_name() === 'cli-server' && is_file(__DIR__ .
               parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH))) {     
                                                                                                        
  [36m[22m[24m  cf_spec/fixtures/zend_framework_hello_world_with_remote_dependencies/public/index.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.injection.tainted-filename.tainted-filename[0m
          File name based on user input risks server-side request forgery.
          Details: https://sg.run/Ayqp                                    
                                                                          
            9‚îÜ if (php_sapi_name() === 'cli-server' && is_file(__DIR__ .
               parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH))) {     
                                                                                       
  [36m[22m[24m  cf_spec/integration/deploy_a_php_app_with_httpd_and_proxying_spec.rb[0m
    ‚ùØ‚ù± [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
           19‚îÜ response_output = `curl -H "Proxy: http://example.com" #{app_url}`
                                                                                       
  [36m[22m[24m  cf_spec/integration/deploy_a_php_app_with_nginx_and_proxying_spec.rb[0m
    ‚ùØ‚ù± [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
           19‚îÜ response_output = `curl -H "Proxy: http://example.com" #{app_url}`
                                               
  [36m[22m[24m  cf_spec/unit/compile_spec.rb[0m
    ‚ùØ‚ù± [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
            9‚îÜ `docker run --rm #{env_flags} -v #{Dir.pwd}:/buildpack:ro -w /buildpack
               cloudfoundry/cflinuxfs2 #{cmd}`                                        
            ‚ãÆ‚îÜ----------------------------------------
           11‚îÜ `env #{env.map{|k,v| "#{k}=#{v}"}.join(' ')} #{cmd}`
                                                              
  [36m[22m[24m  defaults/config/nginx/server-locations.conf[0m
    ‚ùØ‚ù± [1mgeneric.nginx.security.insecure-redirect.insecure-redirect[0m
          Detected an insecure redirect in this nginx configuration. If no scheme is specified, nginx will 
          forward the request with the incoming scheme. This could result in unencrypted communications. To
          fix this, include the 'https' scheme.                                                            
          Details: https://sg.run/8y14                                                                     
                                                                                                           
           26‚îÜ rewrite ^ $redirect_scheme://$http_host$uri/ permanent;
                                                  
  [36m[22m[24m  lib/build_pack_utils/builder.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0755` are widely permissive and grant access to more people than may be        
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          698‚îÜ os.chmod(startScriptPath, 0755)
                                               
  [36m[22m[24m  lib/build_pack_utils/zips.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mPopen(command, stdout=PIPE, shell=False)
          190‚îÜ proc = Popen(command, stdout=PIPE, shell=True)
