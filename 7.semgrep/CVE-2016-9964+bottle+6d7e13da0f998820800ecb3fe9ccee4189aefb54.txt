                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 12 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                            
  [36m[22m[24m  bottle.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          154‚îÜ exec(compile('def _raise(*a): raise a[0], a[1], a[2]', '<py3fix>', 'exec'))
   
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(tob(etag))
          2847‚îÜ etag = hashlib.sha1(tob(etag)).hexdigest()
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          2996‚îÜ msg = base64.b64encode(pickle.dumps(data, -1))
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          2996‚îÜ msg = base64.b64encode(pickle.dumps(data, -1))
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          3009‚îÜ return pickle.loads(base64.b64decode(msg))
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          3009‚îÜ return pickle.loads(base64.b64decode(msg))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          3520‚îÜ return eval('%s.%s' % (module, target), namespace)
   
     ‚ù± [1mpython.lang.security.audit.mako-templates-detected.mako-templates-detected[0m
          Mako templates do not provide a global HTML escaping mechanism. This means you must escape all      
          sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are
          using Mako to serve web content, consider using a system such as Jinja2 which enables global        
          escaping.                                                                                           
          Details: https://sg.run/Q5v4                                                                        
                                                                                                              
          3787‚îÜ self.tpl = Template(self.source, lookup=lookup, **options)
            ‚ãÆ‚îÜ----------------------------------------
          3789‚îÜ self.tpl = Template(uri=self.name,
          3790‚îÜ                     filename=self.filename,
          3791‚îÜ                     lookup=lookup, **options)
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          3825‚îÜ self.env = Environment(loader=FunctionLoader(self.loader), **kwargs)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          3908‚îÜ exec(self.co, env)
                                 
  [36m[22m[24m  docs/async.rst[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.lang.security.detect-insecure-websocket.detect-insecure-websocket[0m
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
          Details: https://sg.run/GWyz                                                                     
                                                                                                           
          119‚îÜ var ws = new WebSocket("ws://example.com:8080/websocket");
