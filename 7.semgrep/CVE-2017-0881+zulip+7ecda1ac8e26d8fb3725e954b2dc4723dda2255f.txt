                     
                     
┌───────────────────┐
│ 289 Code Findings │
└───────────────────┘
                                          
  [36m[22m[24m  analytics/lib/counts.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          155┆ cursor.execute(realmcount_query, {'end_time': end_time})
            ⋮┆----------------------------------------
          173┆ cursor.execute(installationcount_query, {'end_time': end_time})
            ⋮┆----------------------------------------
          201┆ cursor.execute(query_, {'time_start': start_time, 'time_end': end_time})
                                                               
  [36m[22m[24m  analytics/management/commands/realm_stats.py[0m
    ❯❱ [1mpython.django.security.audit.query-set-extra.avoid-query-set-extra[0m
          QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL
          injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the   
          Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.                      
          Details: https://sg.run/kXZP                                                                        
                                                                                                              
          104┆ streams = Stream.objects.filter(realm=realm).extra(
          105┆     tables=['zerver_subscription', 'zerver_recipient'],
          106┆     where=['zerver_subscription.recipient_id = zerver_recipient.id',
          107┆            'zerver_recipient.type = 2',
          108┆            'zerver_recipient.type_id = zerver_stream.id',
          109┆            'zerver_subscription.active = true']).annotate(count=Count("name"))
                                     
  [36m[22m[24m  analytics/views.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
          972┆ return HttpResponseNotFound("Realm %s does not exist" % (realm_str,))
                                                               
  [36m[22m[24m  api/integrations/asana/zulip_asana_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           27┆ ASANA_API_KEY = "0123456789abcdef0123456789abcdef"
            ⋮┆----------------------------------------
           31┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                                     
  [36m[22m[24m  api/integrations/basecamp/zulip_basecamp_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           35┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                                     
  [36m[22m[24m  api/integrations/codebase/zulip_codebase_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           41┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                           
  [36m[22m[24m  api/integrations/git/zulip_git_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           26┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                                       
  [36m[22m[24m  api/integrations/openshift/zulip_openshift_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           28┆ ZULIP_API_KEY = '0123456789abcdef0123456789abcdef'
                                                      
  [36m[22m[24m  api/integrations/perforce/git_p4.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          468┆ entry = marshal.load(p4.stdout)
            ⋮┆----------------------------------------
          1135┆ input = marshal.dumps(c)
                                                                     
  [36m[22m[24m  api/integrations/perforce/zulip_perforce_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           26┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                           
  [36m[22m[24m  api/integrations/svn/zulip_svn_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           26┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                                             
  [36m[22m[24m  api/integrations/trac/zulip_trac_config.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           27┆ ZULIP_API_KEY = "0123456789abcdef0123456789abcdef"
                                       
  [36m[22m[24m  bots/check-mirroring[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(stream.encode("utf-8"))
           97┆ assert(hashlib.sha1(stream.encode("utf-8")).hexdigest().startswith(test))
                                                
  [36m[22m[24m  bots/zephyr_mirror_backend.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(zephyr_class)
          217┆ not hashlib.sha1(zephyr_class).hexdigest().startswith(options.shard)):
                                                   
  [36m[22m[24m  contrib_bots/bots/giphy/giphy.py[0m
     ❱ [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
           84┆ data = requests.get(GIPHY_TRANSLATE_API, params=query)
                                      
  [36m[22m[24m  contrib_bots/run.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           27┆ module = importlib.import_module(module_name)
                                      
  [36m[22m[24m  docs/translating.md[0m
     ❱ [1mpython.django.security.audit.xss.template-blocktranslate-no-escape.template-blocktranslate-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/3xpK                                                                     
                                                                                                           
          133┆ {% blocktrans %}This string will have {{ value }} inside.{% endblocktrans %}
                                                        
  [36m[22m[24m  frontend_tests/node_tests/settings.js[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           14┆ api_key: "QadL788EkiottHmukyhHgePUFHREiu8b",
            ⋮┆----------------------------------------
           29┆ api_key: "nSlA0mUm7G42LP85lMv7syqFTzDE2q34",
                                            
  [36m[22m[24m  frontend_tests/run-casper[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          102┆ ret = subprocess.call(cmd, shell=True)
                                                   
  [36m[22m[24m  frontend_tests/zjsunit/output.js[0m
    ❯❱ [1mjavascript.lang.security.audit.path-traversal.path-join-resolve-traversal.path-join-resolve-traversal[0m
          Detected possible user input going into a `path.join` or `path.resolve` function. This could   
          possibly lead to a path traversal vulnerability,  where the attacker can access arbitrary files
          stored in the file system. Instead, be sure to sanitize or validate user input first.          
          Details: https://sg.run/OPqk                                                                   
                                                                                                         
          100┆ var fn = path.join(output_dir, href);
                                                      
  [36m[22m[24m  puppet/apt/spec/defines/key_spec.rb[0m
    ❯❱ [1mruby.lang.security.weak-hashes-sha1.weak-hashes-sha1[0m
          Should not use SHA1 to generate hashes. There is a proven SHA1 hash collision by Google, which could
          lead to vulnerabilities. Use SHA256, SHA3 or other hashing functions instead.                       
          Details: https://sg.run/e4qX                                                                        
                                                                                                              
           48┆ Digest::SHA1.hexdigest(str)
                                                                           
  [36m[22m[24m  puppet/stdlib/lib/puppet/parser/functions/fqdn_rotate.rb[0m
    ❯❱ [1mruby.lang.security.weak-hashes-md5.weak-hashes-md5[0m
          Should not use md5 to generate hashes. md5 is proven to be vulnerable through the use of brute-force
          attacks. Could also result in collisions, leading to potential collision attacks. Use SHA256 or     
          other hashing functions instead.                                                                    
          Details: https://sg.run/O1re                                                                        
                                                                                                              
           35┆ srand(Digest::MD5.hexdigest([lookupvar('::fqdn'),arguments].join(':')).hex)
                                               
  [36m[22m[24m  puppet/stdlib/spec/watchr.rb[0m
    ❯❱ [1mruby.lang.security.dangerous-exec.dangerous-exec[0m
          Detected non-static command inside system. Audit the input to 'system'. If unverified user data can
          reach this call site, this is a code injection vulnerability. A malicious actor can inject a       
          malicious script to execute arbitrary code.                                                        
          Details: https://sg.run/R8GY                                                                       
                                                                                                             
           17┆ system %(#{growlnotify} #{options} &)
   
    ❯❱ [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
           22┆ `#{cmd}`
                                                      
  [36m[22m[24m  puppet/zulip/files/nginx/nginx.conf[0m
    ❯❱ [1mgeneric.nginx.security.insecure-ssl-version.insecure-ssl-version[0m
          Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions
          are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.             
          Details: https://sg.run/gLKy                                                                       
                                                                                                             
           55┆ ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                                                                            
  [36m[22m[24m  puppet/zulip/files/nginx/sites-available/zulip-enterprise[0m
    ❯❱ [1mgeneric.nginx.security.header-redefinition.header-redefinition[0m
          The 'add_header' directive is called in a 'location' block after headers have been set at the server
          block. Calling 'add_header' in the location block will actually overwrite the headers defined in the
          server block, no matter which headers are set. To fix this, explicitly set all headers or set all   
          headers in the server block.                                                                        
          Details: https://sg.run/Lwl7                                                                        
                                                                                                              
           16┆ add_header X-Content-Type-Options nosniff;
            ⋮┆----------------------------------------
           22┆ add_header X-Content-Type-Options nosniff;
                                                                        
  [36m[22m[24m  puppet/zulip/lib/puppet/parser/functions/zulipconf.rb[0m
    ❯❱ [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
            5┆ output = `/usr/bin/crudini --get /etc/zulip/zulip.conf #{joined} 2>&1`; result=$?.success?
                                                                          
  [36m[22m[24m  puppet/zulip/lib/puppet/parser/functions/zulipsecret.rb[0m
    ❯❱ [1mruby.lang.security.dangerous-subshell.dangerous-subshell[0m
          Detected non-static command inside `...`. If unverified user data can reach this call site, this is 
          a code injection vulnerability. A malicious actor can inject a malicious script to execute arbitrary
          code.                                                                                               
          Details: https://sg.run/NrxL                                                                        
                                                                                                              
            5┆ output = `/usr/bin/crudini --get /etc/zulip/zulip-secrets.conf #{joined} 2>&1`;
               result=$?.success?                                                             
                                           
  [36m[22m[24m  scripts/lib/hash_reqs.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(deps_str.encode('utf-8'))
           49┆ return hashlib.sha1(deps_str.encode('utf-8')).hexdigest()
                                            
  [36m[22m[24m  scripts/lib/node_cache.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256()
           21┆ sha1sum = hashlib.sha1()
                                                      
  [36m[22m[24m  scripts/lib/setup_path_on_import.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           18┆ exec(open(activate_this).read(), {}, dict(__file__=activate_this))
                                            
  [36m[22m[24m  scripts/lib/setup_venv.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          224┆ exec(open(activate_this).read(), {}, dict(__file__=activate_this))
            ⋮┆----------------------------------------
          245┆ exec(open(activate_this).read(), {}, dict(__file__=activate_this))
                                           
  [36m[22m[24m  static/js/alert_words.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `word` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           27┆ var regex = new RegExp('(' + before_punctuation + ')' +
           28┆                        '(' + clean + ')' +
           29┆                        '(' + after_punctuation + ')' , 'ig');
                                    
  [36m[22m[24m  static/js/echo.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          402┆ return [new RegExp(pattern, js_flags), url];
                                      
  [36m[22m[24m  static/js/filter.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `operand` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           12┆ var related_regexp = new RegExp(/^(un)*/.source + util.escape_regexp(base_stream_name) +
               /(\.d)*$/.source, 'i');                                                                 
            ⋮┆----------------------------------------
           31┆ related_regexp = new RegExp(/^/.source + util.escape_regexp(base_topic) + /(\.d)*$/.source,
               'i');                                                                                      
                                    
  [36m[22m[24m  static/js/subs.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `o` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          513┆ return new RegExp(o).test(sub_name);
                                                
  [36m[22m[24m  static/js/typeahead_helper.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           10┆ var regex = new RegExp('(' + query + ')', 'ig');
            ⋮┆----------------------------------------
           49┆ var regex = new RegExp('(^' + query + ')', 'ig');
                                                    
  [36m[22m[24m  static/third/lazyload/lazyload.js[0m
   ❯❯❱ [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          252┆ node.innerHTML = '@import "' + url + '";';
                                                    
  [36m[22m[24m  static/third/marked/lib/marked.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `src` function argument, this might allow an attacker to cause a Regular     
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          326┆ ? item.replace(new RegExp('^ {1,' + space + '}', 'gm'), '')
            ⋮┆----------------------------------------
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `opt` function argument, this might allow an attacker to cause a Regular     
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          1310┆ if (!name) return new RegExp(regex, opt);
            ⋮┆----------------------------------------
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          1310┆ if (!name) return new RegExp(regex, opt);
                                                      
  [36m[22m[24m  static/third/sockjs/sockjs-0.3.4.js[0m
    ❯❱ [1mjavascript.browser.security.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/7ope                                                                     
                                                                                                           
           26┆ var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof 
               i=="object"&&typeof i.toJSON=="function"&&(i=i.toJSON(a)),typeof                           
               rep=="function"&&(i=rep.call(b,a,i));switch(typeof i){case"string":return                  
               quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return S
               tring(i);case"object":if(!i)return"null";gap+=indent,h=[];if(Object.prototype.toString.appl
               y(i)==="[object Array]"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||"null";e=h.length===0?"
               []":gap?"[\n"+gap+h.join(",\n"+gap)+"\n"+g+"]":"["+h.join(",")+"]",gap=g;return            
               e}if(rep&&typeof rep=="object"){f=rep.length;for(c=0;c<f;c+=1)typeof                       
               rep[c]=="string"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+e))}else for(d in 
               i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?": ":":")+
               e));e=h.length===0?"{}":gap?"{\n"+gap+h.join(",\n"+gap)+"\n"+g+"}":"{"+h.join(",")+"}",gap=
               g;return e}}function quote(a){escapable.lastIndex=0;return                                 
               escapable.test(a)?'"'+a.replace(escapable,function(a){var b=meta[a];return typeof b=="strin
               g"?b:"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+a+'"'}function        
               f(a){return a<10?"0"+a:a}"use strict",typeof                                               
               Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(a){return isFinite(this.
               valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-                            
               "+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.get
               UTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.t
               oJSON=function(a){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-                     
               \u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-               
               \uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-   
               \u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-                                              
               \uffff]/g,gap,indent,meta={"\b":"\\b","\t":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"'
               ,"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(a,b,c){var   
               d;gap="",indent="";if(typeof c=="number")for(d=0;d<c;d+=1)indent+=" ";else typeof          
               c=="string"&&(indent=c);rep=b;if(!b||typeof b=="function"||typeof b=="object"&&typeof      
               b.length=="number")return str("",{"":a});throw new Error("JSON.stringify")}),typeof        
               JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(a,b){var          
               c,d,e=a[b];if(e&&typeof e=="object")for(c in                                               
               e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete      
               e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(tex
               t=text.replace(cx,function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-    
               4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-                   
               F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-            
               ]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,""))){j=eval("("+text+")");return typeof     
               reviver=="function"?walk({"":j},""):j}throw new SyntaxError("JSON.parse")})}()             
   
    ❯❱ [1mjavascript.browser.security.wildcard-postmessage-configuration.wildcard-postmessage-configuration[0m
          The target origin of the window.postMessage() API is set to "*". This could allow for information
          disclosure due to the possibility of any origin allowed to receive the message.                  
          Details: https://sg.run/PJ4p                                                                     
                                                                                                           
          1837┆ parent.postMessage(curr_window_id + type + (data || ''), '*');
                                                    
  [36m[22m[24m  templates/analytics/activity.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           26┆ <a href="{{ realm_link }}">Graph</a><br />
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           26┆ <a href="{{ realm_link }}">Graph</a><br />
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           26┆ <a href="{{ realm_link }}">Graph</a><br />
                                                              
  [36m[22m[24m  templates/confirmation/confirm_mituser.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
            5┆ <form id="register" action="/accounts/register/" method="post">
            6┆     {{ csrf_input }}
            7┆     <input type="hidden" value="{{ key }}" name="key"/>
            8┆     <input type="hidden" value="1" name="from_confirmation"/>
            9┆ </form>
                                                                          
  [36m[22m[24m  templates/confirmation/confirm_preregistrationuser.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           11┆ <form id="register" action="/accounts/register/" method="post">
           12┆     {{ csrf_input }}
           13┆     <input type="hidden" value="{{ key }}" name="key"/>
           14┆     <input type="hidden" value="1" name="from_confirmation"/>
           15┆     <input type="hidden" value="{% if full_name %}{{ full_name }}{% endif %}"
               name="full_name"/>                                                           
           16┆ </form>
                                              
  [36m[22m[24m  templates/zerver/about.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           41┆ the <a href="http://zulip.readthedocs.io/en/latest/">Zulip
           42┆ documentation</a>.
            ⋮┆----------------------------------------
           54┆ and <a href="http://zulip.readthedocs.io/en/latest/">over 50,000
           55┆ words of developer documentation</a> to make it easy for new
                                                              
  [36m[22m[24m  templates/zerver/accounts_accept_terms.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           41┆ {% trans %}I agree to the <a href="{{ server_uri }}/terms">Terms of Service</a>{% endtrans
               %}.                                                                                       
                                                      
  [36m[22m[24m  templates/zerver/accounts_home.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           20┆ <form class="form-inline" id="send_confirm" name="email_form"
           21┆       action="{{ current_url() }}" method="post">
           22┆     {{ csrf_input }}
           23┆     <input type="text" class="email required" placeholder="{{ _("Enter your work email
               address") }}"                                                                         
           24┆            id="email" name="email"/>
           25┆     <input type="submit" class="button btn btn-primary btn-large register-button" value="{{
               _("Sign up") }}"/>                                                                         
           26┆ </form>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           39┆ <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="zocial google register-
               google-button">{{ _("Sign up with Google") }}</a>                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           39┆ <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="zocial google register-
               google-button">{{ _("Sign up with Google") }}</a>                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           39┆ <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="zocial google register-
               google-button">{{ _("Sign up with Google") }}</a>                                          
                                                              
  [36m[22m[24m  templates/zerver/accounts_send_confirm.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           15┆ <form id="resend_confirm" action="/accounts/home/" method="post" style="position:
               absolute;">                                                                      
           16┆     {{ csrf_input }}
           17┆     <input type="hidden" class="email" id="email" value="{{ email }}" name="email"/>&nbsp;
           18┆ </form>
                                                      
  [36m[22m[24m  templates/zerver/api_endpoints.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ <p>In addition to our <a href="/api">pre-built API bindings for Python</a>, we also have a
               <a href="http://en.wikipedia.org/wiki/Representational_state_transfer">REST-ful</a> web   
               API.</p>                                                                                  
   
    ❯❱ [1mpython.django.security.audit.xss.template-autoescape-off.template-autoescape-off[0m
          Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'.
          This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site   
          scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.       
          Details: https://sg.run/Q5WZ                                                                    
                                                                                                          
           21┆ {% autoescape off %}
                                             
  [36m[22m[24m  templates/zerver/apps.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           39┆ the <a href="http://itunes.com/apps/zulip">App Store</a>{% endtrans %}!</p>
            ⋮┆----------------------------------------
           41┆ <a href="http://itunes.com/apps/zulip">
           42┆   <img alt="Get it in the App Store" src="/static/images/app-screenshots/ios_badge.png"
               alt="Apple App Store icon for Zulip" />                                                
           43┆ </a>
            ⋮┆----------------------------------------
           52┆ in <a href="http://electron.atom.io/">Electron</a>, a
                                             
  [36m[22m[24m  templates/zerver/base.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           17┆ <script src="https://html5shim.googlecode.com/svn/trunk/html5.js"></script>
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           23┆ <script type="text/javascript">var dropboxAppKey = "{{ dropboxAppKey }}";</script>
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           23┆ <script type="text/javascript">var dropboxAppKey = "{{ dropboxAppKey }}";</script>
                                                     
  [36m[22m[24m  templates/zerver/create_realm.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           20┆ <form class="form-inline" id="send_confirm" name="email_form"
           21┆       action="{{ current_url() }}" method="post">
           22┆     {{ csrf_input }}
           23┆     <input type="text" class="email required" placeholder="{{ _("Enter your work email
               address") }}"                                                                         
           24┆            id="email" name="email"/>
           25┆     <input type="submit" class="new-organization-button btn btn-primary btn-large register-
               button" value="{{ _("Create organization") }}"/>                                           
           26┆ </form>
                                                                   
  [36m[22m[24m  templates/zerver/emails/digest/digest_email.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            7┆ <p>A lot has happened on Zulip while you've been away! <a href="{{ realm_uri }}">Visit
               Zulip</a> to catch up.</p>                                                            
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            7┆ <p>A lot has happened on Zulip while you've been away! <a href="{{ realm_uri }}">Visit
               Zulip</a> to catch up.</p>                                                            
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            7┆ <p>A lot has happened on Zulip while you've been away! <a href="{{ realm_uri }}">Visit
               Zulip</a> to catch up.</p>                                                            
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           30┆ <p><a href="{{ realm_uri }}/#narrow/is/private">Catch up on the rest of your PMs.</a></p>
            ⋮┆----------------------------------------
           62┆ <p><a href="{{ realm_uri }}">Catch up on the rest of these conversations.</a></p>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           62┆ <p><a href="{{ realm_uri }}">Catch up on the rest of these conversations.</a></p>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           62┆ <p><a href="{{ realm_uri }}">Catch up on the rest of these conversations.</a></p>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           82┆ <p>Click on {% if new_stream_count and new_stream_count > 1 %}a{% else %}the{% endif %}
               name to check out some of the traffic, or visit your <a href="{{ realm_uri             
               }}/#subscriptions">Streams page</a> to subscribe.</p>                                  
            ⋮┆----------------------------------------
           91┆ <p><a href="{{ realm_uri }}">Click here to log in to Zulip and catch up.</a></p>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           91┆ <p><a href="{{ realm_uri }}">Click here to log in to Zulip and catch up.</a></p>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           91┆ <p><a href="{{ realm_uri }}">Click here to log in to Zulip and catch up.</a></p>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           97┆ <a href="{{ realm_uri }}/#settings">Manage email preferences</a> |
            ⋮┆----------------------------------------
           98┆ <a href="{{ unsubscribe_link }}">Unsubscribe from digest emails</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           98┆ <a href="{{ unsubscribe_link }}">Unsubscribe from digest emails</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           98┆ <a href="{{ unsubscribe_link }}">Unsubscribe from digest emails</a>
                                                                         
  [36m[22m[24m  templates/zerver/emails/find_team/find_team_email.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           16┆ <a href="{{ user_profile.realm.uri }}" style="color:#08c">{{ user_profile.realm.uri }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           16┆ <a href="{{ user_profile.realm.uri }}" style="color:#08c">{{ user_profile.realm.uri }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           16┆ <a href="{{ user_profile.realm.uri }}" style="color:#08c">{{ user_profile.realm.uri }}</a>
                                                             
  [36m[22m[24m  templates/zerver/emails/followup/day1.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           10┆ <a href="{{ realm_uri }}/"><img style="max-height:75px; height:75px;"  height="75px"       
               alt="Zulip" title="{{ _('Zulip') }}" src="{{ realm_uri }}/static/images/landing-page/zulip-
               header.png" /></a>                                                                         
            ⋮┆----------------------------------------
           20┆ <p><a href="{{ server_uri }}/hello" style="color:#08c">{{ server_uri }}/hello</a> has a 
               nice overview of what we're up to, but here are a few tips that'll help you get the most
               out of it:</p>                                                                          
            ⋮┆----------------------------------------
           23┆ <li>Zulip works best when it's always open, so <a href="{{ realm_uri }}/apps" 
               style="color:#08c">grab our apps</a>! (Mac, Windows, Linux, Android, iOS)</li>
            ⋮┆----------------------------------------
           46┆ <a href="{{ realm_uri }}/#settings">Manage email preferences</a> |
            ⋮┆----------------------------------------
           47┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a> <small>(but there's
               only one more and aren't you a little curious?)</small>                                 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           47┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a> <small>(but there's
               only one more and aren't you a little curious?)</small>                                 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           47┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a> <small>(but there's
               only one more and aren't you a little curious?)</small>                                 
                                                             
  [36m[22m[24m  templates/zerver/emails/followup/day2.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           10┆ <a href="{{ realm_uri }}/"><img style="max-height:75px; height:75px;"  height="75px"       
               alt="Zulip" title="{{ _('Zulip') }}" src="{{ realm_uri }}/static/images/landing-page/zulip-
               header.png" /></a>                                                                         
            ⋮┆----------------------------------------
           29┆ <p><a href="{{ realm_uri }}">Take it for a spin now.</a></p>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           29┆ <p><a href="{{ realm_uri }}">Take it for a spin now.</a></p>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           29┆ <p><a href="{{ realm_uri }}">Take it for a spin now.</a></p>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           37┆ <a href="{{ realm_uri }}/#settings">Manage email preferences</a> |
            ⋮┆----------------------------------------
           38┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           38┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           38┆ <a href="{{ unsubscribe_link }}">Unsubscribe from welcome emails</a>
                                                                                    
  [36m[22m[24m  templates/zerver/emails/invitation/invitation_reminder_email.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           11┆ <a href="{{ server_uri }}/hello">
            ⋮┆----------------------------------------
           29┆ <a href="{{ activate_url }}" style="color:#08c">{{ activate_url }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           29┆ <a href="{{ activate_url }}" style="color:#08c">{{ activate_url }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           29┆ <a href="{{ activate_url }}" style="color:#08c">{{ activate_url }}</a>
                                                 
  [36m[22m[24m  templates/zerver/features.html[0m
     ❱ [1mpython.django.security.audit.xss.template-translate-as-no-escape.template-translate-as-no-escape[0m
          Translated strings will not be escaped when rendered in a template. This leads to a vulnerability
          where translators could include malicious script tags in their translations. Consider using      
          `force_escape` to explicitly escape a translated text.                                           
          Details: https://sg.run/PJDz                                                                     
                                                                                                           
            4┆ <div class="feature-page-header">{% trans %}Zulip Features{% endtrans %}</div>
            5┆   <div class="feature-block left">
            6┆     <i class="icon-vector-random icon-vector-3x feature-icon"></i>
            7┆     <h4>{% trans %}Threaded group conversations{% endtrans %}</h4>
            8┆     <p>{% trans %}Talk about multiple topics at once without getting lost or
            9┆     overwhelmed.{% endtrans %}</p>
           10┆   </div>
           11┆   <div class="feature-block">
           12┆     <i class="icon-vector-comments icon-vector-3x feature-icon"></i>
           13┆     <h4>{% trans %}One-on-one and group private conversations{% endtrans %}</h4>
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          127┆ off-the-shelf <a href="{{ server_uri }}/integrations">integrations</a> for
            ⋮┆----------------------------------------
          134┆ dead-simple RESTful <a href="{{ server_uri }}/api">API and Python bindings</a>
                                                     
  [36m[22m[24m  templates/zerver/find_my_team.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           29┆ <form class="form-inline" id="find_my_team" name="email_form"
           30┆       action="{{ current_url() }}" method="post">
           31┆   {{ csrf_input }}
           32┆   <input type="text" class="form-control required"
           33┆          placeholder="{{ _("Enter email addresses") }}"
           34┆          id="emails" name="emails"/>
           35┆   <button type="submit" class="btn btn-primary">{{ _('Find team') }}</button>
           36┆   <div><i>{{ form.emails.help_text }}</i></div>
           37┆ </form>
                                              
  [36m[22m[24m  templates/zerver/hello.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           31┆ <a href="{{ url('login-sso') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Log in now!') }}</a>                                                                 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           31┆ <a href="{{ url('login-sso') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Log in now!') }}</a>                                                                 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           31┆ <a href="{{ url('login-sso') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Log in now!') }}</a>                                                                 
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           33┆ <a href="{{ url('register') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Register now!') }}</a>                                                              
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           33┆ <a href="{{ url('register') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Register now!') }}</a>                                                              
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           33┆ <a href="{{ url('register') }}" class="main-signup-button btn btn-large btn-primary">{{
               _('Register now!') }}</a>                                                              
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          199┆ <a href="{{ url('login-sso') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Log in now') }}</a>                                                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          199┆ <a href="{{ url('login-sso') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Log in now') }}</a>                                                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          199┆ <a href="{{ url('login-sso') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Log in now') }}</a>                                                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          201┆ <a href="{{ url('register') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Register now') }}</a>                                                                 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          201┆ <a href="{{ url('register') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Register now') }}</a>                                                                 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          201┆ <a href="{{ url('register') }}" class="bottom-signup-button btn btn-large btn-primary">{{
               _('Register now') }}</a>                                                                 
                                              
  [36m[22m[24m  templates/zerver/index.html[0m
    ❯❱ [1mpython.django.security.audit.xss.template-autoescape-off.template-autoescape-off[0m
          Detected a template block where autoescaping is explicitly disabled with '{% autoescape off %}'.
          This allows rendering of raw HTML in this segment. Turn autoescaping on to prevent cross-site   
          scripting (XSS). If you must do this, consider instead, using `mark_safe` in Python code.       
          Details: https://sg.run/Q5WZ                                                                    
                                                                                                          
            8┆ {% autoescape off %}
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
            9┆ var page_params = {{ page_params }};
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
            9┆ var page_params = {{ page_params }};
                                                     
  [36m[22m[24m  templates/zerver/integrations.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           35┆ can <a href="http://zulip.readthedocs.io/en/latest/integration-guide.html">contribute
           36┆ an integration</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           73┆ <a class="integration-link integration-{{ integration.name }}" href="{{ integration.git_url
               }}">                                                                                       
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           73┆ <a class="integration-link integration-{{ integration.name }}" href="{{ integration.git_url
               }}">                                                                                       
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           73┆ <a class="integration-link integration-{{ integration.name }}" href="{{ integration.git_url
               }}">                                                                                       
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          632┆ be <a href="http://mercurial.selenic.com/wiki/QuickStart#Network_support">browsable
          633┆ via the web</a>, add a <code>web_url</code> configuration option to
            ⋮┆----------------------------------------
          731┆ have <a href="http://nagios.sourceforge.net/docs/3_0/extcommands.html">external
          732┆ commands enabled in Nagios</a>, you can generate a test notice
            ⋮┆----------------------------------------
          825┆ <a href="http://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.scripting.html"
               >trigger</a>                                                                               
            ⋮┆----------------------------------------
          842┆ <a href="http://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.scripting.html#
               d0e14583">trigger table</a>                                                                
            ⋮┆----------------------------------------
          919┆ the <a href="http://www.redmine.org/projects/redmine/wiki/Plugins">Redmine
          920┆ plugin installation guide</a> to install
            ⋮┆----------------------------------------
          1018┆ the <a href="http://pysvn.tigris.org/project_downloads.html">instructions
          1019┆ on the pysvn website</a>.</li>
            ⋮┆----------------------------------------
          1152┆ Log in to <a href="http://dev.twitter.com">http://dev.twitter.com</a>.
                                                     
  [36m[22m[24m  templates/zerver/left-sidebar.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           51┆ for now, enjoy this <a target="_blank"
           52┆                        href="http://www.youtube.com/watch?v=PW71En5Pa5s#t=2m01s">song
           53┆   that expresses how we feel when you're
           54┆   logged out</a>.{% endtrans %}
                                              
  [36m[22m[24m  templates/zerver/login.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          126┆ <a href="{{ url('django.contrib.auth.views.password_reset') }}">{{ _('Forgot password?')
               }}</a>                                                                                  
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          126┆ <a href="{{ url('django.contrib.auth.views.password_reset') }}">{{ _('Forgot password?')
               }}</a>                                                                                  
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          126┆ <a href="{{ url('django.contrib.auth.views.password_reset') }}">{{ _('Forgot password?')
               }}</a>                                                                                  
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          163┆ or <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="login-google-button
               zocial google">{{ _('Sign in with Google') }}</a>                                         
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          163┆ or <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="login-google-button
               zocial google">{{ _('Sign in with Google') }}</a>                                         
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          163┆ or <a href="{{ url('zerver.views.auth.start_google_oauth2') }}" class="login-google-button
               zocial google">{{ _('Sign in with Google') }}</a>                                         
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          169┆ or <a href="{{ url('login-social', args=('github',)) }}" class="login-github-button zocial
               github">                                                                                  
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          169┆ or <a href="{{ url('login-social', args=('github',)) }}" class="login-github-button zocial
               github">                                                                                  
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          169┆ or <a href="{{ url('login-social', args=('github',)) }}" class="login-github-button zocial
               github">                                                                                  
                                               
  [36m[22m[24m  templates/zerver/logout.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
            2┆ <form id="logout_form" action="/accounts/logout/" method="POST">{{ csrf_input }}
            3┆ </form>
                                                      
  [36m[22m[24m  templates/zerver/markdown_help.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           46┆ <td>:heart: (and <a href="http://www.emoji-cheat-sheet.com/" target="_blank">many
               others</a>, from the <a href="https://code.google.com/p/noto/"                   
               license="/static/generated/emoji/images/emoji/NOTICE" target="_blank">Noto       
               Project</a>)</td>                                                                
                                                             
  [36m[22m[24m  templates/zerver/missed_message_email.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           31┆ <a href="{{ realm_uri }}">Click here to log in to Zulip and view your new messages.</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           31┆ <a href="{{ realm_uri }}">Click here to log in to Zulip and view your new messages.</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           31┆ <a href="{{ realm_uri }}">Click here to log in to Zulip and view your new messages.</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           47┆ <p><a href="{{ realm_uri }}/#settings">Manage email preferences</a> | <a href="{{
               unsubscribe_link }}">Unsubscribe from missed message emails</a></p>              
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           47┆ <p><a href="{{ realm_uri }}/#settings">Manage email preferences</a> | <a href="{{
               unsubscribe_link }}">Unsubscribe from missed message emails</a></p>              
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           47┆ <p><a href="{{ realm_uri }}/#settings">Manage email preferences</a> | <a href="{{
               unsubscribe_link }}">Unsubscribe from missed message emails</a></p>              
                                                
  [36m[22m[24m  templates/zerver/portico.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <a class="brand logo" href="{{ server_uri }}/"><img src="{{ custom_logo_url }}"
               class="portico-logo" alt="Zulip" content="Zulip" /></a>                        
            ⋮┆----------------------------------------
           21┆ <a class="brand logo" href="{{ server_uri }}/"><img                                     
               src="/static/images/logo/zulipcornerlogo@2x.png" class="portico-simple-logo" alt="Zulip"
               content="Zulip" /></a>                                                                  
            ⋮┆----------------------------------------
           29┆ <a href="{{login_url}}">{{ _('Log in') }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           29┆ <a href="{{login_url}}">{{ _('Log in') }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           29┆ <a href="{{login_url}}">{{ _('Log in') }}</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           34┆ <a href="{{ url('login-sso') }}">{{ _('Log In') }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           34┆ <a href="{{ url('login-sso') }}">{{ _('Log In') }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           34┆ <a href="{{ url('login-sso') }}">{{ _('Log In') }}</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           36┆ <a href="{{ url('register') }}">{{ _('Register') }}</a>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           36┆ <a href="{{ url('register') }}">{{ _('Register') }}</a>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           36┆ <a href="{{ url('register') }}">{{ _('Register') }}</a>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           59┆ <li><a href="{{ server_uri }}/hello">{{ _('About') }}</a></li>
            ⋮┆----------------------------------------
           68┆ <li><a href="{{ server_uri }}/terms">{{ _('Legal') }}</a></li>
            ⋮┆----------------------------------------
           70┆ <li><a href="{{ server_uri }}/privacy">{{ _('Privacy') }}</a></li>
            ⋮┆----------------------------------------
           75┆ <li><a href="{{login_url}}">{{ _('Log in') }}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           75┆ <li><a href="{{login_url}}">{{ _('Log in') }}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           75┆ <li><a href="{{login_url}}">{{ _('Log in') }}</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           81┆ <li><a href="{{ url('register') }}">{{ _('Register') }}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           81┆ <li><a href="{{ url('register') }}">{{ _('Register') }}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           81┆ <li><a href="{{ url('register') }}">{{ _('Register') }}</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           85┆ <li><a href="{{ server_uri }}/create_realm">{{ _('Create new organization') }}</a></li>
            ⋮┆----------------------------------------
           90┆ <li><a href="{{ server_uri }}/find_my_team">{{ _('Find my team') }}</a></li>
                                                 
  [36m[22m[24m  templates/zerver/register.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          177┆ {% trans %}I agree to the <a href="{{ server_uri }}/terms" target="_blank">Terms of
               Service</a>.{% endtrans %}                                                         
                                              
  [36m[22m[24m  templates/zerver/reset.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
            8┆ <form method="post" class="form-horizontal" action="{{
               url('django.contrib.auth.views.password_reset') }}">  
            9┆ {{ csrf_input }}
           10┆     <div class="control-group">
           11┆         <label for="id_email" class="control-label">{{ _('Email') }}</label>
           12┆         <div class="controls">
           13┆             <input id="id_email" class="required" type="text" name="email"
           14┆                    value="{% if form.email.value() %}{{ form.email.value() }}{% endif %}"
           15┆                    maxlength="100" />
           16┆             {% if form.email.errors %}
           17┆                 {% for error in form.email.errors %}
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
                                                   
  [36m[22m[24m  templates/zerver/reset_done.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            4┆ <p>{% trans login_url=url('django.contrib.auth.views.login') %}Please <a href="{{ login_url
               }}">log in</a>.{% endtrans %}</p>                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            4┆ <p>{% trans login_url=url('django.contrib.auth.views.login') %}Please <a href="{{ login_url
               }}">log in</a>.{% endtrans %}</p>                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            4┆ <p>{% trans login_url=url('django.contrib.auth.views.login') %}Please <a href="{{ login_url
               }}">log in</a>.{% endtrans %}</p>                                                          
                                                            
  [36m[22m[24m  templates/zerver/unsubscribe_success.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            9┆ <p>{% trans %}To undo this change or review your other subscription settings, please visit
               your <a href="{{ realm_uri }}/#settings">Zulip Settings page</a>{% endtrans %}.</p>       
                                  
  [36m[22m[24m  tools/minify-js[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call 
          will spawn the command using a shell process. Doing so propagates current shell settings and      
          variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False'
          instead.                                                                                          
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.check_output(cmd, shell=False)
          135┆ js = subprocess.check_output(cmd, shell=True)
                                   
  [36m[22m[24m  tools/run-dev.py[0m
   ❯❯❱ [1mjavascript.lang.security.detect-insecure-websocket.detect-insecure-websocket[0m
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
          Details: https://sg.run/GWyz                                                                     
                                                                                                           
          193┆ websocket_url = "ws://{host}:{port}{uri}".format(
                                                
  [36m[22m[24m  tools/setup/emoji/build_emoji[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xml-parse.use-defused-xml-parse[0m
          The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks
          can leak confidential data and "XML bombs" can cause denial of service. Do not use this library to
          parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.           
          Details: https://sg.run/n3jG                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mdefusedxml.etree.ElementTree.parse(ttx)
          112┆ xml = ET.parse(ttx)
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256()
          157┆ sha = hashlib.sha1()
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call('ttx -v -z extfile -d {} NotoColorEmoji.ttf'.format(EMOJI_DUMP_DIR_PATH),
              shell=False)                                                                                        
          170┆ subprocess.call('ttx -v -z extfile -d {} NotoColorEmoji.ttf'.format(EMOJI_DUMP_DIR_PATH),
               shell=True)                                                                              
                                      
  [36m[22m[24m  zerver/decorator.py[0m
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
          212┆ @csrf_exempt
          213┆ @has_request_variables
          214┆ @wraps(view_func)
          215┆ def _wrapped_func_arguments(request, api_key=REQ(),
          216┆                             *args, **kwargs):
          217┆     # type: (HttpRequest, Text, *Any, **Any) -> HttpResponse
          218┆     try:
          219┆         user_profile = UserProfile.objects.get(api_key=api_key)
          220┆     except UserProfile.DoesNotExist:
          221┆         raise JsonableError(_("Invalid API key"))
             [hid 16 additional lines, adjust with --max-lines-per-finding] 
          336┆ @csrf_exempt
          337┆ @require_post
          338┆ @has_request_variables
          339┆ @wraps(view_func)
          340┆ def _wrapped_func_arguments(request, email=REQ(), api_key=REQ(default=None),
          341┆                             api_key_legacy=REQ('api-key', default=None),
          342┆                             *args, **kwargs):
          343┆     # type: (HttpRequest, Text, Optional[Text], Optional[Text], *Any, **Any) ->
               HttpResponse                                                                   
          344┆     if not api_key and not api_key_legacy:
          345┆         raise RequestVariableMissingError("api_key")
             [hid 9 additional lines, adjust with --max-lines-per-finding] 
          364┆ @csrf_exempt
          365┆ @wraps(view_func)
          366┆ def _wrapped_func_arguments(request, *args, **kwargs):
          367┆     # type: (HttpRequest, *Any, **Any) -> HttpResponse
          368┆     # First try block attempts to get the credentials we need to do authentication
          369┆     try:
          370┆         # Grab the base64-encoded authentication string, decode it, and split it into
          371┆         # the email and API key
          372┆         auth_type, credentials = request.META['HTTP_AUTHORIZATION'].split()
          373┆         # case insensitive per RFC 1945
             [hid 24 additional lines, adjust with --max-lines-per-finding] 
          503┆ @csrf_exempt
          504┆ @require_post
          505┆ @wraps(view_func)
          506┆ def _wrapped_view_func(request, *args, **kwargs):
          507┆     # type: (HttpRequest, *Any, **Any) -> HttpResponse
          508┆     if not authenticate_notify(request):
          509┆         return json_error(_('Access denied'), status=403)
          510┆     if not hasattr(request, '_tornado_handler'):
          511┆         # We got called through the non-Tornado server somehow.
          512┆         # This is not a security check; it's an internal assertion
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
                                                                      
  [36m[22m[24m  zerver/fixtures/circleci/circleci_build_failed.json[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           24┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/ad7af93c52d72ec3033b0375-username-RepoName-0-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=U56E5WthVkl4vthJDxn49EPT
               3tY%3D",                                                                                   
            ⋮┆----------------------------------------
           48┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/dd7af93c52d72ec3533b0375-username-RepoName-1-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=Ghhvg3xlZM0zQqEdsWh4oMJC
               JUo%3D",                                                                                   
            ⋮┆----------------------------------------
           71┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/0e7af93c52d72ec3d33b0375-username-RepoName-2-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=kEfrvffJwggipBvCgQ4uRjZ1
               1DI%3D",                                                                                   
            ⋮┆----------------------------------------
           95┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/3e7af93c52d72ec3f33b0375-username-RepoName-3-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=6yAGieA6zjfXySs9w4CVW4Bx
               4%2FM%3D",                                                                                 
            ⋮┆----------------------------------------
          119┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/8e7af93c52d72ec3543b0375-username-RepoName-4-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=%2BwyLffSeEU9%2FeJFdln6P
               Kb%2FEg4Q%3D",                                                                             
            ⋮┆----------------------------------------
          166┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/fe7af93c52d72ec3c43b0375-username-RepoName-6-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=h%2Fz%2Bpe8PEozUBqoocx5i
               5qXrQNI%3D",                                                                               
            ⋮┆----------------------------------------
          190┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/1f7af93c52d72ec3153b0375-username-RepoName-7-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=Ngn5%2FeClV1Tz5hKUyRGaXM
               B2skE%3D",                                                                                 
            ⋮┆----------------------------------------
          214┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/3f7af93c52d72ec3153b0375-username-RepoName-8-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=4IJ5PK5t3u%2FZSzo0dLaE19
               PKGrM%3D",                                                                                 
            ⋮┆----------------------------------------
          238┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/7f7af93c52d72ec3453b0375-username-RepoName-9-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=GdbHbMuhECyPLVHFJiIPJR%2
               BJINY%3D",                                                                                 
            ⋮┆----------------------------------------
          262┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/008af93c52d72ec3853b0375-username-RepoName-10-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=U6lYXJEbggSqqY0qvw9rwroT
               tDY%3D",                                                                                   
            ⋮┆----------------------------------------
          285┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/308af93c52d72ec3a53b0375-username-RepoName-11-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=Aj8%2BrJEk7t9QInbbOn%2Fc
               Jii9PmE%3D",                                                                               
            ⋮┆----------------------------------------
          308┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/608af93c52d72ec3e53b0375-username-RepoName-12-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582860&Signature=OngeuO58QxmiDkD5tKQ31RXK
               %2FmI%3D",                                                                                 
                                                                                                 
  [36m[22m[24m  zerver/fixtures/circleci/circleci_build_failed_when_previous_build_failed.json[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           24┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/161ea23dd240f9a2269b0375-username-Reponame-0-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=p0TgETxXRD%2FA2MumxR8Pgm
               JyVcM%3D",                                                                                 
            ⋮┆----------------------------------------
           48┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/461ea23dd240f9a2769b0375-username-Reponame-1-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=tOJMjHqHUowvmFtOOurcKbMP
               Zow%3D",                                                                                   
            ⋮┆----------------------------------------
           71┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/d61ea23dd240f9a2f69b0375-username-Reponame-2-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=29KEAOYKipW45BoUxJOO1nwv
               4wk%3D",                                                                                   
            ⋮┆----------------------------------------
           95┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/171ea23dd240f9a2179b0375-username-Reponame-3-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=%2B2c6%2FwQIImOswwfTj3bB
               xB1J6vQ%3D",                                                                               
            ⋮┆----------------------------------------
          119┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/471ea23dd240f9a2379b0375-username-Reponame-4-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=Mfe4SJjuPi7tvHEWGFLrpidi
               1Pk%3D",                                                                                   
            ⋮┆----------------------------------------
          166┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/b71ea23dd240f9a2a79b0375-username-Reponame-6-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=nrzvxQzvTIsD7z2LeOvZbO7U
               6Ms%3D",                                                                                   
            ⋮┆----------------------------------------
          190┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/281ea23dd240f9a2e79b0375-username-Reponame-7-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=CcNL7dnkFIBB%2FHvUvf%2BF
               A%2FIPZUE%3D",                                                                             
            ⋮┆----------------------------------------
          214┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/381ea23dd240f9a2f79b0375-username-Reponame-8-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=cS%2FgBkQvRmIn51mmB4Myh6
               0qsTw%3D",                                                                                 
            ⋮┆----------------------------------------
          238┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/481ea23dd240f9a2089b0375-username-Reponame-9-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=OfncCSVgIy%2BYaFHOmyFTdm
               qOjjo%3D",                                                                                 
            ⋮┆----------------------------------------
          262┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/981ea23dd240f9a2389b0375-username-Reponame-10-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=bjhmjnFFshuh9KXBfbUQ8hDn
               8uc%3D",                                                                                   
            ⋮┆----------------------------------------
          285┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/c81ea23dd240f9a2589b0375-username-Reponame-11-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=XfMdL56Tb9GeUYODrSb5b3c8
               PJQ%3D",                                                                                   
            ⋮┆----------------------------------------
          308┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/291ea23dd240f9a2889b0375-username-Reponame-12-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578441&Signature=pUoU792ReOgVVPuP6%2F2kKq
               tqU%2F4%3D",                                                                               
                                                                      
  [36m[22m[24m  zerver/fixtures/circleci/circleci_build_passed.json[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           30┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/de671c76626a34dcddcc0375-username-RepoName-0-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=gkBS%2BwBFiC4jDuxzXrAyCn
               6heFE%3D",                                                                                 
            ⋮┆----------------------------------------
           57┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/0f671c76626a34dc3ecc0375-username-RepoName-1-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=LREfyz00wuzwKXie4kOEnLLP
               yoE%3D",                                                                                   
            ⋮┆----------------------------------------
           83┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/1f671c76626a34dcbecc0375-username-RepoName-2-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=rPk2hDVW0sky4hfh0PHO43Ow
               Gsw%3D",                                                                                   
            ⋮┆----------------------------------------
          110┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/3f671c76626a34dcdecc0375-username-RepoName-3-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=3mXDVeKbeGQ%2BIRNs7C5HXq
               CBpXM%3D",                                                                                 
            ⋮┆----------------------------------------
          137┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/5f671c76626a34dceecc0375-username-RepoName-4-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=CqqLgI7Jfk943kqbaPwsIqfn
               uEo%3D",                                                                                   
            ⋮┆----------------------------------------
          190┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/9f671c76626a34dc5fcc0375-username-RepoName-6-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=p3pdN63VBafFplCOVi8KmlMC
               nbE%3D",                                                                                   
            ⋮┆----------------------------------------
          217┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/00771c76626a34dcbfcc0375-username-RepoName-7-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=ldi9Ac1pbpOLnbUYO8tP112O
               WTo%3D",                                                                                   
            ⋮┆----------------------------------------
          244┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/20771c76626a34dccfcc0375-username-RepoName-8-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=ydUob0Rmh4UKSp4KWio9D2td
               Tp4%3D",                                                                                   
            ⋮┆----------------------------------------
          271┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/40771c76626a34dcefcc0375-username-RepoName-9-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=QfIcBYxW%2Fz73Q09Q8%2BZs
               joOHzAc%3D",                                                                               
            ⋮┆----------------------------------------
          298┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/50771c76626a34dcffcc0375-username-RepoName-10-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=domD%2FzJ3QcinZjNXYvqfEQ
               uEIWg%3D",                                                                                 
            ⋮┆----------------------------------------
          325┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/70771c76626a34dc20dc0375-username-RepoName-11-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=kZhXMO7XgJ95e3WoLYg3CSAr
               2Og%3D",                                                                                   
            ⋮┆----------------------------------------
          351┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/b0771c76626a34dc40dc0375-username-RepoName-12-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=jSZgba9ChMgK5QA5tec62CKW
               vno%3D",                                                                                   
            ⋮┆----------------------------------------
          377┆ "output_url": "https://circle-production-action-                                           
               output.s3.amazonaws.com/f0771c76626a34dc70dc0375-username-RepoName-13-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620582546&Signature=S7xM9ekaaHdWBG1woewGaZ%2
               FyeAU%3D",                                                                                 
                                                                                                 
  [36m[22m[24m  zerver/fixtures/circleci/circleci_build_passed_when_previous_build_failed.json[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           24┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/5eade62b422d8e0460ab0375-username-RepoName-0-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=cxKqfIZ8Yr0ygt%2B5sAm%2F
               VDQgHN0%3D",                                                                               
            ⋮┆----------------------------------------
           48┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/beade62b422d8e04a0ab0375-username-RepoName-1-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=y%2BOoCkevqg%2BifrgIee5Q
               3h71kGc%3D",                                                                               
            ⋮┆----------------------------------------
           71┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/2fade62b422d8e0411ab0375-username-RepoName-2-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=omLU6%2BvqubBKsDAEVVv9tv
               CCB7k%3D",                                                                                 
            ⋮┆----------------------------------------
           95┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/5fade62b422d8e0431ab0375-username-RepoName-3-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=4JT4wuSF2vJ370y%2FjixbO%
               2Bgkc0E%3D",                                                                               
            ⋮┆----------------------------------------
          119┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/afade62b422d8e0451ab0375-username-RepoName-4-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=k%2F0VjERtGTfhLbqTAM8xSV
               5bBkI%3D",                                                                                 
            ⋮┆----------------------------------------
          166┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/60bde62b422d8e04b1ab0375-username-RepoName-6-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=DQzXJI6lgYcDJgejP5C0H6DV
               %2FbI%3D",                                                                                 
            ⋮┆----------------------------------------
          190┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/21bde62b422d8e0402ab0375-username-RepoName-7-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=7whfw8yk60wpGva%2F71EGiW
               XsOg8%3D",                                                                                 
            ⋮┆----------------------------------------
          214┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/51bde62b422d8e0412ab0375-username-RepoName-8-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=PYE5r2uXxC%2FLBWlZWEbMSZ
               1C7GU%3D",                                                                                 
            ⋮┆----------------------------------------
          238┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/d1bde62b422d8e0462ab0375-username-RepoName-9-                      
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=EgtGZjFUiDWYxIPfTWjg94Ey
               QTc%3D",                                                                                   
            ⋮┆----------------------------------------
          262┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/e1bde62b422d8e0482ab0375-username-RepoName-10-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=FhkEAniF7JIrOHGfmsS1XtKe
               vMI%3D",                                                                                   
            ⋮┆----------------------------------------
          286┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/52bde62b422d8e04a2ab0375-username-RepoName-11-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=FJaniKNlY0ykw0qzrVdIaTC2
               kuc%3D",                                                                                   
            ⋮┆----------------------------------------
          309┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/03bde62b422d8e04d2ab0375-username-RepoName-12-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=ExznOhAUWhpxY4WRvoypgddK
               QY4%3D",                                                                                   
            ⋮┆----------------------------------------
          332┆ "output_url" : "https://circle-production-action-                                          
               output.s3.amazonaws.com/43bde62b422d8e0403ab0375-username-RepoName-13-                     
               0?AWSAccessKeyId=AKIAIJNI6FA5RIAFFQ7Q&Expires=1620578384&Signature=voj0Zme8e9LJCCNcZZKKk5gv
               CgM%3D",                                                                                   
                                  
  [36m[22m[24m  zerver/forms.py[0m
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Password reset attempted for %s    
          even though password auth is disabled." % (email,) being logged. This may lead to secret credentials
          being exposed. Make sure that the logger is not logging  sensitive information.                     
          Details: https://sg.run/ydNx                                                                        
                                                                                                              
          171┆ logging.info("Password reset attempted for %s even though password auth is disabled." %
               (email,))                                                                              
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Password reset attempted for %s; no
          active account." % (email,) being logged. This may lead to secret credentials being exposed. Make   
          sure that the logger is not logging  sensitive information.                                         
          Details: https://sg.run/ydNx                                                                        
                                                                                                              
          176┆ logging.info("Password reset attempted for %s; no active account." % (email,))
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "User %s attempted to password login
          to wrong subdomain %s" %                             (user_profile.email,                           
          get_subdomain(self.request)) being logged. This may lead to secret credentials being exposed. Make  
          sure that the logger is not logging  sensitive information.                                         
          Details: https://sg.run/ydNx                                                                        
                                                                                                              
          201┆ logging.warning("User %s attempted to password login to wrong subdomain %s" %
          202┆                 (user_profile.email, get_subdomain(self.request)))
                                        
  [36m[22m[24m  zerver/lib/actions.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           60┆ session_engine = import_module(settings.SESSION_ENGINE)
   
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'user_profile' is being set without validating the password. Call                   
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=user_profile):user_profile.set_password(password)                           
          1873┆ user_profile.set_password(password)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=user_profile):user_profile.set_password(password)                           
          1875┆ user_profile.set_password(password)
                                              
  [36m[22m[24m  zerver/lib/cache_helpers.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           58┆ session_engine = import_module(settings.SESSION_ENGINE)
                                            
  [36m[22m[24m  zerver/lib/create_user.py[0m
    ❯❱ [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'user_profile' is being set without validating the password. Call                   
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=user_profile):user_profile.set_password(password)                           
           45┆ user_profile.set_password(password)
                                             
  [36m[22m[24m  zerver/lib/logging_util.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(tb)
           36┆ key = self.__class__.__name__.upper() + hashlib.sha1(tb).hexdigest()
                                        
  [36m[22m[24m  zerver/lib/migrate.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           34┆ (min_id, max_id) = db.execute("SELECT MIN(id), MAX(id) FROM %s" % (table,))[0]
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           34┆ (min_id, max_id) = db.execute("SELECT MIN(id), MAX(id) FROM %s" % (table,))[0]
            ⋮┆----------------------------------------
           45┆ db.execute(stmt, params=params)
                                                   
  [36m[22m[24m  zerver/lib/push_notifications.py[0m
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Found unavailable token %s,       
          unavailable since %s" % (token, since_date) being logged. This may lead to secret credentials being
          exposed. Make sure that the logger is not logging  sensitive information.                          
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          187┆ logging.info("Found unavailable token %s, unavailable since %s" % (token, since_date))
                                         
  [36m[22m[24m  zerver/lib/response.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           32┆ resp = HttpResponseNotAllowed(methods)
                                     
  [36m[22m[24m  zerver/lib/rest.py[0m
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
           18┆ @csrf_exempt
           19┆ def rest_dispatch(request, **kwargs):
           20┆     # type: (HttpRequest, **Any) -> HttpResponse
           21┆     """Dispatch to a REST API endpoint.
           22┆
           23┆     Unauthenticated endpoints should not use this, as authentication is verified
           24┆     in the following ways:
           25┆         * for paths beginning with /api, HTTP Basic auth
           26┆         * for paths beginning with /json (used by the web client), the session token
           27┆
             [hid 97 additional lines, adjust with --max-lines-per-finding] 
                                              
  [36m[22m[24m  zerver/lib/test_fixtures.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           26┆ cursor.execute("SELECT 1 from pg_database WHERE datname='{}';".format(database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           26┆ cursor.execute("SELECT 1 from pg_database WHERE datname='{}';".format(database_name))
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(f.read().encode('utf8'))
           84┆ target_hash_content = hashlib.sha1(f.read().encode('utf8')).hexdigest()
                                   
  [36m[22m[24m  zerver/models.py[0m
    ❯❱ [1mpython.django.security.audit.query-set-extra.avoid-query-set-extra[0m
          QuerySet.extra' does not provide safeguards against SQL injection and requires very careful use. SQL
          injection can lead to critical data being stolen by attackers. Instead of using '.extra', use the   
          Django ORM and parameterized queries such as `People.objects.get(name='Bob')`.                      
          Details: https://sg.run/kXZP                                                                        
                                                                                                              
          832┆ return get_active_streams(realm.id).select_related("realm").extra(
          833┆     where=[where_clause],
          834┆     params=stream_names)
                                                     
  [36m[22m[24m  zerver/templatetags/app_filters.py[0m
    ❯❱ [1mpython.django.security.audit.xss.filter-with-is-safe.filter-with-is-safe[0m
          Detected Django filters flagged with 'is_safe'. 'is_safe' tells Django not to apply escaping on the
          value returned by this filter (although the input is escaped). Used improperly, 'is_safe' could    
          expose your application to cross-site scripting (XSS) vulnerabilities. Ensure this filter does not 
          1) add HTML characters, 2) remove characters, or 3) use external data in any way. Consider instead 
          removing 'is_safe' and explicitly marking safe content with 'mark_safe()'.                         
          Details: https://sg.run/7o12                                                                       
                                                                                                             
           24┆ @register.filter(name='display_list', is_safe=True)
           25┆ def display_list(values, display_limit):
           26┆     # type: (List[str], int) -> str
           27┆     """
           28┆     Given a list of values, return a string nicely formatting those values,
           29┆     summarizing when you have more than `display_limit`. Eg, for a
           30┆     `display_limit` of 3 we get the following possible cases:
           31┆
           32┆     Jessica
           33┆     Jessica and Waseem
             [hid 19 additional lines, adjust with --max-lines-per-finding] 
           56┆ @lru_cache(512 if settings.PRODUCTION else 0)
           57┆ @register.filter(name='render_markdown_path', is_safe=True)
           58┆ def render_markdown_path(markdown_file_path):
           59┆     # type: (str) -> str
           60┆     """Given a path to a markdown file, return the rendered html.
           61┆
           62┆     Note that this assumes that any HTML in the markdown file is
           63┆     trusted; it is intended to be used for documentation, not user
           64┆     data."""
           65┆     global md_extensions
             [hid 17 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
           82┆ return mark_safe(html)
                                                     
  [36m[22m[24m  zerver/tornado/websocket_client.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           50┆ engine = import_module(settings.SESSION_ENGINE)
                                       
  [36m[22m[24m  zerver/views/auth.py[0m
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
          107┆ @csrf_exempt
          108┆ def remote_user_jwt(request):
          109┆     # type: (HttpRequest) -> HttpResponse
          110┆     subdomain = get_subdomain(request)
          111┆     try:
          112┆         auth_key = settings.JWT_AUTH_KEYS[subdomain]
          113┆     except KeyError:
          114┆         raise JsonableError(_("Auth key for this subdomain not found."))
          115┆
          116┆     try:
             [hid 33 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret 'User error converting Google oauth2
          login to token: %s' % (resp.text,) being logged. This may lead to secret credentials being exposed. 
          Make sure that the logger is not logging  sensitive information.                                    
          Details: https://sg.run/ydNx                                                                        
                                                                                                              
          245┆ logging.warning('User error converting Google oauth2 login to token: %s' % (resp.text,))
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret 'Could not convert google oauth2
          code to access_token: %s' % (resp.text,) being logged. This may lead to secret credentials being
          exposed. Make sure that the logger is not logging  sensitive information.                       
          Details: https://sg.run/ydNx                                                                    
                                                                                                          
          248┆ logging.error('Could not convert google oauth2 code to access_token: %s' % (resp.text,))
   
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
          384┆ @csrf_exempt
          385┆ @require_post
          386┆ @has_request_variables
          387┆ def api_dev_fetch_api_key(request, username=REQ()):
          388┆     # type: (HttpRequest, str) -> HttpResponse
          389┆     """This function allows logging in without a password on the Zulip
          390┆     mobile apps when connecting to a Zulip development environment.  It
          391┆     requires DevAuthBackend to be included in settings.AUTHENTICATION_BACKENDS.
          392┆     """
          393┆     if not dev_auth_enabled() or settings.PRODUCTION:
             [hid 13 additional lines, adjust with --max-lines-per-finding] 
          408┆ @csrf_exempt
          409┆ def api_dev_get_emails(request):
          410┆     # type: (HttpRequest) -> HttpResponse
          411┆     if not dev_auth_enabled() or settings.PRODUCTION:
          412┆         return json_error(_("Dev environment not enabled."))
          413┆     MAX_DEV_BACKEND_USERS = 100 # type: int
          414┆     users_query = UserProfile.objects.select_related().filter(is_bot=False, is_active=True)
          415┆     users = users_query.order_by('email')[0:MAX_DEV_BACKEND_USERS]
          416┆     return json_success(dict(direct_admins=[u.email for u in users if u.is_realm_admin],
          417┆                              direct_users=[u.email for u in users if not
               u.is_realm_admin]))                                                     
            ⋮┆----------------------------------------
          419┆ @csrf_exempt
          420┆ @require_post
          421┆ @has_request_variables
          422┆ def api_fetch_api_key(request, username=REQ(), password=REQ()):
          423┆     # type: (HttpRequest, str, str) -> HttpResponse
          424┆     return_data = {} # type: Dict[str, bool]
          425┆     if username == "google-oauth2-token":
          426┆         user_profile = authenticate(google_oauth2_token=password,
          427┆                                     realm_subdomain=get_subdomain(request),
          428┆                                     return_data=return_data)
             [hid 22 additional lines, adjust with --max-lines-per-finding] 
          452┆ @csrf_exempt
          453┆ def api_get_auth_backends(request):
          454┆     # type: (HttpRequest) -> HttpResponse
          455┆     # May return a false positive for password auth if it's been disabled
          456┆     # for a specific realm. Currently only happens for zulip.com on prod
          457┆     return json_success({"password": password_auth_enabled(None),
          458┆                          "dev": dev_auth_enabled(),
          459┆                          "google": google_auth_enabled(),
          460┆                          })
            ⋮┆----------------------------------------
          472┆ @csrf_exempt
          473┆ def api_fetch_google_client_id(request):
          474┆     # type: (HttpRequest) -> HttpResponse
          475┆     if not settings.GOOGLE_CLIENT_ID:
          476┆         return json_error(_("GOOGLE_CLIENT_ID is not configured"), status=400)
          477┆     return json_success({"google_client_id": settings.GOOGLE_CLIENT_ID})
                                                     
  [36m[22m[24m  zerver/webhooks/appfollow/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ <p>Then, log into your account on <a href="http://appfollow.io">appfollow.io</a>, and:</p>
                                                     
  [36m[22m[24m  zerver/webhooks/bitbucket2/view.py[0m
    ❯❱ [1mpython.flask.security.audit.directly-returned-format-string.directly-returned-format-string[0m
          Detected Flask route directly returning a formatted string. This is subject to cross-site scripting
          if user input can reach the string. Consider using the template engine instead and rendering pages 
          with 'render_template()'.                                                                          
          Details: https://sg.run/Zv6o                                                                       
                                                                                                             
          131┆ return pull_request_template.format(action)
                                                       
  [36m[22m[24m  zerver/webhooks/github_dispatcher.py[0m
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
            9┆ @csrf_exempt
           10┆ def api_github_webhook_dispatch(request):
           11┆     # type: (HttpRequest) -> HttpResponse
           12┆     if request.META.get('HTTP_X_GITHUB_EVENT'):
           13┆         return api_github_webhook(request)
           14┆     else:
           15┆         return api_github_landing(request)
                                                  
  [36m[22m[24m  zerver/webhooks/heroku/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ <p>Then, log into your account on <a href="http://heroku.com">heroku.com</a>, and:</p>
                                                      
  [36m[22m[24m  zerver/webhooks/papertrail/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            3┆ <a href="http://www.perforce.com/perforce/doc.current/manuals/p4sag/chapter.scripting.html"
               >Webhook</a>                                                                               
                                                     
  [36m[22m[24m  zerver/webhooks/semaphore/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           16┆ <p>Then, log into your account on <a href="http://semaphoreci.com">semaphoreci.com</a>,
               and:</p>                                                                               
                                                  
  [36m[22m[24m  zerver/webhooks/solano/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ Next, follow <a href="http://docs.solanolabs.com/Setup/webhooks/#build-notification-web-
               hooks-outgoing">                                                                        
           15┆ these instructions</a> for Outgoing Web Hooks to configure a webhook for your Solano
                                              
  [36m[22m[24m  zerver/webhooks/yo/doc.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            6┆ <a href="http://docs.justyo.co/docs/receiving-a-yo-with-the-api">Yo App Callback</a>.
                                    
  [36m[22m[24m  zilencer/views.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           83┆ return HttpResponse(message['sender_email'])
   
    ❯❱ [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
          101┆ @csrf_exempt
          102┆ @has_request_variables
          103┆ def lookup_endpoints_for_user(request, email=REQ()):
          104┆     # type: (HttpRequest, str) -> HttpResponse
          105┆     try:
          106┆         return json_response(realm_for_email(email).deployment.endpoints)
          107┆     except AttributeError:
          108┆         return json_error(_("Cannot determine endpoint for user."), status=404)
                                              
  [36m[22m[24m  zproject/jinja2/__init__.py[0m
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
           20┆ return HttpResponse(response)
   
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           25┆ env = Environment(**options)
