                    
                    
┌──────────────────┐
│ 23 Code Findings │
└──────────────────┘
                                              
  [36m[22m[24m  fedora/client/baseclient.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          120┆ saved_session = pickle.load(session_file)
            ⋮┆----------------------------------------
          143┆ pickle.dump(save, session_file)
                                               
  [36m[22m[24m  fedora/client/proxyclient.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(to_bytes(session_id))
          339┆ token = sha1(to_bytes(session_id))
                                                         
  [36m[22m[24m  fedora/tg/identity/jsonfasprovider2.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(self.visit_key)
          212┆ sha1(self.visit_key).hexdigest()):
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msha256(self.visit_key)
          246┆ return sha1(self.visit_key).hexdigest()
                                                       
  [36m[22m[24m  fedora/tg/identity/soprovidercsrf.py[0m
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "visit: %s token: %s" %            
          (self.visit_key,                         cherrypy.request.params['_csrf_token']) being logged. This
          may lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive  
          information.                                                                                       
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          157┆ log.info("visit: %s token: %s" % (self.visit_key,
          158┆     cherrypy.request.params['_csrf_token']))
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Passwords don't match for user: %s"
          being logged. This may lead to secret credentials being exposed. Make sure that the logger is not   
          logging  sensitive information.                                                                     
          Details: https://sg.run/ydNx                                                                        
                                                                                                              
          360┆ log.info("Passwords don't match for user: %s", user_name)
                                                        
  [36m[22m[24m  fedora/tg/templates/genshi/login.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           16┆ <form py:if="not tg.identity.only_token"
           17┆   action="${tg.url(previous_url)}" method="post">
           18┆   <div class="field"><label for="user_name">${f_('User Name:')}</label>
           19┆     <input type="text" id="user_name" name="user_name" />
           20┆   </div>
           21┆   <div class="field"><label for="password">${f_('Password:')}</label>
           22┆     <input type="password" id="password" name="password" />
           23┆   </div>
           24┆   <div class="field">
           25┆     <input type="submit" name="login" class="button"
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
           30┆ <form py:if="tg.identity.only_token"
           31┆   action="${tg.url(previous_url)}" method="post">
           32┆   <p><a href="http://en.wikipedia.org/wiki/CSRF">${f_('CSRF attacks')}</a>
           33┆   ${f_(''' are a means for a malicious website to make a request of another
           34┆   web server as the user who contacted the malicious web site.  The
           35┆   purpose of this page is to help protect your account and this server
           36┆   from attacks from such malicious web sites.  By clicking below, you are
           37┆   proving that you are a person rather than just the web browser
           38┆   forwarding your authentication cookies on behalf of a malicious
           39┆   website.''')}</p>
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           32┆ <p><a href="http://en.wikipedia.org/wiki/CSRF">${f_('CSRF attacks')}</a>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           87┆ <form action="${tg.url('/login')}" method="POST">
           88┆   <input type="submit" value="${f_('Login')}" class="button" />
           89┆ </form>
            ⋮┆----------------------------------------
           94┆ <form action="${tg.url(tg.request.path_info)}" method="POST">
           95┆   <input type="submit" name="csrf_login" value="${f_('Verify Login')}" class="button" />
           96┆ </form>
            ⋮┆----------------------------------------
          100┆ <form action="${tg.url('/logout')}" method="POST">
          101┆   <input type="submit" value="${f_('Logout')}" class="button" />
          102┆ </form>
                                     
  [36m[22m[24m  fedora/tg/utils.py[0m
    ❯❱ [1mpython.django.security.injection.tainted-url-host.tainted-url-host[0m
          User data flows into the host portion of this manually-constructed URL. This could allow an attacker
          to send data to their own server, potentially exposing sensitive data such as cookies or            
          authorization information sent with this request. They could also probe internal servers or other   
          resources that the server runnig this code can access. (This is called server-side request forgery, 
          or SSRF.) Do not allow arbitrary hosts. Instead, create an allowlist for approved hosts hardcode the
          correct host.                                                                                       
          Details: https://sg.run/oYz6                                                                        
                                                                                                              
          202┆ base_url = '%s://%s' % (scheme, _get_server_name())
                                                         
  [36m[22m[24m  fedora/tg2/templates/genshi/login.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           13┆ <form action="${tg.url(came_from)}" method="post">
           14┆   <p><a href="http://en.wikipedia.org/wiki/CSRF">${_('CSRF attacks')}</a>
           15┆   ${_(''' are a means for a malicious website to make a request of another
           16┆   web server as the user who contacted the malicious web site.  The
           17┆   purpose of this page is to help protect your account and this server
           18┆   from attacks from such malicious web sites.  By clicking below, you are
           19┆   proving that you are a person rather than just the web browser
           20┆   forwarding your authentication cookies on behalf of a malicious
           21┆   website.''')}</p>
           22┆   <input type="submit" name="csrf_login" class="button"
             [hid 2 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ <p><a href="http://en.wikipedia.org/wiki/CSRF">${_('CSRF attacks')}</a>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           27┆ <form action="${tg.url('/login_handler', params=dict(came_from=came_from.encode('utf-8'),
               __logins=login_counter.encode('utf-8')))}" method="post" accept-charset="UTF-8"          
               class="loginfields">                                                                     
           28┆   <label for="login">${_('Username:')}</label>
           29┆   <input type="text" id="login" name="login" class="text" />
           30┆   <br />
           31┆   <label for="password">${_('Password:')}</label>
           32┆   <input type="password" id="password" name="password" class="text" />
           33┆   <input type="submit" id="submit" class="button" value="${_('Login')}" />
           34┆ </form>
            ⋮┆----------------------------------------
           65┆ <form action="${tg.url('/login/?came_from=%s' %               
               tg.quote_plus('?'.join((request.environ.get('PATH_INFO', '/'),
               request.environ.get('QUERY_STRING')))))}" method="POST">      
           66┆   <input type="submit" value="${_('Login')}" class="button" />
           67┆ </form>
            ⋮┆----------------------------------------
           71┆ <form action="${tg.url('?'.join((request.environ.get('PATH_INFO', '/'),
               request.environ.get('QUERY_STRING'))))}" method="POST">                
           72┆   <input type="submit" value="${_('Verify Login')}" class="button" />
           73┆ </form>
            ⋮┆----------------------------------------
           77┆ <form action="${tg.url('/logout_handler')}" method="POST">
           78┆   <input type="submit" value="${_('Logout')}" class="button" />
           79┆ </form>
                                      
  [36m[22m[24m  fedora/tg2/utils.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(session_id)
           77┆ csrf_token = sha1(session_id).hexdigest()
                                      
  [36m[22m[24m  fedora/wsgi/csrf.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(session_id)
          253┆ token = sha1(session_id).hexdigest()
                           
  [36m[22m[24m  setup.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
            4┆ exec(compile(open("fedora/release.py").read(), "fedora/release.py", 'exec'))
