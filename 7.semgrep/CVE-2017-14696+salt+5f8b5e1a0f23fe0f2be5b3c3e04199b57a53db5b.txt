                     
                     
┌───────────────────┐
│ 356 Code Findings │
└───────────────────┘
                                       
  [36m[22m[24m  conf/cloud.providers[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
            8┆ #  api_key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg
                                                           
  [36m[22m[24m  conf/cloud.providers.d/digitalocean.conf[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
            4┆ #  api_key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg
                                                      
  [36m[22m[24m  doc/.scripts/setup-transifex-config[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0600` are widely permissive and grant access to more people than may be        
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
           75┆ os.chmod(RCFILE, 0600)
                                          
  [36m[22m[24m  doc/_templates/404.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           11┆ <li><a href="{{ pathto("index") }}">Home page</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           11┆ <li><a href="{{ pathto("index") }}">Home page</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           11┆ <li><a href="{{ pathto("index") }}">Home page</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           12┆ <li><a href="{{ pathto("topics/community") }}">Community</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           12┆ <li><a href="{{ pathto("topics/community") }}">Community</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           12┆ <li><a href="{{ pathto("topics/community") }}">Community</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           13┆ <li><a href="{{ pathto("search") }}">Search</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           13┆ <li><a href="{{ pathto("search") }}">Search</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           13┆ <li><a href="{{ pathto("search") }}">Search</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ <li><a href="{{ pathto("py-modindex") }}">Salt module index</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ <li><a href="{{ pathto("py-modindex") }}">Salt module index</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ <li><a href="{{ pathto("py-modindex") }}">Salt module index</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           15┆ <li><a href="{{ pathto("home") }}">Salt Documentation</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           15┆ <li><a href="{{ pathto("home") }}">Salt Documentation</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           15┆ <li><a href="{{ pathto("home") }}">Salt Documentation</a></li>
                                                
  [36m[22m[24m  doc/_templates/saltstack.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            4┆ <a href="http://www.saltstack.com/training/">
            5┆ Now offering remote attendee training!
            6┆ {# <img src="{{ pathto('_static/images/salt-training.png', 1) }}" alt="" style="padding-
               bottom: 1em;"> #}                                                                       
            7┆ </a>
                                              
  [36m[22m[24m  doc/_templates/version.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           10┆ <p>Latest Salt release: <a href="{{ pathto('topics/releases/{0}'.format(release)) }}">{{
               release }}</a></p>                                                                      
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           10┆ <p>Latest Salt release: <a href="{{ pathto('topics/releases/{0}'.format(release)) }}">{{
               release }}</a></p>                                                                      
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           10┆ <p>Latest Salt release: <a href="{{ pathto('topics/releases/{0}'.format(release)) }}">{{
               release }}</a></p>                                                                      
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ -    <a href="{{ pathto('topics/releases/2015.2.0') }}">v2015.2.0rc2</a>!  More info
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ -    <a href="{{ pathto('topics/releases/2015.2.0') }}">v2015.2.0rc2</a>!  More info
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ -    <a href="{{ pathto('topics/releases/2015.2.0') }}">v2015.2.0rc2</a>!  More info
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           15┆ -    <a href="{{ pathto('topics/releases/releasecandidate') }}">here</a>.</p>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           15┆ -    <a href="{{ pathto('topics/releases/releasecandidate') }}">here</a>.</p>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           15┆ -    <a href="{{ pathto('topics/releases/releasecandidate') }}">here</a>.</p>
                                                    
  [36m[22m[24m  doc/_themes/saltstack/layout.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           38┆ <li><a href="{{ pathto('index') }}">Documentation</a> &raquo;</li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           38┆ <li><a href="{{ pathto('index') }}">Documentation</a> &raquo;</li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           38┆ <li><a href="{{ pathto('index') }}">Documentation</a> &raquo;</li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           46┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           46┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           46┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           75┆ URL_ROOT:    '{{ url_root }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           75┆ URL_ROOT:    '{{ url_root }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           76┆ VERSION:     '{{ release|e }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           76┆ VERSION:     '{{ release|e }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           78┆ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           78┆ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           79┆ HAS_SOURCE:  {{ has_source|lower }}
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           79┆ HAS_SOURCE:  {{ has_source|lower }}
            ⋮┆----------------------------------------
           84┆ <script src="{{ pathto(scriptfile, 1) }}"></script>
            ⋮┆----------------------------------------
          162┆ <script src="{{ pathto('_static/js/vendor/modernizr-2.6.2-respond-1.1.0.min.js', 1)
               }}"></script>                                                                      
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          184┆ <a class="brand" href="{{ pathto('index') }}"><img src="{{
               pathto('_static/images/SaltStack-Logo.png', 1) }}" /></a> 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          184┆ <a class="brand" href="{{ pathto('index') }}"><img src="{{
               pathto('_static/images/SaltStack-Logo.png', 1) }}" /></a> 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          184┆ <a class="brand" href="{{ pathto('index') }}"><img src="{{
               pathto('_static/images/SaltStack-Logo.png', 1) }}" /></a> 
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          225┆ <a href="http://saltstack.com/">SaltStack</a>
            ⋮┆----------------------------------------
          226┆ <a href="http://saltstack.com/about/">Leadership</a>
            ⋮┆----------------------------------------
          230┆ <a href="http://saltstack.com/enterprise/">Enterprise</a>
            ⋮┆----------------------------------------
          231┆ <a href="http://saltstack.com/services/">Integration</a>
            ⋮┆----------------------------------------
          235┆ <a href="http://saltstack.com/training/">Onsite Training</a>
            ⋮┆----------------------------------------
          236┆ <a href="http://saltstack.com/services/">Custom Professional Services</a>
            ⋮┆----------------------------------------
          240┆ <a href="http://saltstack.com/contact/">Support</a>
            ⋮┆----------------------------------------
          241┆ <a href="http://saltstack.com/contact/">Contact us</a>
            ⋮┆----------------------------------------
          245┆ <a href="http://saltstack.org">saltstack.org</a>
            ⋮┆----------------------------------------
          246┆ <a href="http://docs.saltstack.org/en/latest/">Documentation</a>
            ⋮┆----------------------------------------
          252┆ <a href="http://twitter.com/SaltStackInc"><img src="{{                        
               pathto('_static/images/socialTW.png', 1) }}" alt="SaltStack on Twitter" /></a>
            ⋮┆----------------------------------------
          253┆ <a href="http://www.linkedin.com/company/salt-stack-inc"><img src="{{          
               pathto('_static/images/socialLI.png', 1) }}" alt="SaltStack on LinkedIn" /></a>
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
          261┆ <script src="{{ pathto('_static/js/main.js', 1) }}"></script>
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          265┆ <script type="text/javascript" language="javascript"   
               src="http://t6.trackalyzer.com/trackalyze.js"></script>
                                                     
  [36m[22m[24m  doc/_themes/saltstack2/layout.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           36┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           36┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           36┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}">{{ rellink[3]
               }}</a>                                                                               
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           50┆ URL_ROOT:    '{{ url_root }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           50┆ URL_ROOT:    '{{ url_root }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           51┆ VERSION:     '{{ release|e }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           51┆ VERSION:     '{{ release|e }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           52┆ SEARCH_CX:   '{{ search_cx }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           52┆ SEARCH_CX:   '{{ search_cx }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           54┆ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           54┆ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           55┆ HAS_SOURCE:  '{{ has_source|lower }}'
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           55┆ HAS_SOURCE:  '{{ has_source|lower }}'
            ⋮┆----------------------------------------
           60┆ <script src="{{ pathto(scriptfile, 1) }}"></script>
            ⋮┆----------------------------------------
           93┆ <script src="{{ pathto('_static/js/respond.min.js', 1) }}"></script>
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          141┆ <a href="http://saltstack.com/" target="_blank"><img src="{{                  
               pathto('_static/images/saltstack.svg', 1) }}" class="nolightbox" height="40px"
               width="170px"></a>                                                            
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          190┆ <div class="alert alert-warning dev-notification-text" role="alert"><i class="glyphicon    
               glyphicon-warning-sign"></i> These release notes are for an old release of Salt. This      
               release might contain known security and other issues that are fixed in the <a data-       
               container="body" data-toggle="tooltip" data-placement="bottom" title="Release notes for the
               latest release" href="{{ release }}.html">latest release</a>.</div>                        
            ⋮┆----------------------------------------
          213┆ <a href="{{ prev.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ prev.title|striptags|e }}" id="prev-button" type="button"
               class="btn btn-secondary"><span class="glyphicon glyphicon-chevron-left"></span>      
               Previous</button></a>                                                                 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          213┆ <a href="{{ prev.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ prev.title|striptags|e }}" id="prev-button" type="button"
               class="btn btn-secondary"><span class="glyphicon glyphicon-chevron-left"></span>      
               Previous</button></a>                                                                 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          213┆ <a href="{{ prev.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ prev.title|striptags|e }}" id="prev-button" type="button"
               class="btn btn-secondary"><span class="glyphicon glyphicon-chevron-left"></span>      
               Previous</button></a>                                                                 
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          217┆ <a href="{{ next.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ next.title|striptags|e }}" id="next-button" type="button"
               class="btn btn-primary">                                                              
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          217┆ <a href="{{ next.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ next.title|striptags|e }}" id="next-button" type="button"
               class="btn btn-primary">                                                              
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          217┆ <a href="{{ next.link|e }}"><button data-container="body" data-toggle="tooltip" data- 
               placement="bottom" title="{{ next.title|striptags|e }}" id="next-button" type="button"
               class="btn btn-primary">                                                              
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          249┆ <p><a href="http://saltstack.com">saltstack.com</a></p>
            ⋮┆----------------------------------------
          252┆ <p>© {{ copyright }} SaltStack. All Rights Reserved, SaltStack Inc. | <a         
               href="http://saltstack.com/privacy-policy" target="_blank">Privacy Policy</a></p>
            ⋮┆----------------------------------------
          259┆ <a href="http://saltconf.com" target="_blank"><img class="nolightbox footer-banner center"
               src="{{ pathto('_static/images/DOCBANNER.jpg', 1) }}"/></a>                               
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          365┆ <script type="text/javascript" language="javascript"        
               src="https://trackalyzer.com/trackalyze_secure.js"></script>
                                                      
  [36m[22m[24m  doc/topics/cloud/releases/0.8.7.rst[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           75┆ DIGITAL_OCEAN.api_key: GDE43t43REGTrkilg43934t34qT43t4dgegerGEgg
                                                 
  [36m[22m[24m  doc/topics/cloud/softlayer.rst[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           37┆ apikey: 'e3b68aa711e6deadc62d5b76355674beef7cc3116062ddbacafe5f7e465bfdc9'
            ⋮┆----------------------------------------
           49┆ apikey: 'e3b68aa711e6deadc62d5b76355674beef7cc3116062ddbacafe5f7e465bfdc9'
                                               
  [36m[22m[24m  doc/topics/cloud/windows.rst[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
          170┆ apikey: 'e3b68aa711e6deadc62d5b76355674beef7cc3116062ddbacafe5f7e465bfdc9'
                                      
  [36m[22m[24m  salt/auth/django.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          116┆ DJANGO_AUTH_CLASS = eval(DJANGO_AUTH_CLASS_str)  # pylint: disable=W0123
                                    
  [36m[22m[24m  salt/auth/ldap.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           70┆ env = Environment()
                                     
  [36m[22m[24m  salt/auth/mysql.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          103┆ cur.execute(_info['auth_sql'].format(username, password))
                                              
  [36m[22m[24m  salt/client/ssh/__init__.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(ver_base)
          1392┆ ver = hashlib.sha1(ver_base).hexdigest()
                                           
  [36m[22m[24m  salt/client/ssh/shell.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
           47┆ subprocess.call(cmd, shell=True)
            ⋮┆----------------------------------------
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stderr=subprocess.PIPE,stdout=subprocess.PIPE,)
          270┆ proc = subprocess.Popen(
          271┆     cmd,
          272┆     shell=True,
          273┆     stderr=subprocess.PIPE,
          274┆     stdout=subprocess.PIPE,
          275┆ )
                                                 
  [36m[22m[24m  salt/client/ssh/ssh_py_shim.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `stt.st_mode | stat.S_IWGRP | stat.S_IRGRP | stat.S_IXGRP` are widely permissive
          and grant access to more people than may be necessary. A good default is `0o644` which gives read 
          and write access to yourself and read access to everyone else.                                    
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          127┆ os.chmod(OPTIONS.saltdir, stt.st_mode | stat.S_IWGRP | stat.S_IRGRP | stat.S_IXGRP)
                                              
  [36m[22m[24m  salt/cloud/clouds/linode.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           16┆ apikey: f4ZsmwtB1c7f85Jdu43RgXVDFlNjuJaeIYV8QMftTqKScEB2vSosFSr...
                                                 
  [36m[22m[24m  salt/cloud/clouds/qingcloud.py[0m
   ❯❯❱ [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mrequests.get(path, params=real_parameters, verify=True)
          173┆ request = requests.get(path, params=real_parameters, verify=False)
                                                 
  [36m[22m[24m  salt/cloud/clouds/softlayer.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           19┆ apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv
                                                    
  [36m[22m[24m  salt/cloud/clouds/softlayer_hw.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           19┆ apikey: JVkbSJDGHSDKUKSDJfhsdklfjgsjdkflhjlsdfffhgdgjkenrtuinv
                                
  [36m[22m[24m  salt/crypt.py[0m
    ❯❱ [1mpython.pycryptodome.security.insecure-hash-algorithm.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/3ALr                                                                     
                                                                                                           
          179┆ return signer.sign(SHA.new(message))
            ⋮┆----------------------------------------
          192┆ return verifier.verify(SHA.new(message), signature)
                                           
  [36m[22m[24m  salt/daemons/flo/zero.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(topic)
          209┆ htopic = hashlib.sha1(topic).hexdigest()
                                             
  [36m[22m[24m  salt/engines/logentries.py[0m
    ❯❱ [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          182┆ sock = ssl.wrap_socket(
          183┆     sock=sock,
          184┆     keyfile=None,
          185┆     certfile=None,
          186┆     server_side=False,
          187┆     cert_reqs=ssl.CERT_REQUIRED,
          188┆     ssl_version=getattr(
          189┆         ssl, 'PROTOCOL_TLSv1_2', ssl.PROTOCOL_TLSv1),
          190┆     ca_certs=certifi.where(),
          191┆     do_handshake_on_connect=True,
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          189┆ ssl, 'PROTOCOL_TLSv1_2', ssl.PROTOCOL_TLSv1),
                                     
  [36m[22m[24m  salt/fileclient.py[0m
    ❯❱ [1mpython.lang.security.audit.ftplib.ftplib[0m
          FTP does not encrypt communications by default. This can lead to sensitive data being exposed.
          Ensure use of FTP here does not expose sensitive data.                                        
          Details: https://sg.run/7oyZ                                                                  
                                                                                                        
          545┆ ftp = ftplib.FTP()
   
    ❯❱ [1mpython.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls[0m
          The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
          Details: https://sg.run/AvPp                                                              
                                                                                                    
           [32m▶▶┆ Autofix ▶ [0mftplib.FTP_TLS(, context=ssl.create_default_context())
          545┆ ftp = ftplib.FTP()
                                          
  [36m[22m[24m  salt/fileserver/s3fs.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          539┆ pickle.dump(metadata, fp_)
            ⋮┆----------------------------------------
          553┆ data = pickle.load(fp_)
                                 
  [36m[22m[24m  salt/loader.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          976┆ exec(code, module.__dict__)
                                 
  [36m[22m[24m  salt/minion.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          3041┆ return eval(results)  # pylint: disable=W0123
                                          
  [36m[22m[24m  salt/modules/archive.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen('{0} {1}'.format(decompress_cmd,              
              _quote(cached)),shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
          209┆ decompressed = subprocess.Popen(
          210┆     '{0} {1}'.format(decompress_cmd, _quote(cached)),
          211┆     shell=True,
          212┆     stdout=subprocess.PIPE,
          213┆     stderr=subprocess.PIPE)
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          345┆ func = locals().get('_list_' + archive_format)
                                              
  [36m[22m[24m  salt/modules/artifactory.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          312┆ artifact_metadata_xml = urllib.request.urlopen(request).read()
            ⋮┆----------------------------------------
          362┆ snapshot_version_metadata_xml = urllib.request.urlopen(request).read()
            ⋮┆----------------------------------------
          417┆ version = urllib.request.urlopen(request).read()
            ⋮┆----------------------------------------
          470┆ f = urllib.request.urlopen(request)
            ⋮┆----------------------------------------
          502┆ url = urllib.request.urlopen(request)
                                                    
  [36m[22m[24m  salt/modules/boto3_elasticache.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          146┆ s = globals()[func]
            ⋮┆----------------------------------------
          196┆ s = globals()[func]
            ⋮┆----------------------------------------
          246┆ s = globals()[func]
                                                  
  [36m[22m[24m  salt/modules/boto_cloudtrail.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          163┆ if locals()[arg] is not None:
            ⋮┆----------------------------------------
          336┆ if locals()[arg] is not None:
                                                        
  [36m[22m[24m  salt/modules/boto_cloudwatch_event.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          140┆ if locals()[arg] is not None:
                                                            
  [36m[22m[24m  salt/modules/boto_elasticsearch_domain.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          256┆ if locals()[k] is not None:
            ⋮┆----------------------------------------
          257┆ val = locals()[k]
            ⋮┆----------------------------------------
          330┆ if locals()[k] is not None:
            ⋮┆----------------------------------------
          331┆ val = locals()[k]
                                           
  [36m[22m[24m  salt/modules/boto_iam.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1740┆ if locals()[arg] is not None:
            ⋮┆----------------------------------------
          1868┆ if locals()[arg] is not None:
            ⋮┆----------------------------------------
          2126┆ if locals()[arg] is not None:
                                              
  [36m[22m[24m  salt/modules/boto_lambda.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          522┆ if locals()[key] is not None:
                                           
  [36m[22m[24m  salt/modules/boto_rds.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          280┆ val = locals()[param_key]
            ⋮┆----------------------------------------
          348┆ if locals()[key] is not None:
            ⋮┆----------------------------------------
          352┆ if locals()[key] is not None:
            ⋮┆----------------------------------------
          356┆ if locals()[key] is not None:
            ⋮┆----------------------------------------
          739┆ if locals()[key] is not None:
            ⋮┆----------------------------------------
          783┆ if locals()[key] is not None:
            ⋮┆----------------------------------------
          875┆ val = locals()[key]
                                                 
  [36m[22m[24m  salt/modules/boto_s3_bucket.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          169┆ if locals()[arg] is not None:
            ⋮┆----------------------------------------
          493┆ if locals()[arg] is not None:
            ⋮┆----------------------------------------
          839┆ val = locals()[key]
                                           
  [36m[22m[24m  salt/modules/boto_vpc.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1905┆ if locals()[v] is None:
            ⋮┆----------------------------------------
          2004┆ if locals()[v] is None:
                                           
  [36m[22m[24m  salt/modules/debbuild.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block[0m
          Something that looks like a PGP private key block is detected. This is a potential hardcoded secret
          that could be leaked if this code is committed. Instead, remove this code block from the commit.   
          Details: https://sg.run/ydKd                                                                       
                                                                                                             
          491┆ -----BEGIN PGP PRIVATE KEY BLOCK-----
                                            
  [36m[22m[24m  salt/modules/debian_ip.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           36┆ JINJA = jinja2.Environment(
           37┆     loader=jinja2.FileSystemLoader(
           38┆         os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'debian_ip')
           39┆     )
           40┆ )
                                          
  [36m[22m[24m  salt/modules/hipchat.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           19┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           28┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
          208┆ salt '*' hipchat.list_rooms api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15 api_version=v1
            ⋮┆----------------------------------------
          235┆ salt '*' hipchat.list_users api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15 api_version=v1
            ⋮┆----------------------------------------
          262┆ salt '*' hipchat.find_room name="Development Room" api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
               api_version=v1                                                                             
            ⋮┆----------------------------------------
          293┆ salt '*' hipchat.find_user name="Thomas Hatch" api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
               api_version=v1                                                                         
                                            
  [36m[22m[24m  salt/modules/inspector.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           57┆ mod = importlib.import_module("salt.modules.inspectlib.{0}".format(module))
                                             
  [36m[22m[24m  salt/modules/jboss7_cli.py[0m
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "PROCESSING TOKEN %d: %s" being    
          logged. This may lead to secret credentials being exposed. Make sure that the logger is not logging
          sensitive information.                                                                             
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          253┆ log.debug("PROCESSING TOKEN %d: %s", token_no, token)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "tokens=%s" being logged. This may
          lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive     
          information.                                                                                      
          Details: https://sg.run/ydNx                                                                      
                                                                                                            
          315┆ log.debug("tokens=%s", str(tokens))
                                          
  [36m[22m[24m  salt/modules/jenkins.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           23┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                        
  [36m[22m[24m  salt/modules/mssql.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          146┆ cur.execute('ALTER DATABASE {0} SET SINGLE_USER WITH ROLLBACK
               IMMEDIATE'.format(database_name))                            
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          146┆ cur.execute('ALTER DATABASE {0} SET SINGLE_USER WITH ROLLBACK
               IMMEDIATE'.format(database_name))                            
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          147┆ cur.execute('DROP DATABASE {0}'.format(database_name))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          147┆ cur.execute('DROP DATABASE {0}'.format(database_name))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          203┆ cur.execute('CREATE ROLE {0} AUTHORIZATION {1}'.format(role, owner))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          203┆ cur.execute('CREATE ROLE {0} AUTHORIZATION {1}'.format(role, owner))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          205┆ cur.execute('CREATE ROLE {0}'.format(role))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          205┆ cur.execute('CREATE ROLE {0}'.format(role))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          227┆ cur.execute('DROP ROLE {0}'.format(role))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          227┆ cur.execute('DROP ROLE {0}'.format(role))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          313┆ cur.execute("CREATE LOGIN {0} WITH PASSWORD='{1}',check_policy = off".format(username,
               new_login_password))                                                                  
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          313┆ cur.execute("CREATE LOGIN {0} WITH PASSWORD='{1}',check_policy = off".format(username,
               new_login_password))                                                                  
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          314┆ cur.execute("CREATE USER {0} FOR LOGIN {1}".format(username, username))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          314┆ cur.execute("CREATE USER {0} FOR LOGIN {1}".format(username, username))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          316┆ cur.execute("CREATE USER {0} WITHOUT LOGIN".format(username))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          316┆ cur.execute("CREATE USER {0} WITHOUT LOGIN".format(username))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          342┆ cur.execute("DROP USER {0}".format(username))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          342┆ cur.execute("DROP USER {0}".format(username))
                                         
  [36m[22m[24m  salt/modules/nspawn.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          690┆ return globals()['_bootstrap_{0}'.format(dist)](name, version=version)
                                          
  [36m[22m[24m  salt/modules/pdbedit.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-function.insecure-hash-function[0m
          Detected use of an insecure MD4 or MD5 hash function. These functions have known vulnerabilities and
          are considered deprecated. Consider using 'SHA256' or a similar function instead.                   
          Details: https://sg.run/rdBn                                                                        
                                                                                                              
           62┆ hashlib.new(
           63┆     'md4',
           64┆     password.encode('utf-16le')
           65┆ ).digest()
                                           
  [36m[22m[24m  salt/modules/postgres.py[0m
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          1008┆ hashlib.md5(salt.utils.to_bytes('{0}{1}'.format(password, role))).hexdigest())
                                             
  [36m[22m[24m  salt/modules/pushbullet.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           12┆ api_key: 'ABC123abc123ABC123abc123ABC123ab'
                                             
  [36m[22m[24m  salt/modules/random_org.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
          141┆ salt '*' random_org.getUsage api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15 api_version=1
                                               
  [36m[22m[24m  salt/modules/restartcheck.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
          397┆ paths = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
                                        
  [36m[22m[24m  salt/modules/rh_ip.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           26┆ JINJA = jinja2.Environment(
           27┆     loader=jinja2.FileSystemLoader(
           28┆         os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'rh_ip')
           29┆     )
           30┆ )
                                           
  [36m[22m[24m  salt/modules/rpmbuild.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block[0m
          Something that looks like a PGP private key block is detected. This is a potential hardcoded secret
          that could be leaked if this code is committed. Instead, remove this code block from the commit.   
          Details: https://sg.run/ydKd                                                                       
                                                                                                             
          342┆ -----BEGIN PGP PRIVATE KEY BLOCK-----
                                       
  [36m[22m[24m  salt/modules/seed.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
           56┆ os.chmod(fpd_, 0o700)
                                               
  [36m[22m[24m  salt/modules/slack_notify.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           16┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           82┆ salt '*' slack.list_rooms api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
          104┆ salt '*' slack.list_users api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
          127┆ salt '*' slack.find_room name="random" api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
          161┆ salt '*' slack.find_user name="ThomasHatch" api_key=peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                      
  [36m[22m[24m  salt/modules/ssh.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `448` are widely permissive and grant access to more people than may be necessary.
          A good default is `0o644` which gives read and write access to yourself and read access to everyone 
          else.                                                                                               
          Details: https://sg.run/AXY4                                                                        
                                                                                                              
          727┆ os.chmod(dpath, 448)
            ⋮┆----------------------------------------
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          1124┆ os.chmod(ssh_dir, 0o700)
                                        
  [36m[22m[24m  salt/modules/state.py[0m
   ❯❯❱ [1mtrailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal[0m
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled
          by an attacker                                                                                    
          Details: https://sg.run/2RLD                                                                      
                                                                                                            
          1745┆ s_pkg = tarfile.open(pkg_path, 'r:gz')
          1746┆ # Verify that the tarball does not extract outside of the intended root
          1747┆ members = s_pkg.getmembers()
          1748┆ for member in members:
          1749┆     if member.path.startswith((os.sep, '..{0}'.format(os.sep))):
          1750┆         return {}
          1751┆     elif '..{0}'.format(os.sep) in member.path:
          1752┆         return {}
          1753┆ s_pkg.extractall(root)
                                         
  [36m[22m[24m  salt/modules/status.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          182┆ vals = eval(func)  # pylint: disable=W0123
                                                
  [36m[22m[24m  salt/modules/trafficserver.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd, shell=False, stdout=subprocess.PIPE)
           59┆ proc = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE)
                                       
  [36m[22m[24m  salt/modules/virt.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           47┆ JINJA = jinja2.Environment(
           48┆     loader=jinja2.FileSystemLoader(
           49┆         os.path.join(salt.utils.templates.TEMPLATE_DIRNAME, 'virt')
           50┆     )
           51┆ )
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE)
          1430┆ stdout = subprocess.Popen(cmd,
          1431┆             shell=True,
          1432┆             stdout=subprocess.PIPE).communicate()[0]
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE)
          1449┆ stdout = subprocess.Popen(cmd,
          1450┆             shell=True,
          1451┆             stdout=subprocess.PIPE).communicate()[0]
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE)
          1468┆ stdout = subprocess.Popen(cmd,
          1469┆             shell=True,
          1470┆             stdout=subprocess.PIPE).communicate()[0]
            ⋮┆----------------------------------------
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          1503┆ subprocess.call(cmd, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          1506┆ subprocess.call(cmd, shell=True)
                                       
  [36m[22m[24m  salt/modules/x509.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(cert.get_pubkey().get_modulus())
          393┆ sha_hash = hashlib.sha1(cert.get_pubkey().get_modulus()).hexdigest()
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(csr.get_pubkey().get_modulus())
          628┆ 'Public Key Hash': hashlib.sha1(csr.get_pubkey().get_modulus())\
                                      
  [36m[22m[24m  salt/modules/xfs.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          249┆ data = eval('\n'.join(data))[0]  # pylint: disable=W0123
                                         
  [36m[22m[24m  salt/pillar/foreman.py[0m
     ❱ [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          111┆ url + '/hosts/' + minion_id,
                                         
  [36m[22m[24m  salt/pillar/libvirt.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call('certtool --generate-privkey > {0}'.format(cakey),shell=False)
           74┆ subprocess.call(
           75┆         'certtool --generate-privkey > {0}'.format(cakey),
           76┆         shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
           80┆ subprocess.call(cmd, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call('certtool --generate-privkey > {0}'.format(priv),shell=False)
           98┆ subprocess.call(
           99┆         'certtool --generate-privkey > {0}'.format(priv),
          100┆         shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          106┆ subprocess.call(cmd, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call('certtool --generate-privkey > {0}'.format(cpriv),shell=False)
          121┆ subprocess.call(
          122┆         'certtool --generate-privkey > {0}'.format(cpriv),
          123┆         shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          129┆ subprocess.call(cmd, shell=True)
                                             
  [36m[22m[24m  salt/pillar/pillar_ldap.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          152┆ env = Environment(loader=FileSystemLoader(dirname))
            ⋮┆----------------------------------------
          154┆ config = template.render(__grains__)
                                          
  [36m[22m[24m  salt/pillar/redismod.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           57┆ return globals()[function](minion_id, pillar, **kwargs)
                                    
  [36m[22m[24m  salt/pillar/s3.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          341┆ pickle.dump(metadata, fp_)
            ⋮┆----------------------------------------
          354┆ data = pickle.load(fp_)
                                           
  [36m[22m[24m  salt/pillar/sqlcipher.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          120┆ conn.execute('pragma key="{0}"'.format(_options.get('pass')))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          120┆ conn.execute('pragma key="{0}"'.format(_options.get('pass')))
                                       
  [36m[22m[24m  salt/pillar/stack.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          435┆ jenv = Environment(loader=FileSystemLoader(basedir), extensions=['jinja2.ext.do',
               salt.utils.jinja.SerializerExtension])                                           
                                      
  [36m[22m[24m  salt/proxy/dummy.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           39┆ pickle.dump(details, pck)
            ⋮┆----------------------------------------
           46┆ DETAILS = pickle.load(pck)
                                               
  [36m[22m[24m  salt/queues/pgjsonb_queue.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          120┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          120┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          131┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          131┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          196┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          196┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          224┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          224┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          254┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          254┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          265┆ cur.execute(del_cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          265┆ cur.execute(del_cmd)
                                              
  [36m[22m[24m  salt/queues/sqlite_queue.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           69┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           69┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           82┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           82┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          147┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          147┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          178┆ cur.execute(cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          178┆ cur.execute(cmd)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          210┆ result = cur.execute(cmd).fetchall()
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          210┆ result = cur.execute(cmd).fetchall()
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          220┆ cur.execute(del_cmd)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          220┆ cur.execute(del_cmd)
                                         
  [36m[22m[24m  salt/renderers/pass.py[0m
    ❯❱ [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret 'Could not fetch secret: %s %s'  
          being logged. This may lead to secret credentials being exposed. Make sure that the logger is not
          logging  sensitive information.                                                                  
          Details: https://sg.run/ydNx                                                                     
                                                                                                           
           85┆ log.warning('Could not fetch secret: %s %s', pass_data, pass_error)
                                                  
  [36m[22m[24m  salt/returners/carbon_return.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          168┆ data = cPickle.dumps(metrics, -1)
                                                    
  [36m[22m[24m  salt/returners/influxdb_return.py[0m
     ❱ [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          112┆ result = requests.get("http://{0}:{1}/ping".format(host, port), auth=(user, password))
                                          
  [36m[22m[24m  salt/returners/mysql.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          433┆ cur.execute(sql.format(where if filter_find_job else '', count))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          433┆ cur.execute(sql.format(where if filter_find_job else '', count))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          519┆ cur.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          519┆ cur.execute(sql)
            ⋮┆----------------------------------------
          529┆ cur.execute(sql, (timestamp,))
            ⋮┆----------------------------------------
          541┆ cur.execute(sql, (timestamp,))
            ⋮┆----------------------------------------
          550┆ cur.execute(sql, (timestamp,))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          570┆ cur.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          570┆ cur.execute(sql)
                                           
  [36m[22m[24m  salt/returners/splunk.py[0m
   ❯❯❱ [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0mrequests.post(self.server_uri, data=json.dumps(data), headers=headers,
              verify=http_event_collector_SSL_verify)                                          
          159┆ r = requests.post(self.server_uri, data=json.dumps(data), headers=headers,
               verify=http_event_collector_SSL_verify)                                   
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mrequests.post(self.server_uri, data=" ".join(self.batchEvents), headers=headers,
              verify=http_event_collector_SSL_verify)                                                    
          198┆ r = requests.post(self.server_uri, data=" ".join(self.batchEvents), headers=headers,
               verify=http_event_collector_SSL_verify)                                             
                                         
  [36m[22m[24m  salt/roster/ansible.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen([inventory_file], shell=False, stdout=subprocess.PIPE)
          247┆ inventory, error = subprocess.Popen([inventory_file], shell=True,
               stdout=subprocess.PIPE).communicate()                            
                                              
  [36m[22m[24m  salt/runners/digicertapi.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           21┆ api_key: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC
            ⋮┆----------------------------------------
           31┆ api_key: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZABC
   
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          559┆ os.chmod(tmpdir, 0o700)
                                        
  [36m[22m[24m  salt/runners/vault.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           49┆ 'saltstack-jid': globals().get('__jid__', '<no jid set>'),
            ⋮┆----------------------------------------
           51┆ 'saltstack-user': globals().get('__user__', '<no user set>')
                                            
  [36m[22m[24m  salt/runners/venafiapi.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          179┆ os.chmod(tmpdir, 0o700)
                                      
  [36m[22m[24m  salt/sdb/sqlite3.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          111┆ cur.execute(('CREATE TABLE {0} (key text, '
          112┆              'value blob)').format(table))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          111┆ cur.execute(('CREATE TABLE {0} (key text, '
          112┆              'value blob)').format(table))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          113┆ cur.execute(('CREATE UNIQUE INDEX {0} ON {1} '
          114┆              '(key)').format(idx, table))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          113┆ cur.execute(('CREATE UNIQUE INDEX {0} ON {1} '
          114┆              '(key)').format(idx, table))
                                   
  [36m[22m[24m  salt/sdb/tism.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-jwt-token.detected-jwt-token[0m
          JWT token detected          
          Details: https://sg.run/05N5
                                      
           26┆ token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhZG1pbiI6MSwiZXhwIjoxNTg1MTExNDYwLCJqdGkiOiI
               3NnA5cWNiMWdtdmw4Iiwia2V5cyI6WyJBTEwiXX0.RtAhG6Uorf5xnSf4Ya_GwJnoHkCsql4r1_hiOeDSLzo       
                                       
  [36m[22m[24m  salt/spm/__init__.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256()
          517┆ file_hash = hashlib.sha1()
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256()
          857┆ file_hash = hashlib.sha1()
                                            
  [36m[22m[24m  salt/spm/pkgdb/sqlite3.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           92┆ data = conn.execute(
           93┆     'SELECT {0} FROM packages WHERE package=?'.format(','.join(fields)),
           94┆     (package, )
           95┆ )
                                               
  [36m[22m[24m  salt/states/boto3_route53.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          675┆ if locals().get(u) != rrset.get(u):
            ⋮┆----------------------------------------
          698┆ ResourceRecordSet.update({u: locals().get(u)}) if locals().get(u) else None
            ⋮┆----------------------------------------
          698┆ ResourceRecordSet.update({u: locals().get(u)}) if locals().get(u) else None
                                                 
  [36m[22m[24m  salt/states/boto_apigateway.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1771┆ actual_param = {} if func_params.get(p) is None else func_params.get(p)
            ⋮┆----------------------------------------
          1771┆ actual_param = {} if func_params.get(p) is None else func_params.get(p)
                                          
  [36m[22m[24m  salt/states/boto_cfn.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           30┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
                                                 
  [36m[22m[24m  salt/states/boto_cloudtrail.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          242┆ if _describe[outvar] != locals()[invar]:
                                                       
  [36m[22m[24m  salt/states/boto_cloudwatch_event.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          215┆ if _describe[outvar] != locals()[invar]:
                                          
  [36m[22m[24m  salt/states/boto_iam.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-access-key-id-value.detected-aws-access-key-id-value[0m
          AWS Access Key ID Value detected. This is a sensitive credential and should not be hardcoded here.
          Instead, read this value from an environment variable or keep it in a separate, private file.     
          Details: https://sg.run/GeD1                                                                      
                                                                                                            
           32┆ - 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
           52┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
           73┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
           82┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
           94┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
          111┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
          121┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
            ⋮┆----------------------------------------
          130┆ - keyid: 'AKIAJHTMIQ2ASDFLASDF'
                                          
  [36m[22m[24m  salt/states/boto_iot.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          721┆ if _describe[var] != locals()[var]:
                                             
  [36m[22m[24m  salt/states/boto_lambda.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          352┆ if func[val] != locals()[var]:
            ⋮┆----------------------------------------
          645┆ if _describe[val] != locals()[var]:
            ⋮┆----------------------------------------
          854┆ if _describe[val] != locals()[var]:
                                      
  [36m[22m[24m  salt/states/file.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
          1858┆ -----BEGIN RSA PRIVATE KEY-----
          1859┆ MIIEowIBAAKCAQEAoQiwO3JhBquPAalQF9qP1lLZNXVjYMIswrMe2HcWUVBgh+vY
                                              
  [36m[22m[24m  salt/states/gnomedesktop.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          135┆ if pref in locals() and locals()[pref] is not None:
            ⋮┆----------------------------------------
          169┆ if pref in locals() and locals()[pref] is not None:
            ⋮┆----------------------------------------
          239┆ if pref in locals() and locals()[pref] is not None:
                                         
  [36m[22m[24m  salt/states/hipchat.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           20┆ - api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           28┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           61┆ - api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                      
  [36m[22m[24m  salt/states/loop.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          107┆ if eval(condition):  # pylint: disable=W0123
                                        
  [36m[22m[24m  salt/states/netntp.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          176┆ return globals().get(name)(*kargs)
                                          
  [36m[22m[24m  salt/states/pkgbuild.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-pgp-private-key-block.detected-pgp-private-key-block[0m
          Something that looks like a PGP private key block is detected. This is a potential hardcoded secret
          that could be leaked if this code is committed. Instead, remove this code block from the commit.   
          Details: https://sg.run/ydKd                                                                       
                                                                                                             
          258┆ -----BEGIN PGP PRIVATE KEY BLOCK-----
                                       
  [36m[22m[24m  salt/states/slack.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           17┆ - api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           24┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
            ⋮┆----------------------------------------
           58┆ - api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                         
  [36m[22m[24m  salt/states/sqlite3.py[0m
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          164┆ cursor = conn.execute("DELETE FROM `" +
          165┆                       table + "` WHERE " + where_sql)
            ⋮┆----------------------------------------
          167┆ cursor = conn.execute("DELETE FROM `" +
          168┆                       table + "` WHERE " + where_sql,
          169┆                       where_args)
            ⋮┆----------------------------------------
          274┆ cursor = conn.execute(sql, params)
            ⋮┆----------------------------------------
          312┆ cursor = conn.execute(sql, values)
            ⋮┆----------------------------------------
          358┆ conn.execute("DROP TABLE " + name)
            ⋮┆----------------------------------------
          426┆ conn.execute("DROP TABLE `" + name + "`")
                                         
  [36m[22m[24m  salt/tops/ext_nodes.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE)
           80┆ subprocess.Popen(
           81┆     cmd,
           82┆     shell=True,
           83┆     stdout=subprocess.PIPE
           84┆     ).communicate()[0])
                                           
  [36m[22m[24m  salt/transport/zeromq.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(six.b(self.opts['id']))
          291┆ self.hexid = hashlib.sha1(six.b(self.opts['id'])).hexdigest()
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(topic)
          757┆ htopic = hashlib.sha1(topic).hexdigest()
                                    
  [36m[22m[24m  salt/utils/aws.py[0m
     ❱ [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
           87┆ "http://169.254.169.254/latest/meta-data/iam/security-credentials/",
            ⋮┆----------------------------------------
           99┆ "http://169.254.169.254/latest/meta-data/iam/security-credentials/{0}".format(role),
            ⋮┆----------------------------------------
          549┆ "http://169.254.169.254/latest/dynamic/instance-identity/document",
                                      
  [36m[22m[24m  salt/utils/cloud.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          115┆ return str(template.render(opts=opts, vm=vm_, minion=minion))
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m▶▶┆ Autofix ▶ [0msubprocess.call(cmd, shell=False)
          2387┆ subprocess.call(cmd, shell=True)
   
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o755` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          2618┆ os.chmod(base, 0o755)
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(script_content)
          2831┆ hashlib.sha1(script_content).hexdigest()
                                      
  [36m[22m[24m  salt/utils/event.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o666` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          1115┆ os.chmod(os.path.join(
          1116┆     self.opts['sock_dir'], 'master_event_pub.ipc'), 0o666)
                                     
  [36m[22m[24m  salt/utils/find.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          609┆ obj = globals()[key.title() + "Option"](key, value)
                                     
  [36m[22m[24m  salt/utils/http.py[0m
    ❯❱ [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          365┆ sockwrap = ssl.wrap_socket(
          366┆     sock,
          367┆     ca_certs=ca_bundle,
          368┆     cert_reqs=ssl.CERT_REQUIRED
          369┆ )
                                        
  [36m[22m[24m  salt/utils/minions.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          564┆ return list(eval(results))  # pylint: disable=W0123
                                       
  [36m[22m[24m  salt/utils/napalm.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          305┆ provider_lib = importlib.import_module(network_device.get('PROVIDER'))
                                        
  [36m[22m[24m  salt/utils/network.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen('{0} link show'.format(ip_path),shell=False,close_fds=True,stdout=subprocess.P
              IPE,stderr=subprocess.STDOUT)                                                                             
          768┆ cmd1 = subprocess.Popen(
          769┆     '{0} link show'.format(ip_path),
          770┆     shell=True,
          771┆     close_fds=True,
          772┆     stdout=subprocess.PIPE,
          773┆     stderr=subprocess.STDOUT).communicate()[0]
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen('{0} addr show'.format(ip_path),shell=False,close_fds=True,stdout=subprocess.P
              IPE,stderr=subprocess.STDOUT)                                                                             
          774┆ cmd2 = subprocess.Popen(
          775┆     '{0} addr show'.format(ip_path),
          776┆     shell=True,
          777┆     close_fds=True,
          778┆     stdout=subprocess.PIPE,
          779┆     stderr=subprocess.STDOUT).communicate()[0]
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen('{0}                                                   
              -a'.format(ifconfig_path),shell=False,stdout=subprocess.PIPE,stderr=subprocess.STDO
              UT)                                                                                
          784┆ cmd = subprocess.Popen(
          785┆     '{0} -a'.format(ifconfig_path),
          786┆     shell=True,
          787┆     stdout=subprocess.PIPE,
          788┆     stderr=subprocess.STDOUT).communicate()[0]
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen('entstat -d {0} | grep \'Hardware                      
              Address\''.format(iface),shell=False,stdout=subprocess.PIPE,stderr=subprocess.STDOU
              T)                                                                                 
          958┆ cmd = subprocess.Popen(
          959┆     'entstat -d {0} | grep \'Hardware Address\''.format(iface),
          960┆     shell=True,
          961┆     stdout=subprocess.PIPE,
          962┆     stderr=subprocess.STDOUT).communicate()[0]
                                         
  [36m[22m[24m  salt/utils/pushover.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           16┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                      
  [36m[22m[24m  salt/utils/slack.py[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           16┆ api_key: peWcBiMOS9HrZG15peWcBiMOS9HrZG15
                                          
  [36m[22m[24m  salt/utils/templates.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          327┆ jinja_env = jinja2.Environment(**env_args)
            ⋮┆----------------------------------------
          329┆ jinja_env = jinja2.Environment(undefined=jinja2.StrictUndefined,
          330┆                                **env_args)
   
     ❱ [1mpython.lang.security.audit.mako-templates-detected.mako-templates-detected[0m
          Mako templates do not provide a global HTML escaping mechanism. This means you must escape all      
          sensitive data in your templates using '| u' for URL escaping or '| h' for HTML escaping. If you are
          using Mako to serve web content, consider using a system such as Jinja2 which enables global        
          escaping.                                                                                           
          Details: https://sg.run/Q5v4                                                                        
                                                                                                              
          489┆ return Template(
          490┆     tmplstr,
          491┆     strict_undefined=True,
          492┆     uri=context['sls'].replace('.', '/') if 'sls' in context else None,
          493┆     lookup=lookup
          494┆ ).render(**context)
                                     
  [36m[22m[24m  salt/utils/thin.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          131┆ moddir, modname = os.path.split(locals()[mod].__file__)
            ⋮┆----------------------------------------
          147┆ tops.append(locals()[mod].__file__)
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, shell=False)
          210┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
          244┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
               shell=True)                                                                         
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
          260┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
               shell=True)                                                                         
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, shell=False)
          395┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, shell=True)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
          429┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
               shell=True)                                                                         
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False)
          445┆ cmd = subprocess.Popen(py_shell_cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE,
               shell=True)                                                                         
                                       
  [36m[22m[24m  salt/utils/verify.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `448` are widely permissive and grant access to more people than may be necessary.
          A good default is `0o644` which gives read and write access to yourself and read access to everyone 
          else.                                                                                               
          Details: https://sg.run/AXY4                                                                        
                                                                                                              
          283┆ os.chmod(dir_, 448)
                                       
  [36m[22m[24m  salt/utils/vmware.py[0m
    ❯❱ [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          251┆ context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
                                          
  [36m[22m[24m  salt/utils/vt_helper.py[0m
    ❯❱ [1mpython.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument[0m
          Hardcoded password is used as a default argument to '__init__'. This could be dangerous if a real
          password is not supplied.                                                                        
          Details: https://sg.run/Lw9r                                                                     
                                                                                                           
           32┆ def __init__(self,
           33┆              username='salt',
           34┆              password='password',
           35┆              host='localhost',
           36┆              key_accept=False,
           37┆              prompt=r'(Cmd)',
           38┆              passwd_retries=3,
           39┆              linesep=os.linesep,
           40┆              ssh_args=''):
           41┆     '''
             [hid 64 additional lines, adjust with --max-lines-per-finding] 
                                           
  [36m[22m[24m  salt/utils/win_update.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE,stderr=subprocess.PIPE)
          970┆ p = subprocess.Popen(
          971┆     cmd,
          972┆     shell=True,
          973┆     stdout=subprocess.PIPE,
          974┆     stderr=subprocess.PIPE)
                                           
  [36m[22m[24m  salt/utils/yamlloader.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          109┆ node.value = eval(node.value, {}, {})  # pylint: disable=W0123
                           
  [36m[22m[24m  setup.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          138┆ exec(compile(open(SALT_VERSION).read(), SALT_VERSION, 'exec'))
   
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          505┆ req = urlopen(furl)
            ⋮┆----------------------------------------
          622┆ req = urlopen(url)
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mPopen(test_cmd, shell=False,stdout=sys.stdout, stderr=sys.stderr,cwd=build_cmd.build_lib)
          679┆ test_process = Popen(
          680┆     test_cmd, shell=True,
          681┆     stdout=sys.stdout, stderr=sys.stderr,
          682┆     cwd=build_cmd.build_lib
          683┆ )
   
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o755` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          807┆ os.chmod(filename, 0o755)
