                    
                    
┌──────────────────┐
│ 83 Code Findings │
└──────────────────┘
                                                                                    
  [36m[22m[24m  dart/lib/component/item_table_component/item_table_component.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
                                                                                            
  [36m[22m[24m  dart/lib/component/revision_table_component/revision_table_component.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           16┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           16┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           16┆ <li class="{{ class_for_selection(2, 4) }}"><a
               href="{{url_for_compare()}}">Compare</a></li> 
                                     
  [36m[22m[24m  dart/web/js/sso.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `name` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
            6┆ var results = new RegExp('[\?&]' + name + '=([^&#]*)').exec(window.location.href);
                                   
  [36m[22m[24m  dart/web/ui.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           21┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           22┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
            ⋮┆----------------------------------------
          102┆ <script
          103┆   src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
          104┆   type="text/javascript"></script>
                                         
  [36m[22m[24m  data/aws_accounts.json[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-aws-account-id.detected-aws-account-id[0m
          AWS Account ID detected. While not considered sensitive information, it is important to use them and
          share them carefully. For that reason it would be preferrable avoiding to hardcoded it here.        
          Instead, read the value from an environment variable or keep the value in a separate, private file. 
          Details: https://sg.run/Ro22                                                                        
                                                                                                              
            7┆ "account_id": "977081816279"
            ⋮┆----------------------------------------
           11┆ "account_id": "216624486486"
            ⋮┆----------------------------------------
           15┆ "account_id": "492519147666"
            ⋮┆----------------------------------------
           19┆ "account_id": "903692715234"
            ⋮┆----------------------------------------
           23┆ "account_id": "284668455005"
            ⋮┆----------------------------------------
           27┆ "account_id": "819402241893"
            ⋮┆----------------------------------------
           31┆ "account_id": "035351147821"
            ⋮┆----------------------------------------
           35┆ "account_id": "859597730677"
            ⋮┆----------------------------------------
           39┆ "account_id": "814480443879"
            ⋮┆----------------------------------------
           43┆ "account_id": "086441151436"
            ⋮┆----------------------------------------
           47┆ "account_id": "475085895292"
            ⋮┆----------------------------------------
           51┆ "account_id": "388731089494"
            ⋮┆----------------------------------------
           55┆ "account_id": "113285607260"
            ⋮┆----------------------------------------
           64┆ "account_id": "127311923021"
            ⋮┆----------------------------------------
           68┆ "account_id": "033677994240"
            ⋮┆----------------------------------------
           72┆ "account_id": "027434742980"
            ⋮┆----------------------------------------
           76┆ "account_id": "797873946194"
            ⋮┆----------------------------------------
           80┆ "account_id": "156460612806"
            ⋮┆----------------------------------------
           84┆ "account_id": "054676820928"
            ⋮┆----------------------------------------
           88┆ "account_id": "582318560864"
            ⋮┆----------------------------------------
           92┆ "account_id": "600734575887"
            ⋮┆----------------------------------------
           96┆ "account_id": "114774131450"
            ⋮┆----------------------------------------
          100┆ "account_id": "783225319266"
            ⋮┆----------------------------------------
          104┆ "account_id": "507241528517"
            ⋮┆----------------------------------------
          108┆ "account_id": "718504428378"
            ⋮┆----------------------------------------
          112┆ "account_id": "048591011584"
            ⋮┆----------------------------------------
          116┆ "account_id": "638102146993"
            ⋮┆----------------------------------------
          125┆ "account_id": "193672423079"
            ⋮┆----------------------------------------
          129┆ "account_id": "391106570357"
            ⋮┆----------------------------------------
          133┆ "account_id": "902366379725"
            ⋮┆----------------------------------------
          141┆ "account_id": "210876761215"
            ⋮┆----------------------------------------
          145┆ "account_id": "907379612154"
            ⋮┆----------------------------------------
          149┆ "account_id": "404641285394"
            ⋮┆----------------------------------------
          153┆ "account_id": "760740231472"
            ⋮┆----------------------------------------
          157┆ "account_id": "865932855811"
            ⋮┆----------------------------------------
          161┆ "account_id": "361669875840"
            ⋮┆----------------------------------------
          165┆ "account_id": "762762565011"
                                     
  [36m[22m[24m  docker-compose.yml[0m
    ❯❱ [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'postgres' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                           
          Details: https://sg.run/0n8q                                                                  
                                                                                                        
           16┆ postgres:
   
    ❯❱ [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'postgres' is running with a writable root filesystem. This may allow malicious applications
          to download and run additional payloads, or modify container files. If an application inside a      
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           16┆ postgres:
   
    ❯❱ [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'api' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                      
          Details: https://sg.run/0n8q                                                             
                                                                                                   
           22┆ api:
   
    ❯❱ [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'api' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a       
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this 
          service to prevent this.                                                                          
          Details: https://sg.run/e4JE                                                                      
                                                                                                            
           22┆ api:
   
    ❯❱ [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'scheduler' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                            
          Details: https://sg.run/0n8q                                                                   
                                                                                                         
           32┆ scheduler:
   
    ❯❱ [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'scheduler' is running with a writable root filesystem. This may allow malicious          
          applications to download and run additional payloads, or modify container files. If an application
          inside a container has to save something temporarily consider using a tmpfs. Add 'read_only: true'
          to this service to prevent this.                                                                  
          Details: https://sg.run/e4JE                                                                      
                                                                                                            
           32┆ scheduler:
   
    ❯❱ [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'nginx' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                        
          Details: https://sg.run/0n8q                                                               
                                                                                                     
           42┆ nginx:
   
    ❯❱ [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'nginx' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a         
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this   
          service to prevent this.                                                                            
          Details: https://sg.run/e4JE                                                                        
                                                                                                              
           42┆ nginx:
   
    ❯❱ [1myaml.docker-compose.security.no-new-privileges.no-new-privileges[0m
          Service 'init' allows for privilege escalation via setuid or setgid binaries. Add 'no-new-
          privileges:true' in 'security_opt' to prevent this.                                       
          Details: https://sg.run/0n8q                                                              
                                                                                                    
           68┆ init:
   
    ❯❱ [1myaml.docker-compose.security.writable-filesystem-service.writable-filesystem-service[0m
          Service 'init' is running with a writable root filesystem. This may allow malicious applications to
          download and run additional payloads, or modify container files. If an application inside a        
          container has to save something temporarily consider using a tmpfs. Add 'read_only: true' to this  
          service to prevent this.                                                                           
          Details: https://sg.run/e4JE                                                                       
                                                                                                             
           68┆ init:
                                              
  [36m[22m[24m  security_monkey/__init__.py[0m
    ❯❱ [1mpython.flask.security.unescaped-template-extension.unescaped-template-extension[0m
          Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml
          extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template   
          extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more      
          information.                                                                                     
          Details: https://sg.run/x1Rg                                                                     
                                                                                                           
           55┆ return render_template('csrf_error.json', reason=reason), 400
                                             
  [36m[22m[24m  security_monkey/alerter.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           43┆ body = template.render(content)
                                             
  [36m[22m[24m  security_monkey/auditor.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          301┆ return template.render({'items': report_list})
                                                  
  [36m[22m[24m  security_monkey/common/jinja.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           34┆ jinja_environment = jinja2.Environment(loader=jinja2.FileSystemLoader(templates_directory))
                                                
  [36m[22m[24m  security_monkey/decorators.py[0m
    ❯❱ [1mpython.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content[0m
          Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could    
          create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML.
          If you are rendering HTML, write your HTML in a template file and use `flask.render_template()`     
          which will take care of escaping. If you are returning data from an API, consider using             
          `flask.jsonify()`.                                                                                  
          Details: https://sg.run/3x3p                                                                        
                                                                                                              
           61┆ resp = make_response(f(*args, **kwargs))
                                                                          
  [36m[22m[24m  security_monkey/templates/security/forgot_password.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           22┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           23┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           52┆ <form action="{{ url_for_security('forgot_password') }}" method="POST"
               name="forgot_password_form" class="form-signin">                      
           53┆     {% include "security/_messages.html" %}
           54┆     <h1>Send password reset instructions</h1>
           55┆       <input id="csrf_token" name="csrf_token" type="hidden" value="{{
               forgot_password_form.generate_csrf_token() }}">                       
           56┆       <input type="email" class="form-control" placeholder="Email address" id="email"
               name="email" required autofocus>                                                     
           57┆       {{ render_errors(forgot_password_form.email) }}
           58┆       <button class="btn btn-lg btn-primary btn-block" id="submit" name="submit"
               type="submit" value="Recover Password">Recover Password</button>                
           59┆     {% include "security/_menu.html" %}
           60┆ </form>
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           69┆ <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
           70┆         type="text/javascript"></script>
                                                                     
  [36m[22m[24m  security_monkey/templates/security/login_user.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           22┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           23┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           52┆ <form action="{{ url_for_security('login') }}" method="POST" name="login_user_form"
               class="form-signin">                                                               
           53┆ {% include "security/_messages.html" %}
           54┆ <h1>Login</h1>
           55┆   <div id="login_div">
           56┆   <div class="login-or"><hr class="hr-or"><span class="span-or">SSO</span></div>
           57┆     <div id="sso_buttons"></div>
           58┆
           59┆   <br />
           60┆   <div class="login-or"><hr class="hr-or"><span class="span-or">OR</span></div>
           61┆   <input id="csrf_token" name="csrf_token" type="hidden" value="{{
               login_user_form.generate_csrf_token() }}">                        
             [hid 11 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           81┆ <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
           82┆         type="text/javascript"></script>
                                                                        
  [36m[22m[24m  security_monkey/templates/security/register_user.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           22┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           23┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           53┆ <form action="{{ url_for_security('register') }}" method="POST" name="register_user_form"
               class="form-signin">                                                                     
           54┆ {% include "security/_messages.html" %}
           55┆ <h1>Register</h1>
           56┆   <input id="csrf_token" name="csrf_token" type="hidden" value="{{
               register_user_form.generate_csrf_token() }}">                     
           57┆   <input type="email" class="form-control" placeholder="Email address" id="email"
               name="email" required autofocus>                                                 
           58┆   {{ render_errors(register_user_form.email) }}
           59┆   <input type="password" class="form-control" placeholder="Password" id="password"
               name="password" required>                                                         
           60┆   {{ render_errors(register_user_form.password) }}
           61┆   {% if register_user_form.password_confirm %}
           62┆       <input type="password" class="form-control" placeholder="Confirm Password"
               id="password_confirm" name="password_confirm" required>                         
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           76┆ <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
           77┆         type="text/javascript"></script>
                                                                         
  [36m[22m[24m  security_monkey/templates/security/reset_password.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           22┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           23┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           53┆ <form action="{{ url_for_security('reset_password', token=reset_password_token) }}"
               method="POST" name="reset_password_form" class="form-signin">                      
           54┆     {% include "security/_messages.html" %}
           55┆     <h1>Reset password</h1>
           56┆     <input id="csrf_token" name="csrf_token" type="hidden" value="{{
               reset_password_form.generate_csrf_token() }}">                      
           57┆     <input type="password" class="form-control" placeholder="Password" id="password"
               name="password" required>                                                           
           58┆     {{ render_errors(reset_password_form.password) }}
           59┆     <input type="password" class="form-control" placeholder="Confirm Password"
               id="password_confirm" name="password_confirm" required>                       
           60┆   {{ render_errors(reset_password_form.password_confirm) }}
           61┆   <button class="btn btn-lg btn-primary btn-block" id="submit" name="submit" type="submit"
               value="Reset Password">Reset Password</button>                                            
           62┆ {% include "security/_menu.html" %}
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           72┆ <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
           73┆         type="text/javascript"></script>
                                                                            
  [36m[22m[24m  security_monkey/templates/security/send_confirmation.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           22┆ <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
            ⋮┆----------------------------------------
           23┆ <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
   
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           52┆ <form action="{{ url_for_security('send_confirmation') }}" method="POST"
               name="send_confirmation_form" class="form-signin">                      
           53┆   {% include "security/_messages.html" %}
           54┆   <h1>Resend confirmation instructions</h1>
           55┆   <input id="csrf_token" name="csrf_token" type="hidden" value="{{
               send_confirmation_form.generate_csrf_token() }}">                 
           56┆   <input type="email" class="form-control" placeholder="Email address" id="email"
               name="email" required autofocus>                                                 
           57┆   {{ render_errors(send_confirmation_form.email) }}
           58┆   <button class="btn btn-lg btn-primary btn-block" id="submit" name="submit" type="submit"
               value="Resend Confirmation">Resend Confirmation</button>                                  
           59┆   {% include "security/_menu.html" %}
           60┆ </form>
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           69┆ <script src="https://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js"
           70┆         type="text/javascript"></script>
                                             
  [36m[22m[24m  security_monkey/watcher.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          481┆ body = template.render(self._dict_for_template())
