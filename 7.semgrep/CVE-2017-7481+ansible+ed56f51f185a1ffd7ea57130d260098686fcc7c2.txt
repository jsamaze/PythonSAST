                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 319 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                         
  [36m[22m[24m  bin/ansible-connection[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          217‚îÜ pc_data = cPickle.load(src)
            ‚ãÆ‚îÜ----------------------------------------
          271‚îÜ pc_data = cPickle.load(src)
                                                  
  [36m[22m[24m  contrib/inventory/cloudforms.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          183‚îÜ self.group_patterns = eval(group_patterns)
                                               
  [36m[22m[24m  contrib/inventory/cobbler.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           68‚îÜ import xmlrpclib
                                              
  [36m[22m[24m  contrib/inventory/rackhd.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mrequests.get( url, verify=True)
           28‚îÜ r = requests.get( url, verify=False)
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mrequests.get( url, verify=True)
           73‚îÜ r = requests.get( url, verify=False)
   
     ‚ù± [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
           73‚îÜ r = requests.get( url, verify=False)
                                                 
  [36m[22m[24m  contrib/inventory/spacewalk.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o2775` are widely permissive and grant access to more people than may be      
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
           76‚îÜ os.chmod(CACHE_DIR, 0o2775)
                                              
  [36m[22m[24m  contrib/inventory/vmware.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.unverified-ssl-context.unverified-ssl-context[0m
          Unverified SSL context detected. This will permit insecure connections without verifying SSL
          certificates. Use 'ssl.create_default_context' instead.                                     
          Details: https://sg.run/N4lp                                                                
                                                                                                      
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mssl._create_default_https_context = ssl.create_default_context
          115‚îÜ ssl._create_default_https_context = ssl._create_unverified_context
                                                        
  [36m[22m[24m  contrib/inventory/vmware_inventory.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          118‚îÜ env = Environment()
                                            
  [36m[22m[24m  docs/bin/dump_keywords.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           63‚îÜ env = Environment(loader=FileSystemLoader(options.template_dir), trim_blocks=True,)
            ‚ãÆ‚îÜ----------------------------------------
           69‚îÜ f.write(template.render(tempvars))
                                           
  [36m[22m[24m  docs/bin/generate_man.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          116‚îÜ env = Environment(loader=FileSystemLoader('../templates'))
            ‚ãÆ‚îÜ----------------------------------------
          126‚îÜ manpage = template.render(tvars)
                                               
  [36m[22m[24m  docs/bin/plugin_formatter.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          204‚îÜ env = Environment(loader=FileSystemLoader(template_dir),
          205‚îÜ     variable_start_string="@{",
          206‚îÜ     variable_end_string="}@",
          207‚îÜ     trim_blocks=True,
          208‚îÜ )
                                                 
  [36m[22m[24m  docs/docsite/_static/jquery.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `b` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           51‚îÜ C=z&&z.events;if(z&&C){if(b&&b.type){d=b.handler;b=b.type}if(!b||typeof                    
               b==="string"&&b.charAt(0)==="."){b=b||"";for(e in                                          
               C)c.event.remove(a,e+b)}else{for(b=b.split("                                               
               ");e=b[j++];){n=e;i=e.indexOf(".")<0;o=[];if(!i){o=e.split(".");e=o.shift();k=new RegExp("(
               ^|\\.)"+c.map(o.slice(0).sort(),db).join("\\.(?:.*\\.)?")+"(\\.|$)")}if(r=C[e])if(d){n=c.ev
               ent.special[e]||{};for(B=f||0;B<r.length;B++){u=r[B];if(d.guid===u.guid){if(i||k.test(u.nam
               espace)){f==null&&r.splice(B--,1);n.remove&&n.remove.call(a,u)}if(f!=                      
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `a` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           55‚îÜ if(!b){d=a.type.split(".");a.type=d.shift();f=new RegExp("(^|\\.)"+d.slice(0).sort().join("
               \\.(?:.*\\.)?")+"(\\.|$)")}e=c.data(this,"events");d=e[a.type];if(e&&d){d=d.slice(0);e=0;fo
               r(var j=d.length;e<j;e++){var i=d[e];if(b||f.test(i.namespace)){a.handler=i.handler;a.data=
               i.data;a.handleObj=i;i=i.handler.apply(this,arguments);if(i!==w){a.result=i;if(i===false){a
               .preventDefault();a.stopPropagation()}}if(a.isImmediatePropagationStopped())break}}}return 
               a.result},props:"altKey attrChange attrName bubbles button cancelable charCode clientX     
               clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX    
               layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode   
               relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta         
               which".split(" "),                                                                         
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           70‚îÜ if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&
               !p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}func
               tion d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false
               ;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset
               =q}if(typeof h!=="string"){if(t===h){y=true;break}}else                                    
               if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var                                
               f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^     
               >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,                                            
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&
               !p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}func
               tion d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false
               ;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset
               =q}if(typeof h!=="string"){if(t===h){y=true;break}}else                                    
               if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var                                
               f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^     
               >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,                                            
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&
               !p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}func
               tion d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false
               ;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset
               =q}if(typeof h!=="string"){if(t===h){y=true;break}}else                                    
               if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var                                
               f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^     
               >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,                                            
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&
               !p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}func
               tion d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false
               ;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset
               =q}if(typeof h!=="string"){if(t===h){y=true;break}}else                                    
               if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var                                
               f=/((?:\((?:\([^()]+\)|[^()]+)+\)|\[(?:\[[^[\]]*\]|['"][^'"]*['"]|[^[\]'"]+)+\]|\\.|[^     
               >+~,(\[\\]+)+|[>+~])(\s*,\s*)?((?:.|\r|\n)*)/g,                                            
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `h` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           86‚îÜ "="?l===h:m==="*="?l.indexOf(h)>=0:m==="~="?(" "+l+" ").indexOf(h)>=0:!h?l&&g!==false:m==="
               !="?l!==h:m==="^="?l.indexOf(h)===0:m==="$="?l.substr(l.length-                            
               h.length)===h:m==="|="?l===h||l.substr(0,h.length+1)===h+"-                                
               ":false},POS:function(g,h,l,m){var q=n.setFilters[h[2]];if(q)return                        
               q(g,l,h,m)}}},r=n.match.POS;for(var u in n.match){n.match[u]=new                           
               RegExp(n.match[u].source+/(?![^\[]*\])(?![^\(]*\))/.source);n.leftMatch[u]=new             
               RegExp(/(^(?:.|\r|\n)*?)/.source+n.match[u].source.replace(/\\(\d+)/g,function(g,          
           87‚îÜ h){return"\\"+(h-0+1)}))}var                                                               
               z=function(g,h){g=Array.prototype.slice.call(g,0);if(h){h.push.apply(h,g);return h}return g
               };try{Array.prototype.slice.call(s.documentElement.childNodes,0)}catch(C){z=function(g,h){h
               =h||[];if(j.call(g)==="[object Array]")Array.prototype.push.apply(h,g);else if(typeof      
               g.length==="number")for(var l=0,m=g.length;l<m;l++)h.push(g[l]);else                       
               for(l=0;g[l];l++)h.push(g[l]);return h}}var B;if(s.documentElement.compareDocumentPosition)
               B=function(g,h){if(!g.compareDocumentPosition||                                            
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
           89‚îÜ h.ownerDocument.createRange();l.setStart(g,0);l.setEnd(g,0);m.setStart(h,0);m.setEnd(h,0);g
               =l.compareBoundaryPoints(Range.START_TO_END,m);if(g===0)i=true;return g};(function(){var   
               g=s.createElement("div"),h="script"+(new Date).getTime();g.innerHTML="<a                   
               name='"+h+"'/>";var l=s.documentElement;l.insertBefore(g,l.firstChild);if(s.getElementById(
               h)){n.find.ID=function(m,q,p){if(typeof                                                    
               q.getElementById!=="undefined"&&!p)return(q=q.getElementById(m[1]))?q.id===m[1]||typeof    
               q.getAttributeNode!=="undefined"&&                                                         
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
           99‚îÜ a.contentDocument||a.contentWindow.document:c.makeArray(a.childNodes)}},function(a,b){c.fn[
               a]=function(d,f){var e=c.map(this,b,d);eb.test(a)||(f=d);if(f&&typeof f==="string")e=c.filt
               er(f,e);e=this.length>1?c.unique(e):e;if((this.length>1||gb.test(f))&&fb.test(a))e=e.revers
               e();return this.pushStack(e,a,R.call(arguments).join(","))}});c.extend({filter:function(a,b
               ,d){if(d)a=":not("+a+")";return c.find.matches(a,b)},dir:function(a,b,d){var               
               f=[];for(a=a[b];a&&a.nodeType!==9&&(d===w||a.nodeType!==1||!c(a).is(d));){a.nodeType===    
            ‚ãÆ‚îÜ----------------------------------------
          100‚îÜ 1&&f.push(a);a=a[b]}return f},nth:function(a,b,d){b=b||1;for(var                           
               f=0;a;a=a[d])if(a.nodeType===1&&++f===b)break;return a},sibling:function(a,b){for(var      
               d=[];a;a=a.nextSibling)a.nodeType===1&&a!==b&&d.push(a);return d}});var Ja=/ jQuery\d+="(?:
               \d+|null)"/g,V=/^\s+/,Ka=/(<([\w:]+)[^>]*?)\/>/g,hb=/^(?:area|br|col|embed|hr|img|input|lin
               k|meta|param)$/i,La=/<([\w:]+)/,ib=/<tbody/i,jb=/<|&#?\w+;/,ta=/<script|<object|<embed|<opt
               ion|<style/i,ua=/checked\s*(?:[^=]|=\s*.checked.)/i,Ma=function(a,b,d){return hb.test(d)?  
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          107‚îÜ ""):null;else if(typeof a==="string"&&!ta.test(a)&&(c.support.leadingWhitespace||!V.test(a)
               )&&!F[(La.exec(a)||["",""])[1].toLowerCase()]){a=a.replace(Ka,Ma);try{for(var b=0,d=this.le
               ngth;b<d;b++)if(this[b].nodeType===1){c.cleanData(this[b].getElementsByTagName("*"));this[b
               ].innerHTML=a}}catch(f){this.empty().append(a)}}else                                       
               c.isFunction(a)?this.each(function(e){var                                                  
               j=c(this),i=j.html();j.empty().append(function(){return                                    
               a.call(this,e,i)})}):this.empty().append(a);return                                         
               this},replaceWith:function(a){if(this[0]&&                                                 
                                                             
  [36m[22m[24m  docs/docsite/_themes/srtd/breadcrumbs.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            2‚îÜ <li><a href="{{ pathto(master_doc) }}">Docs</a> &raquo;</li>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            2‚îÜ <li><a href="{{ pathto(master_doc) }}">Docs</a> &raquo;</li>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            2‚îÜ <li><a href="{{ pathto(master_doc) }}">Docs</a> &raquo;</li>
                                                        
  [36m[22m[24m  docs/docsite/_themes/srtd/footer.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           33‚îÜ Ansible docs are generated from <a href="https://github.com/ansible/ansible">GitHub       
               sources</a> using <a href="http://sphinx-doc.org/">Sphinx</a> using a theme provided by <a
               href="http://readthedocs.org">Read the Docs</a>. {% if pagename.endswith("_module") %}.   
               Module documentation is not edited directly, but is generated from the source code for the
               modules.  To submit an update to module docs, edit the 'DOCUMENTATION' metadata in the <a 
               href="https://github.com/ansible/ansible/tree/devel/lib/ansible/modules">modules          
               directory</a> of the <a href="https://github.com/ansible/ansible/">core source code       
               repository</a>. {% endif %}                                                               
            ‚ãÆ‚îÜ----------------------------------------
           33‚îÜ Ansible docs are generated from <a href="https://github.com/ansible/ansible">GitHub       
               sources</a> using <a href="http://sphinx-doc.org/">Sphinx</a> using a theme provided by <a
               href="http://readthedocs.org">Read the Docs</a>. {% if pagename.endswith("_module") %}.   
               Module documentation is not edited directly, but is generated from the source code for the
               modules.  To submit an update to module docs, edit the 'DOCUMENTATION' metadata in the <a 
               href="https://github.com/ansible/ansible/tree/devel/lib/ansible/modules">modules          
               directory</a> of the <a href="https://github.com/ansible/ansible/">core source code       
               repository</a>. {% endif %}                                                               
                                                        
  [36m[22m[24m  docs/docsite/_themes/srtd/layout.html[0m
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           17‚îÜ <script type="text/javascript" src="//www.redhat.com/dtm.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           39‚îÜ <link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-
               awesome.min.css' rel='stylesheet' type='text/css'>                             
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           46‚îÜ URL_ROOT:'{{ url_root }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           46‚îÜ URL_ROOT:'{{ url_root }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           47‚îÜ VERSION:'{{ release|e }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           47‚îÜ VERSION:'{{ release|e }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           49‚îÜ FILE_SUFFIX:'{{ '' if no_search_suffix else file_suffix }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           49‚îÜ FILE_SUFFIX:'{{ '' if no_search_suffix else file_suffix }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           50‚îÜ HAS_SOURCE:  {{ has_source|lower }}
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           50‚îÜ HAS_SOURCE:  {{ has_source|lower }}
            ‚ãÆ‚îÜ----------------------------------------
           54‚îÜ <script type="text/javascript" src="{{ pathto(scriptfile, 1) }}"></script>
   
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          101‚îÜ <script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
                                                        
  [36m[22m[24m  docs/docsite/_themes/srtd/search.html[0m
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           15‚îÜ jQuery(function() { Search.loadIndex("{{ pathto('searchindex.js', 1) }}"); });
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           15‚îÜ jQuery(function() { Search.loadIndex("{{ pathto('searchindex.js', 1) }}"); });
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
                                                          
  [36m[22m[24m  docs/docsite/_themes/srtd/versions.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           32‚îÜ Free document hosting provided by <a href="http://www.readthedocs.org">Read the Docs</a>.
                                                                                       
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/breadcrumbs.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            2‚îÜ <li><a href="{{ pathto(master_doc) }}" <title>{{ titlesuffix }}</title></a> &raquo;</li>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            2‚îÜ <li><a href="{{ pathto(master_doc) }}" <title>{{ titlesuffix }}</title></a> &raquo;</li>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            2‚îÜ <li><a href="{{ pathto(master_doc) }}" <title>{{ titlesuffix }}</title></a> &raquo;</li>
                                                                                  
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/footer.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5‚îÜ <a href="{{ next.link|e }}" class="btn btn-neutral float-right" title="{{              
               next.title|striptags|e }}"/>Next <span class="icon icon-circle-arrow-right"></span></a>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            8‚îÜ <a href="{{ prev.link|e }}" class="btn btn-neutral" title="{{ prev.title|striptags|e
               }}"><span class="icon icon-circle-arrow-left"></span> Previous</a>                  
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           16‚îÜ &copy; Copyright 2015 <a href="http://ansible.com">Ansible, Inc.</a>.
            ‚ãÆ‚îÜ----------------------------------------
           23‚îÜ Ansible docs are generated from <a href="http://github.com/ansible/ansible">GitHub        
               sources</A> using <A HREF="http://sphinx-doc.org/">Sphinx</A> using a theme provided by <a
               href="http://readthedocs.org">Read the Docs</a>. {% if pagename.endswith("_module") %}.   
               Module documentation is not edited directly, but is generated from the source code for the
               modules.  To submit an update to module docs, edit the 'DOCUMENTATION' metadata in the <A 
               HREF="https://github.com/ansible/ansible-modules-core">core</A> and <A                    
               HREF="https://github.com/ansible/ansible-modules-extras">extras</A> modules source        
               repositories. {% endif %}                                                                 
            ‚ãÆ‚îÜ----------------------------------------
           23‚îÜ Ansible docs are generated from <a href="http://github.com/ansible/ansible">GitHub        
               sources</A> using <A HREF="http://sphinx-doc.org/">Sphinx</A> using a theme provided by <a
               href="http://readthedocs.org">Read the Docs</a>. {% if pagename.endswith("_module") %}.   
               Module documentation is not edited directly, but is generated from the source code for the
               modules.  To submit an update to module docs, edit the 'DOCUMENTATION' metadata in the <A 
               HREF="https://github.com/ansible/ansible-modules-core">core</A> and <A                    
               HREF="https://github.com/ansible/ansible-modules-extras">extras</A> modules source        
               repositories. {% endif %}                                                                 
                                                                                  
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/layout.html[0m
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           34‚îÜ <link href='https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.0.3/css/font-
               awesome.min.css' rel='stylesheet' type='text/css'>                             
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           41‚îÜ URL_ROOT:'{{ url_root }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           41‚îÜ URL_ROOT:'{{ url_root }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           42‚îÜ VERSION:'{{ release|e }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           42‚îÜ VERSION:'{{ release|e }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           44‚îÜ FILE_SUFFIX:'{{ '' if no_search_suffix else file_suffix }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           44‚îÜ FILE_SUFFIX:'{{ '' if no_search_suffix else file_suffix }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           45‚îÜ HAS_SOURCE:  {{ has_source|lower }}
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           45‚îÜ HAS_SOURCE:  {{ has_source|lower }}
            ‚ãÆ‚îÜ----------------------------------------
           49‚îÜ <script type="text/javascript" src="{{ pathto(scriptfile, 1) }}"></script>
   
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           96‚îÜ <script src="//cdnjs.cloudflare.com/ajax/libs/modernizr/2.6.2/modernizr.min.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
          124‚îÜ <script type="text/javascript" src="//www.googleadservices.com/pagead/conversion.js">
          125‚îÜ </script>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          149‚îÜ <center><a href="{{ pathto(master_doc) }}"><img                                          
               src="http://cdn2.hubspot.net/hub/330046/file-445792629-png/ANSI_logotype_web_white.png"  
               style="border-radius:0;background-color:#64C5C7;width:214px;height:26px;margin:'auto auto
               auto auto'"></a></center>                                                                
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          149‚îÜ <center><a href="{{ pathto(master_doc) }}"><img                                          
               src="http://cdn2.hubspot.net/hub/330046/file-445792629-png/ANSI_logotype_web_white.png"  
               style="border-radius:0;background-color:#64C5C7;width:214px;height:26px;margin:'auto auto
               auto auto'"></a></center>                                                                
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          149‚îÜ <center><a href="{{ pathto(master_doc) }}"><img                                          
               src="http://cdn2.hubspot.net/hub/330046/file-445792629-png/ANSI_logotype_web_white.png"  
               style="border-radius:0;background-color:#64C5C7;width:214px;height:26px;margin:'auto auto
               auto auto'"></a></center>                                                                
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          153‚îÜ <!-- <a href="{{ pathto(master_doc) }}" class="icon icon-home"> {{ project }}</a> -->
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          153‚îÜ <!-- <a href="{{ pathto(master_doc) }}" class="icon icon-home"> {{ project }}</a> -->
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          153‚îÜ <!-- <a href="{{ pathto(master_doc) }}" class="icon icon-home"> {{ project }}</a> -->
   
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
          173‚îÜ <script charset="utf-8" src="https://js.hscta.net/cta/current.js"></script>
                                                                                      
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/layout_old.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           33‚îÜ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}"
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           33‚îÜ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}"
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           33‚îÜ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags|e }}"
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           38‚îÜ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           38‚îÜ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           38‚îÜ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           41‚îÜ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           41‚îÜ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           41‚îÜ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           54‚îÜ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           54‚îÜ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           54‚îÜ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           90‚îÜ URL_ROOT:    '{{ url_root }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           90‚îÜ URL_ROOT:    '{{ url_root }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           91‚îÜ VERSION:     '{{ release|e }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           91‚îÜ VERSION:     '{{ release|e }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           93‚îÜ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           93‚îÜ FILE_SUFFIX: '{{ '' if no_search_suffix else file_suffix }}',
   
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           94‚îÜ HAS_SOURCE:  {{ has_source|lower }}
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           94‚îÜ HAS_SOURCE:  {{ has_source|lower }}
            ‚ãÆ‚îÜ----------------------------------------
           98‚îÜ <script type="text/javascript" src="{{ pathto(scriptfile, 1) }}"></script>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
          189‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          189‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          189‚îÜ {% trans path=pathto('copyright'), copyright=copyright|e %}&copy; <a href="{{ path
               }}">Copyright</a> {{ copyright }}.{% endtrans %}                                  
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          198‚îÜ {% trans sphinx_version=sphinx_version|e %}Created using <a href="http://sphinx-
               doc.org/">Sphinx</a> {{ sphinx_version }}.{% endtrans %}                        
                                                                                  
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/search.html[0m
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           15‚îÜ jQuery(function() { Search.loadIndex("{{ pathto('searchindex.js', 1) }}"); });
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           15‚îÜ jQuery(function() { Search.loadIndex("{{ pathto('searchindex.js', 1) }}"); });
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           43‚îÜ <a href="{{ pathto(item.href) }}">{{ caption }}</a>
                                                                                     
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/searchbox.html[0m
    ‚ùØ‚ù± [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you‚Äôre telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           26‚îÜ <script type="text/javascript" src="http://www.google.com/cse/brand?form=search-form-
               id&inputbox=search-box-id"></script>                                                 
                                                                                    
  [36m[22m[24m  docs/docsite/rst/dev_guide/style_guide/_themes/srtd/versions.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           13‚îÜ <dd><a href="{{ url }}">{{ slug }}</a></dd>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19‚îÜ <dd><a href="{{ url }}">{{ type }}</a></dd>
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           32‚îÜ Free document hosting provided by <a href="http://www.readthedocs.org">Read the Docs</a>.
                                                 
  [36m[22m[24m  docs/docsite/rst/guide_rax.rst[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           55‚îÜ api_key = d41d8cd98f00b204e9800998ecf8427e
                                      
  [36m[22m[24m  hacking/test-module[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.Popen(invoke, shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
          210‚îÜ cmd = subprocess.Popen(invoke, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            ‚ãÆ‚îÜ----------------------------------------
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.call("%s %s %s" % (debugger, modfile, argspath), shell=False)
          238‚îÜ subprocess.call("%s %s %s" % (debugger, modfile, argspath), shell=True)
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.call("%s %s" % (debugger, modfile), shell=False)
          240‚îÜ subprocess.call("%s %s" % (debugger, modfile), shell=True)
                                              
  [36m[22m[24m  lib/ansible/cli/__init__.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.Popen(cmd, shell=False, stdin=subprocess.PIPE, stdout=sys.stdout)
          607‚îÜ cmd = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE, stdout=sys.stdout)
                                            
  [36m[22m[24m  lib/ansible/cli/galaxy.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          234‚îÜ template_env = Environment(loader=FileSystemLoader(role_skeleton))
                                                              
  [36m[22m[24m  lib/ansible/module_utils/azure_rm_common.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          392‚îÜ mod = importlib.import_module(module_name)
                                                          
  [36m[22m[24m  lib/ansible/module_utils/cloudengine.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           89‚îÜ responses = self.execute(
           90‚îÜ     'display configuration commit list '
           91‚îÜ     'label | include %s' % checkpoint)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           89‚îÜ responses = self.execute(
           90‚îÜ     'display configuration commit list '
           91‚îÜ     'label | include %s' % checkpoint)
                                                   
  [36m[22m[24m  lib/ansible/module_utils/cnos.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.ftplib.ftplib[0m
          FTP does not encrypt communications by default. This can lead to sensitive data being exposed.
          Ensure use of FTP here does not expose sensitive data.                                        
          Details: https://sg.run/7oyZ                                                                  
                                                                                                        
          3102‚îÜ ftp = ftplib.FTP(server)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls[0m
          The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
          Details: https://sg.run/AvPp                                                              
                                                                                                    
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mftplib.FTP_TLS(server, context=ssl.create_default_context())
          3102‚îÜ ftp = ftplib.FTP(server)
                                                       
  [36m[22m[24m  lib/ansible/module_utils/f5_utils.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.unverified-ssl-context.unverified-ssl-context[0m
          Unverified SSL context detected. This will permit insecure connections without verifying SSL
          certificates. Use 'ssl.create_default_context' instead.                                     
          Details: https://sg.run/N4lp                                                                
                                                                                                      
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mssl._create_default_https_context = ssl.create_default_context
          118‚îÜ ssl._create_default_https_context = ssl._create_unverified_context
                                                  
  [36m[22m[24m  lib/ansible/module_utils/lxd.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
           88‚îÜ self.connection = HTTPSConnection(parts.get('netloc'), context=ctx)
                                                     
  [36m[22m[24m  lib/ansible/module_utils/netapp.py[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.unvalidated-password.unvalidated-password[0m
          The password on 'server' is being set without validating the password. Call                         
          django.contrib.auth.password_validation.validate_password() with validation functions before setting
          the password. See https://docs.djangoproject.com/en/3.0/topics/auth/passwords/ for more information.
          Details: https://sg.run/OPBL                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mif django.contrib.auth.password_validation.validate_password(password,
              user=server):server.set_password(password)                                       
          105‚îÜ server.set_password(password)
                                                      
  [36m[22m[24m  lib/ansible/module_utils/service.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          180‚îÜ return_data = pickle.dumps([p.returncode, to_text(output[p.stdout]),
               to_text(output[p.stderr])])                                         
            ‚ãÆ‚îÜ----------------------------------------
          205‚îÜ return pickle.loads(to_text(return_data, errors=errors))
                                                           
  [36m[22m[24m  lib/ansible/module_utils/six/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          116‚îÜ exec(source)
                                                   
  [36m[22m[24m  lib/ansible/module_utils/urls.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          174‚îÜ PROTOCOL = ssl.PROTOCOL_TLSv1
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          404‚îÜ self.sock = ssl.wrap_socket(sock, keyfile=self.key_file, certfile=self.cert_file,
               ssl_version=PROTOCOL)                                                            
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          438‚îÜ return httplib.HTTPSConnection(host, **kwargs)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          756‚îÜ ssl_s = ssl.wrap_socket(s, ca_certs=tmp_ca_cert_path, cert_reqs=ssl.CERT_REQUIRED,
               ssl_version=PROTOCOL)                                                             
            ‚ãÆ‚îÜ----------------------------------------
          767‚îÜ ssl_s = ssl.wrap_socket(s, ca_certs=tmp_ca_cert_path, cert_reqs=ssl.CERT_REQUIRED,
               ssl_version=PROTOCOL)                                                             
                                                                 
  [36m[22m[24m  lib/ansible/modules/cloud/ovirt/ovirt_disks.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          283‚îÜ proxy_connection = HTTPSConnection(
          284‚îÜ     proxy_url.hostname,
          285‚îÜ     proxy_url.port,
          286‚îÜ     context=context,
          287‚îÜ )
                                                               
  [36m[22m[24m  lib/ansible/modules/cloud/vmware/vca_vapp.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          218‚îÜ module.get_vapp(vapp_name).execute(cmd, 'post', targetVM=vm)
                                                                    
  [36m[22m[24m  lib/ansible/modules/cloud/vmware/vsphere_guest.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.unverified-ssl-context.unverified-ssl-context[0m
          Unverified SSL context detected. This will permit insecure connections without verifying SSL
          certificates. Use 'ssl.create_default_context' instead.                                     
          Details: https://sg.run/N4lp                                                                
                                                                                                      
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mssl._create_default_https_context = ssl.create_default_context
          1796‚îÜ ssl._create_default_https_context = ssl._create_unverified_context
                                                                         
  [36m[22m[24m  lib/ansible/modules/cloud/webfaction/webfaction_app.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          114‚îÜ import xmlrpclib
                                                                        
  [36m[22m[24m  lib/ansible/modules/cloud/webfaction/webfaction_db.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          107‚îÜ import xmlrpclib
                                                                            
  [36m[22m[24m  lib/ansible/modules/cloud/webfaction/webfaction_domain.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           99‚îÜ import xmlrpclib
                                                                             
  [36m[22m[24m  lib/ansible/modules/cloud/webfaction/webfaction_mailbox.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           85‚îÜ import xmlrpclib
                                                                          
  [36m[22m[24m  lib/ansible/modules/cloud/webfaction/webfaction_site.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          114‚îÜ import xmlrpclib
                                                                 
  [36m[22m[24m  lib/ansible/modules/database/mssql/mssql_db.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          125‚îÜ cursor.execute("CREATE DATABASE [%s]" % db)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          125‚îÜ cursor.execute("CREATE DATABASE [%s]" % db)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          131‚îÜ cursor.execute("ALTER DATABASE [%s] SET single_user WITH ROLLBACK IMMEDIATE" % db)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          131‚îÜ cursor.execute("ALTER DATABASE [%s] SET single_user WITH ROLLBACK IMMEDIATE" % db)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          134‚îÜ cursor.execute("DROP DATABASE [%s]" % db)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          134‚îÜ cursor.execute("DROP DATABASE [%s]" % db)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          146‚îÜ cursor.execute(sqlQuery)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          146‚îÜ cursor.execute(sqlQuery)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          150‚îÜ cursor.execute(sqlQuery)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          150‚îÜ cursor.execute(sqlQuery)
                                                                 
  [36m[22m[24m  lib/ansible/modules/database/mysql/mysql_db.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          139‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          139‚îÜ cursor.execute(query)
                                                                          
  [36m[22m[24m  lib/ansible/modules/database/mysql/mysql_replication.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          199‚îÜ cursor.execute(query, chm_params)
                                                                        
  [36m[22m[24m  lib/ansible/modules/database/mysql/mysql_variables.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          118‚îÜ cursor.execute(query + "%s", (value,))
                                                                           
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_db.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          119‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          119‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          146‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          146‚îÜ cursor.execute(query)
                                                                            
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_ext.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          109‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          109‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          117‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          117‚îÜ cursor.execute(query)
                                                                             
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_lang.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          165‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          165‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          171‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          171‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          194‚îÜ cursor.execute("DROP LANGUAGE \"%s\" CASCADE" % lang)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          194‚îÜ cursor.execute("DROP LANGUAGE \"%s\" CASCADE" % lang)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          196‚îÜ cursor.execute("DROP LANGUAGE \"%s\"" % lang)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          196‚îÜ cursor.execute("DROP LANGUAGE \"%s\"" % lang)
                                                                              
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_privs.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          536‚îÜ self.cursor.execute(query % (set_what, for_whom))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          536‚îÜ self.cursor.execute(query % (set_what, for_whom))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          544‚îÜ self.cursor.execute(query % (set_what, for_whom))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          544‚îÜ self.cursor.execute(query % (set_what, for_whom))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          547‚îÜ self.cursor.execute(query % (set_what, for_whom))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          547‚îÜ self.cursor.execute(query % (set_what, for_whom))
                                                                               
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_schema.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          131‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          131‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          151‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          151‚îÜ cursor.execute(query)
                                                                             
  [36m[22m[24m  lib/ansible/modules/database/postgresql/postgresql_user.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          417‚îÜ cursor.execute("DROP USER %s" % pg_quote_identifier(user, 'role'))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          417‚îÜ cursor.execute("DROP USER %s" % pg_quote_identifier(user, 'role'))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          457‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          457‚îÜ cursor.execute(query)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          464‚îÜ cursor.execute(query)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          464‚îÜ cursor.execute(query)
                                                                                  
  [36m[22m[24m  lib/ansible/modules/database/proxysql/proxysql_manage_config.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          182‚îÜ cursor.execute(query_string)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          182‚îÜ cursor.execute(query_string)
                                                                                
  [36m[22m[24m  lib/ansible/modules/database/vertica/vertica_configuration.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          131‚îÜ cursor.execute("select set_config_parameter('{0}', '{1}')".format(parameter_name,
               current_value))                                                                  
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          131‚îÜ cursor.execute("select set_config_parameter('{0}', '{1}')".format(parameter_name,
               current_value))                                                                  
                                                                       
  [36m[22m[24m  lib/ansible/modules/database/vertica/vertica_role.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          136‚îÜ cursor.execute("revoke {0} from {1}".format(assigned_role, role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          136‚îÜ cursor.execute("revoke {0} from {1}".format(assigned_role, role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          138‚îÜ cursor.execute("grant {0} to {1}".format(assigned_role, role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          138‚îÜ cursor.execute("grant {0} to {1}".format(assigned_role, role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          151‚îÜ cursor.execute("create role {0}".format(role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          151‚îÜ cursor.execute("create role {0}".format(role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          170‚îÜ cursor.execute("drop role {0} cascade".format(role_facts[role_key]['name']))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          170‚îÜ cursor.execute("drop role {0} cascade".format(role_facts[role_key]['name']))
                                                                         
  [36m[22m[24m  lib/ansible/modules/database/vertica/vertica_schema.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          181‚îÜ cursor.execute("drop role {0} cascade".format(role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          181‚îÜ cursor.execute("drop role {0} cascade".format(role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          183‚îÜ cursor.execute("revoke create on schema {0} from {1}".format(schema, role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          183‚îÜ cursor.execute("revoke create on schema {0} from {1}".format(schema, role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          185‚îÜ cursor.execute("create role {0}".format(role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          185‚îÜ cursor.execute("create role {0}".format(role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          186‚îÜ cursor.execute("grant usage on schema {0} to {1}".format(schema, role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          186‚îÜ cursor.execute("grant usage on schema {0} to {1}".format(schema, role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          188‚îÜ cursor.execute("grant create on schema {0} to {1}".format(schema, role))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          188‚îÜ cursor.execute("grant create on schema {0} to {1}".format(schema, role))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          235‚îÜ cursor.execute("drop schema {0} restrict".format(schema_facts[schema_key]['name']))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          235‚îÜ cursor.execute("drop schema {0} restrict".format(schema_facts[schema_key]['name']))
                                                                       
  [36m[22m[24m  lib/ansible/modules/database/vertica/vertica_user.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          188‚îÜ cursor.execute("revoke {0} from {1}".format(','.join(del_roles), user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          188‚îÜ cursor.execute("revoke {0} from {1}".format(','.join(del_roles), user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          191‚îÜ cursor.execute("grant {0} to {1}".format(','.join(new_roles), user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          191‚îÜ cursor.execute("grant {0} to {1}".format(','.join(new_roles), user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          193‚îÜ cursor.execute("alter user {0} default role {1}".format(user, ','.join(required)))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          193‚îÜ cursor.execute("alter user {0} default role {1}".format(user, ','.join(required)))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          236‚îÜ cursor.execute("grant usage on resource pool {0} to {1}".format(
          237‚îÜ     resource_pool, user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          236‚îÜ cursor.execute("grant usage on resource pool {0} to {1}".format(
          237‚îÜ     resource_pool, user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          270‚îÜ cursor.execute("revoke usage on resource pool {0} from {1}".format(
          271‚îÜ     user_facts[user_key]['resource_pool'], user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          270‚îÜ cursor.execute("revoke usage on resource pool {0} from {1}".format(
          271‚îÜ     user_facts[user_key]['resource_pool'], user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          273‚îÜ cursor.execute("grant usage on resource pool {0} to {1}".format(
          274‚îÜ     resource_pool, user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          273‚îÜ cursor.execute("grant usage on resource pool {0} to {1}".format(
          274‚îÜ     resource_pool, user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          293‚îÜ cursor.execute("drop user {0}".format(user_facts[user_key]['name']))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          293‚îÜ cursor.execute("drop user {0}".format(user_facts[user_key]['name']))
                                                                    
  [36m[22m[24m  lib/ansible/modules/messaging/rabbitmq_binding.py[0m
     ‚ù± [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          159‚îÜ r = requests.get( url, auth=(module.params['login_user'],module.params['login_password']))
            ‚ãÆ‚îÜ----------------------------------------
          200‚îÜ url,
            ‚ãÆ‚îÜ----------------------------------------
          209‚îÜ r = requests.delete( url, auth =                              
               (module.params['login_user'],module.params['login_password']))
                                                                     
  [36m[22m[24m  lib/ansible/modules/messaging/rabbitmq_exchange.py[0m
     ‚ù± [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          149‚îÜ r = requests.get( url, auth=(module.params['login_user'],module.params['login_password']))
            ‚ãÆ‚îÜ----------------------------------------
          193‚îÜ url,
            ‚ãÆ‚îÜ----------------------------------------
          205‚îÜ r = requests.delete( url, auth =                              
               (module.params['login_user'],module.params['login_password']))
                                                                  
  [36m[22m[24m  lib/ansible/modules/messaging/rabbitmq_queue.py[0m
     ‚ù± [1mpython.lang.security.audit.insecure-transport.requests.request-with-http.request-with-http[0m
          Detected a request using 'http://'. This request will be unencrypted, and attackers could listen
          into traffic on the network and be able to obtain sensitive information. Use 'https://' instead.
          Details: https://sg.run/W8J4                                                                    
                                                                                                          
          167‚îÜ r = requests.get( url, auth=(module.params['login_user'],module.params['login_password']))
            ‚ãÆ‚îÜ----------------------------------------
          243‚îÜ url,
            ‚ãÆ‚îÜ----------------------------------------
          253‚îÜ r = requests.delete( url, auth =                              
               (module.params['login_user'],module.params['login_password']))
                                                                  
  [36m[22m[24m  lib/ansible/modules/monitoring/datadog_event.py[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
          100‚îÜ api_key: 9775a026f1ca7d1c6c5af9d94d9595a4
            ‚ãÆ‚îÜ----------------------------------------
          106‚îÜ api_key: 9775a026f1ca7d1c6c5af9d94d9595a4
                                                                    
  [36m[22m[24m  lib/ansible/modules/monitoring/datadog_monitor.py[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
          140‚îÜ api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
            ‚ãÆ‚îÜ----------------------------------------
          147‚îÜ api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
            ‚ãÆ‚îÜ----------------------------------------
          155‚îÜ api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
            ‚ãÆ‚îÜ----------------------------------------
          162‚îÜ api_key: "9775a026f1ca7d1c6c5af9d94d9595a4"
                                                                 
  [36m[22m[24m  lib/ansible/modules/monitoring/logicmonitor.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `484` are widely permissive and grant access to more people than may be necessary.
          A good default is `0o644` which gives read and write access to yourself and read access to everyone 
          else.                                                                                               
          Details: https://sg.run/AXY4                                                                        
                                                                                                              
          960‚îÜ os.chmod(installer, 484)  # decimal for 0o744
                                                              
  [36m[22m[24m  lib/ansible/modules/network/eos/eos_eapi.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          311‚îÜ validator = globals().get('validate_%s' % key)
                                                              
  [36m[22m[24m  lib/ansible/modules/network/eos/eos_user.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          235‚îÜ validator = globals().get('validate_%s' % key)
                                                                          
  [36m[22m[24m  lib/ansible/modules/network/f5/bigip_ssl_certificate.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256()
          230‚îÜ k = hashlib.sha1()
                                                             
  [36m[22m[24m  lib/ansible/modules/network/ios/ios_vrf.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          249‚îÜ validator = globals().get('validate_%s' % key)
                                                                     
  [36m[22m[24m  lib/ansible/modules/network/junos/junos_netconf.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          141‚îÜ validator = globals().get('validate_%s' % key)
                                                                  
  [36m[22m[24m  lib/ansible/modules/network/junos/junos_user.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          171‚îÜ validator = globals().get('validate_%s' % key)
            ‚ãÆ‚îÜ----------------------------------------
          210‚îÜ validator = globals().get('validate_%s' % key)
                                                                  
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_bgp_af.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          372‚îÜ func = globals().get(name)
                                                                        
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_bgp_neighbor.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          298‚îÜ func = globals().get(name)
                                                                           
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_bgp_neighbor_af.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          381‚îÜ func = globals().get(name)
                                                                    
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_evpn_vni.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          149‚îÜ func = globals().get(name)
                                                                                  
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_gir_profile_management.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          166‚îÜ func = globals().get(name)
                                                                
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_igmp.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          147‚îÜ func = globals().get(name)
                                                                          
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_interface_ospf.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          199‚îÜ func = globals().get(name)
                                                                 
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_nxapi.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          252‚îÜ validator = globals().get('validate_%s' % key)
                                                                
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_ospf.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           99‚îÜ func = globals().get(name)
                                                                    
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_ospf_vrf.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          209‚îÜ func = globals().get(name)
                                                                          
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_overlay_global.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          125‚îÜ func = globals().get(name)
                                                               
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_pim.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
           94‚îÜ func = globals().get(name)
                                                                          
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_pim_rp_address.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          123‚îÜ func = globals().get(name)
                                                                       
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_portchannel.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          146‚îÜ func = globals().get(name)
                                                                    
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_snapshot.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          354‚îÜ func = globals().get(name)
                                                                        
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_static_route.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          123‚îÜ func = globals().get(name)
                                                                
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_user.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          277‚îÜ validator = globals().get('validate_%s' % key)
                                                                  
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_vrf_af.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          123‚îÜ func = globals().get(name)
                                                                      
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_vxlan_vtep.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          155‚îÜ func = globals().get(name)
                                                                          
  [36m[22m[24m  lib/ansible/modules/network/nxos/nxos_vxlan_vtep_vni.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          167‚îÜ func = globals().get(name)
                                                                    
  [36m[22m[24m  lib/ansible/modules/network/panos/panos_import.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mrequests.post('https://'+ip_address+'/api/',verify=True,params=params,headers={'Content-Type':
              mef.content_type},data=mef)                                                                              
          120‚îÜ r = requests.post(
          121‚îÜ     'https://'+ip_address+'/api/',
          122‚îÜ     verify=False,
          123‚îÜ     params=params,
          124‚îÜ     headers={'Content-Type': mef.content_type},
          125‚îÜ     data=mef
          126‚îÜ )
                                                                    
  [36m[22m[24m  lib/ansible/modules/network/sros/sros_rollback.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          119‚îÜ func = globals().get(name)
                                                          
  [36m[22m[24m  lib/ansible/modules/notification/irc.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          204‚îÜ irc = ssl.wrap_socket(irc)
                                                                 
  [36m[22m[24m  lib/ansible/modules/notification/pushbullet.py[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-api-key.detected-generic-api-key[0m
          Generic API Key detected    
          Details: https://sg.run/qxj8
                                      
           75‚îÜ api_key: "ABC123abc123ABC123abc123ABC123ab"
            ‚ãÆ‚îÜ----------------------------------------
           81‚îÜ api_key: ABC123abc123ABC123abc123ABC123ab
            ‚ãÆ‚îÜ----------------------------------------
           89‚îÜ api_key: ABC123abc123ABC123abc123ABC123ab
            ‚ãÆ‚îÜ----------------------------------------
           95‚îÜ api_key: ABC123abc123ABC123abc123ABC123ab
                                                                  
  [36m[22m[24m  lib/ansible/modules/packaging/os/openbsd_pkg.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          454‚îÜ cursor = conn.execute(query, (name,))
            ‚ãÆ‚îÜ----------------------------------------
          464‚îÜ cursor = conn.execute(query, (looking_for,))
            ‚ãÆ‚îÜ----------------------------------------
          468‚îÜ cursor = conn.execute(query, (looking_for, "%s-%%" % looking_for,))
            ‚ãÆ‚îÜ----------------------------------------
          471‚îÜ cursor = conn.execute(query, (looking_for,))
                                                                  
  [36m[22m[24m  lib/ansible/modules/packaging/os/rhn_channel.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           76‚îÜ import xmlrpclib
                                                                   
  [36m[22m[24m  lib/ansible/modules/packaging/os/rhn_register.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          138‚îÜ import xmlrpclib
                                                           
  [36m[22m[24m  lib/ansible/modules/system/gconftool2.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mPopen([cmd], stdout=PIPE, stderr=PIPE, shell=False)
          161‚îÜ process = Popen([cmd], stdout=PIPE, stderr=PIPE, shell=True)
                                                                          
  [36m[22m[24m  lib/ansible/modules/web_infrastructure/django_manage.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          302‚îÜ filt = globals().get(command + "_filter_output", None)
                                                                           
  [36m[22m[24m  lib/ansible/modules/web_infrastructure/jenkins_plugin.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(open(plugin_file, 'rb').read())
          516‚îÜ sha1_old = hashlib.sha1(open(plugin_file, 'rb').read())
                                                      
  [36m[22m[24m  lib/ansible/plugins/cache/pickle.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           46‚îÜ return pickle.load(f)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           46‚îÜ return pickle.load(f)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           51‚îÜ pickle.dump(value, f, protocol=2)
   
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           51‚îÜ pickle.dump(value, f, protocol=2)
                                                             
  [36m[22m[24m  lib/ansible/plugins/callback/logentries.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          172‚îÜ sock = ssl.wrap_socket(
          173‚îÜ     sock=sock,
          174‚îÜ     keyfile=None,
          175‚îÜ     certfile=None,
          176‚îÜ     server_side=False,
          177‚îÜ     cert_reqs=ssl.CERT_REQUIRED,
          178‚îÜ     ssl_version=getattr(
          179‚îÜ         ssl, 'PROTOCOL_TLSv1_2', ssl.PROTOCOL_TLSv1),
          180‚îÜ     ca_certs=certifi.where(),
          181‚îÜ     do_handshake_on_connect=True,
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          179‚îÜ ssl, 'PROTOCOL_TLSv1_2', ssl.PROTOCOL_TLSv1),
                                                               
  [36m[22m[24m  lib/ansible/plugins/connection/persistent.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           56‚îÜ cPickle.dump(self._play_context.serialize(), src)
                                                        
  [36m[22m[24m  lib/ansible/plugins/connection/ssh.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256()
          226‚îÜ m = hashlib.sha1()
                                                       
  [36m[22m[24m  lib/ansible/plugins/filter/ipaddr.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          439‚îÜ extras.append(locals()[arg])
            ‚ãÆ‚îÜ----------------------------------------
          661‚îÜ extras.append(locals()[arg])
                                                      
  [36m[22m[24m  lib/ansible/plugins/lookup/lines.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.Popen(term, cwd=self._loader.get_basedir(), shell=False, stdin=subprocess.PIPE,
              stdout=subprocess.PIPE)                                                                              
           32‚îÜ p = subprocess.Popen(term, cwd=self._loader.get_basedir(), shell=True,
               stdin=subprocess.PIPE, stdout=subprocess.PIPE)                        
                                                     
  [36m[22m[24m  lib/ansible/plugins/lookup/pipe.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.Popen(term, cwd=self._loader.get_basedir(), shell=False, stdin=subprocess.PIPE,
              stdout=subprocess.PIPE)                                                                              
           42‚îÜ p = subprocess.Popen(term, cwd=self._loader.get_basedir(), shell=True,
               stdin=subprocess.PIPE, stdout=subprocess.PIPE)                        
                                                           
  [36m[22m[24m  lib/ansible/plugins/lookup/shelvefile.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-shelve[0m
          Avoid using `shelve`, which uses `pickle`, which is known to lead to code execution vulnerabilities.
          When unpickling, the serialized data could be manipulated to run arbitrary code. Instead, consider  
          serializing the relevant data as JSON or a similar text-based serialization format.                 
          Details: https://sg.run/dKkZ                                                                        
                                                                                                              
           33‚îÜ d = shelve.open(to_bytes(shelve_filename))
                                                        
  [36m[22m[24m  lib/ansible/plugins/strategy/debug.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          147‚îÜ return eval(args, globals(), self.scope)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          167‚îÜ exec(code, globals(), self.scope)
                                                    
  [36m[22m[24m  lib/ansible/template/safe_eval.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          131‚îÜ result = eval(compiled, JSON_TYPES, dict(locals))
