                   
                   
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 7 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                       
  [36m[22m[24m  radicale/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          144‚îÜ self.socket = ssl.wrap_socket(
          145‚îÜ     self.socket, self.key, self.certificate, server_side=True,
          146‚îÜ     ssl_version=self.protocol, ciphers=self.ciphers)
                                   
  [36m[22m[24m  radicale/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           72‚îÜ class_ = import_module(auth_type).Auth
   
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256()
          159‚îÜ sha1 = hashlib.sha1()
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256()
          175‚îÜ sha1 = hashlib.sha1()
                                     
  [36m[22m[24m  radicale/rights.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           58‚îÜ module = import_module(rights_type)
                                      
  [36m[22m[24m  radicale/storage.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           94‚îÜ collection_class = import_module(storage_type).Collection
   
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_call' with 'shell=True'. This is dangerous because this call will
          spawn the command using a shell process. Doing so propagates current shell settings and variables,  
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.    
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.check_call(hook % {"user": shlex.quote(user or "Anonymous")},shell=False,
              cwd=folder)                                                                                    
          804‚îÜ subprocess.check_call(
          805‚îÜ     hook % {"user": shlex.quote(user or "Anonymous")},
          806‚îÜ     shell=True, cwd=folder)
