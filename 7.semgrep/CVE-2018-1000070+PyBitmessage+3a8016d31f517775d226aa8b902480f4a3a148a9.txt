                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 24 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                               
  [36m[22m[24m  checkdeps.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          139‚îÜ import_module(module)
                                 
  [36m[22m[24m  dev/ssltest.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
           24‚îÜ return ssl.PROTOCOL_TLSv1
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
           46‚îÜ context.set_ciphers(sslProtocolCiphers())
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
           53‚îÜ sslSock = ssl.wrap_socket(sock, keyfile = os.path.join('src', 'sslkeys', 'key.pem'),
               certfile = os.path.join('src', 'sslkeys', 'cert.pem'), server_side = server,        
               ssl_version=sslProtocolVersion(), do_handshake_on_connect=False, ciphers='AECDH-    
               AES256-SHA')                                                                        
                                                          
  [36m[22m[24m  packages/collectd/pybitmessagestatus.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            5‚îÜ import xmlrpclib
                             
  [36m[22m[24m  src/api.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           15‚îÜ from SimpleXMLRPCServer import SimpleXMLRPCRequestHandler, SimpleXMLRPCServer
                                    
  [36m[22m[24m  src/api_client.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            4‚îÜ import xmlrpclib
                                       
  [36m[22m[24m  src/bitmessagecli.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            9‚îÜ import xmlrpclib
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          379‚îÜ address_information = eval(address_information)
            ‚ãÆ‚îÜ----------------------------------------
          1350‚îÜ address_information = eval(address_information)
                                                 
  [36m[22m[24m  src/class_receiveDataThread.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
          279‚îÜ context.set_ciphers(protocol.sslProtocolCiphers)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
          287‚îÜ self.sslSock = ssl.wrap_socket(self.sock, keyfile = os.path.join(paths.codePath(),      
               'sslkeys', 'key.pem'), certfile = os.path.join(paths.codePath(), 'sslkeys', 'cert.pem'),
               server_side = not self.initiatedConnection, ssl_version=protocol.sslProtocolVersion,    
               do_handshake_on_connect=False, ciphers=protocol.sslProtocolCiphers)                     
                                           
  [36m[22m[24m  src/defaultKnownNodes.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           43‚îÜ pickle.dump(allKnownNodes, output)
            ‚ãÆ‚îÜ----------------------------------------
           49‚îÜ knownNodes = pickle.load(pickleFile)
                                          
  [36m[22m[24m  src/helper_bootstrap.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           27‚îÜ knownnodes.knownNodes = pickle.load(pickleFile)
                                   
  [36m[22m[24m  src/inventory.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           24‚îÜ self._inventoryClass = eval(self._className)
                                    
  [36m[22m[24m  src/knownnodes.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           21‚îÜ pickle.dump(knownNodes, output)
                                               
  [36m[22m[24m  src/messagetypes/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           15‚îÜ classBase = eval(data[""] + "." + data[""].title())
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           42‚îÜ import_module("." + splitted[0], "messagetypes")
                                     
  [36m[22m[24m  src/network/tls.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
           45‚îÜ context.set_ciphers(self.ciphers)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.ssl-wrap-socket-is-deprecated.ssl-wrap-socket-is-deprecated[0m
          'ssl.wrap_socket()' is deprecated. This function creates an insecure socket without server name 
          indication or hostname matching. Instead, create an SSL context using 'ssl.SSLContext()' and use
          that to wrap a socket.                                                                          
          Details: https://sg.run/PJOY                                                                    
                                                                                                          
           53‚îÜ self.sslSocket = ssl.wrap_socket(self.socket,
           54‚îÜ                              server_side=self.server_side,
           55‚îÜ                              ssl_version=protocol.sslProtocolVersion,
           56‚îÜ                              certfile=self.certfile,
           57‚îÜ                              keyfile=self.keyfile,
           58‚îÜ                              ciphers=self.ciphers,
           59‚îÜ                              do_handshake_on_connect=False)
                                  
  [36m[22m[24m  src/protocol.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          587‚îÜ sslProtocolVersion = ssl.PROTOCOL_TLSv1
                                
  [36m[22m[24m  src/shared.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call 
          will spawn the command using a shell process. Doing so propagates current shell settings and      
          variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False'
          instead.                                                                                          
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0msubprocess.check_output('stat -f -c "%%T" %s' %
              (filename),shell=False,stderr=subprocess.STDOUT)          
          186‚îÜ fstype = subprocess.check_output('stat -f -c "%%T" %s' % (filename),
          187‚îÜ                                  shell=True,
          188‚îÜ                                  stderr=subprocess.STDOUT)
                                      
  [36m[22m[24m  src/sslkeys/key.pem[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
            1‚îÜ -----BEGIN PRIVATE KEY-----
            2‚îÜ MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBAKDxeQWkgBixNIF5
