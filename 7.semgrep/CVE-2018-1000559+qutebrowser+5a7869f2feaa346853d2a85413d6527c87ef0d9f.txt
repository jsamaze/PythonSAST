                    
                    
┌──────────────────┐
│ 59 Code Findings │
└──────────────────┘
                                          
  [36m[22m[24m  misc/userscripts/getbib[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           55┆ response = url_request.urlopen(request)
                                                      
  [36m[22m[24m  qutebrowser/browser/greasemonkey.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          117┆ return template.render(
          118┆     scriptName=javascript.string_escape(
          119┆         "/".join([self.namespace or '', self.name])),
          120┆     scriptInfo=self._meta_json(),
          121┆     scriptMeta=javascript.string_escape(self.script_meta),
          122┆     scriptSource=self._code,
          123┆     use_proxy=use_proxy)
                                                    
  [36m[22m[24m  qutebrowser/config/configfiles.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          561┆ exec(code, module.__dict__)
                                                  
  [36m[22m[24m  qutebrowser/html/bookmarks.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           39┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           39┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           39┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           40┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           40┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           40┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           56┆ <td class="name"><a href="{{url}}">{{title | default(url, true)}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           56┆ <td class="name"><a href="{{url}}">{{title | default(url, true)}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           56┆ <td class="name"><a href="{{url}}">{{title | default(url, true)}}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           57┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           57┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           57┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
                                                   
  [36m[22m[24m  qutebrowser/html/dirbrowser.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           51┆ <li><a href="{{ file_url(parent) }}">..</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           51┆ <li><a href="{{ file_url(parent) }}">..</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           51┆ <li><a href="{{ file_url(parent) }}">..</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           57┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           57┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           57┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           63┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           63┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           63┆ <li><a href="{{ file_url(item['absname']) }}">{{item['name']}}</a></li>
                                                
  [36m[22m[24m  qutebrowser/html/history.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           55┆ <script type="text/javascript" src="qute://javascript/history.js"></script>
                                                
  [36m[22m[24m  qutebrowser/html/license.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
            6┆ <link rel="alternate" type="application/rdf+xml"
            7┆       href="http://www.gnu.org/licenses/gpl-3.0.rdf" />
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ &lt;<a href="http://fsf.org/">http://fsf.org/</a>&gt;</p><p>
            ⋮┆----------------------------------------
          685┆ &lt;<a href="http://www.gnu.org/licenses/">http://www.gnu.org/licenses/</a>&gt;.</p>
            ⋮┆----------------------------------------
          692┆ &lt;<a href="http://www.gnu.org/philosophy/why-not-                    
               lgpl.html">http://www.gnu.org/philosophy/why-not-lgpl.html</a>&gt;.</p>
                                             
  [36m[22m[24m  qutebrowser/html/tabs.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           43┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           43┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           43┆ <td class="name"><a href="{{url}}">{{name}}</a></td>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           44┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           44┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           44┆ <td class="url"><a href="{{url}}">{{url}}</a></td>
                                                
  [36m[22m[24m  qutebrowser/html/version.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           37┆ along with this program.  If not, see <a href="http://www.gnu.org/licenses/">
           38┆ http://www.gnu.org/licenses/</a> or open <a href="qute://gpl">qute://gpl</a>.
                                                  
  [36m[22m[24m  qutebrowser/javascript/caret.js[0m
   ❯❯❱ [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          890┆ node.innerHTML = style;
                                                    
  [36m[22m[24m  qutebrowser/javascript/history.js[0m
   ❯❯❱ [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
           66┆ caption.innerHTML = date.toLocaleDateString("en-US", options);
            ⋮┆----------------------------------------
          117┆ link.innerHTML = itemTitle;
            ⋮┆----------------------------------------
          120┆ host.innerHTML = link.hostname;
            ⋮┆----------------------------------------
          126┆ time.innerHTML = itemTime;
                                                      
  [36m[22m[24m  qutebrowser/javascript/pac_utils.js[0m
    ❯❱ [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
           98┆ var newRe = new RegExp('^'+pattern+'$');
                                                
  [36m[22m[24m  qutebrowser/misc/earlyinit.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          219┆ importlib.import_module(name)
                                          
  [36m[22m[24m  qutebrowser/misc/ipc.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          224┆ os.chmod(self._server.fullServerName(), 0o700)
                                               
  [36m[22m[24m  qutebrowser/misc/utilcmds.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          227┆ eval('hunter.trace({})'.format(expr))
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          250┆ exec(s)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          256┆ r = eval(s)
                                                  
  [36m[22m[24m  qutebrowser/utils/javascript.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
           81┆ return template.render(code='\n'.join(sources), name=name)
                                             
  [36m[22m[24m  qutebrowser/utils/jinja.py[0m
    ❯❱ [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          130┆ js_environment = jinja2.Environment(loader=Loader('javascript'))
                                               
  [36m[22m[24m  qutebrowser/utils/version.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          216┆ module = importlib.import_module(modname)
                                                
  [36m[22m[24m  scripts/dev/check_coverage.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xml-parse.use-defused-xml-parse[0m
          The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks
          can leak confidential data and "XML bombs" can cause denial of service. Do not use this library to
          parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.           
          Details: https://sg.run/n3jG                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mdefusedxml.etree.ElementTree.parse(fileobj)
          243┆ tree = ElementTree.parse(fileobj)
                                             
  [36m[22m[24m  scripts/dev/run_profile.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'run' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which 
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.         
          Details: https://sg.run/J92w                                                                       
                                                                                                             
           [32m▶▶┆ Autofix ▶ [0msubprocess.run('gprof2dot -f pstats {} | dot -Tpng | feh -F
              -'.format(shlex.quote(profilefile)), shell=False)                     
           79┆ subprocess.run(
           80┆     'gprof2dot -f pstats {} | dot -Tpng | feh -F -'.format(
           81┆         shlex.quote(profilefile)), shell=True)
                                                 
  [36m[22m[24m  scripts/dev/update_3rdparty.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           46┆ with urllib.request.urlopen(request_url) as fp:
            ⋮┆----------------------------------------
           80┆ (archive_path, _headers) = urllib.request.urlretrieve(url)
            ⋮┆----------------------------------------
          102┆ urllib.request.urlretrieve(url, target_path)
            ⋮┆----------------------------------------
          115┆ urllib.request.urlretrieve(url, target_path)
            ⋮┆----------------------------------------
          126┆ response = urllib.request.urlopen(request)
                                     
  [36m[22m[24m  scripts/dictcli.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          191┆ response = urllib.request.urlopen(url)
                                             
  [36m[22m[24m  scripts/hostblock_blame.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           44┆ raw_file = urllib.request.urlopen(url)
