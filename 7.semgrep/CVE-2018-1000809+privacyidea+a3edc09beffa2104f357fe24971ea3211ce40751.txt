                     
                     
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 189 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                                            
  [36m[22m[24m  authmodules/TYPO3/privacyidea/Classes/PrivacyideaAuth.php[0m
   ‚ùØ‚ùØ‚ù± [1mphp.lang.security.curl-ssl-verifypeer-off.curl-ssl-verifypeer-off[0m
          SSL verification is disabled but should not be (currently CURLOPT_SSL_VERIFYPEER= 0)
          Details: https://sg.run/PJqv                                                        
                                                                                              
           63‚îÜ curl_setopt($curl_instance, CURLOPT_SSL_VERIFYPEER, 0);
                                                                               
  [36m[22m[24m  authmodules/TYPO3/privacyidea/Classes/PrivacyideaService.php[0m
    ‚ùØ‚ù± [1mphp.lang.security.unserialize-use.unserialize-use[0m
          Calling `unserialize()` with user input in the pattern can lead to arbitrary code execution.
          Consider using JSON or structured data approaches (e.g. Google Protocol Buffers).           
          Details: https://sg.run/b24E                                                                
                                                                                                      
           84‚îÜ $this->extConf = unserialize                                   
               ($GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['privacyidea']);
                                            
  [36m[22m[24m  deploy/heroku/private.pem[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
            1‚îÜ -----BEGIN RSA PRIVATE KEY-----
            2‚îÜ MIIEpQIBAAKCAQEArk505GgEBisqO6MAqKpBwIzEnIGbdrLkNUa5wUurbTKvVnzi
                                            
  [36m[22m[24m  deploy/heroku/privkey.pem[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
            1‚îÜ -----BEGIN RSA PRIVATE KEY-----
            2‚îÜ MIIEowIBAAKCAQEAqTKGiYgjawrbsb2cWGSTJtzE0NUvd4HCDAqrxrAk+wL92QPf
                                                           
  [36m[22m[24m  deploy/nginx/sites-available/privacyidea[0m
    ‚ùØ‚ù± [1mgeneric.nginx.security.insecure-ssl-version.insecure-ssl-version[0m
          Detected use of an insecure SSL version. Secure SSL versions are TLSv1.2 and TLS1.3; older versions
          are known to be broken and are susceptible to attacks. Prefer use of TLSv1.2 or later.             
          Details: https://sg.run/gLKy                                                                       
                                                                                                             
           15‚îÜ ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
                                                 
  [36m[22m[24m  deploy/privacyidea/private.pem[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
            1‚îÜ -----BEGIN RSA PRIVATE KEY-----
            2‚îÜ MIIEpAIBAAKCAQEAuCctdK6BYrAMawFDQNG6iT5WiHRM7AqLVZE+8uhyeI2RQ5FK
                                                                    
  [36m[22m[24m  doc/_themes/flask-sphinx-themes/flask/layout.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           19‚îÜ Created using <a href="http://sphinx.pocoo.org/">Sphinx</a>.
                                                                       
  [36m[22m[24m  doc/_themes/flask-sphinx-themes/flask/relations.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            3‚îÜ <li><a href="{{ pathto(master_doc) }}">Documentation overview</a><ul>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            3‚îÜ <li><a href="{{ pathto(master_doc) }}">Documentation overview</a><ul>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            3‚îÜ <li><a href="{{ pathto(master_doc) }}">Documentation overview</a><ul>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5‚îÜ <li><a href="{{ parent.link|e }}">{{ parent.title }}</a><ul>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5‚îÜ <li><a href="{{ parent.link|e }}">{{ parent.title }}</a><ul>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5‚îÜ <li><a href="{{ parent.link|e }}">{{ parent.title }}</a><ul>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            8‚îÜ <li>Previous: <a href="{{ prev.link|e }}" title="{{ _('previous chapter')
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            8‚îÜ <li>Previous: <a href="{{ prev.link|e }}" title="{{ _('previous chapter')
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            8‚îÜ <li>Previous: <a href="{{ prev.link|e }}" title="{{ _('previous chapter')
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           12‚îÜ <li>Next: <a href="{{ next.link|e }}" title="{{ _('next chapter')
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           12‚îÜ <li>Next: <a href="{{ next.link|e }}" title="{{ _('next chapter')
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           12‚îÜ <li>Next: <a href="{{ next.link|e }}" title="{{ _('next chapter')
                                                                          
  [36m[22m[24m  doc/_themes/flask-sphinx-themes/flask_small/layout.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           17‚îÜ <a href="http://github.com/{{ theme_github_fork }}"><img style="position: fixed; top: 0;
               right: 0; border: 0;"                                                                   
           18‚îÜ src="http://s3.amazonaws.com/github/ribbons/forkme_right_darkblue_121621.png" alt="Fork me
               on GitHub" /></a>                                                                         
                            
  [36m[22m[24m  pi-manage[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mcall("mysqldump --defaults-file=%s -h %s %s > %s" % (defaults_file,datahost,database, sqlfile),
              shell=False)                                                                                              
          271‚îÜ call("mysqldump --defaults-file=%s -h %s %s > %s" % (
          272‚îÜ     defaults_file,
          273‚îÜ     datahost,
          274‚îÜ     database, sqlfile), shell=True)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0600` are widely permissive and grant access to more people than may be        
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          288‚îÜ os.chmod(backup_file, 0600)
            ‚ãÆ‚îÜ----------------------------------------
          305‚îÜ os.chmod(filename, 0600)
   
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mcall("mysql --defaults-file=%s -h %s %s < %s" % (defaults_file,datahost,database,sqlfile),
              shell=False)                                                                                         
          374‚îÜ call("mysql --defaults-file=%s -h %s %s < %s" % (defaults_file,
          375‚îÜ                                                   datahost,
          376‚îÜ                                                   database,
          377‚îÜ                                                   sqlfile), shell=True)
   
    ‚ùØ‚ù± [1mpython.sqlalchemy.performance.performance-improvements.len-all-count[0m
          Using QUERY.count() instead of len(QUERY.all()) sends less data to the client since the SQLAlchemy
          method is performed server-side.                                                                  
          Details: https://sg.run/4y8g                                                                      
                                                                                                            
          673‚îÜ r = len(sqlquery.all())
            ‚ãÆ‚îÜ----------------------------------------
          692‚îÜ r = len(sqlquery.all())
                                                   
  [36m[22m[24m  privacyidea/api/lib/prepolicy.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          1051‚îÜ module = importlib.import_module(module_name)
                                            
  [36m[22m[24m  privacyidea/api/policy.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.audit.xss.make-response-with-unknown-content.make-response-with-unknown-content[0m
          Be careful with `flask.make_response()`. If this response is rendered onto a webpage, this could    
          create a cross-site scripting (XSS) vulnerability. `flask.make_response()` will not autoescape HTML.
          If you are rendering HTML, write your HTML in a template file and use `flask.render_template()`     
          which will take care of escaping. If you are returning data from an API, consider using             
          `flask.jsonify()`.                                                                                  
          Details: https://sg.run/3x3p                                                                        
                                                                                                              
          283‚îÜ response = make_response(export_policies(pol))
                                            
  [36m[22m[24m  privacyidea/api/system.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.unescaped-template-extension.unescaped-template-extension[0m
          Flask does not automatically escape Jinja templates unless they have .html, .htm, .xml, or .xhtml
          extensions. This could lead to XSS attacks. Use .html, .htm, .xml, or .xhtml for your template   
          extensions. See https://flask.palletsprojects.com/en/1.1.x/templating/#jinja-setup for more      
          information.                                                                                     
          Details: https://sg.run/x1Rg                                                                     
                                                                                                           
          112‚îÜ return re.sub("\n{3,}", "\n\n", render_template("documentation.rst",
          113‚îÜ                                            context=context))
                                           
  [36m[22m[24m  privacyidea/api/token.py[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-generic-secret.detected-generic-secret[0m
          Generic Secret detected     
          Details: https://sg.run/l2o5
                                      
          179‚îÜ "value": "otpauth://hotp/mylabel?secret=GEZDGNBVGY3TQOJQGEZDGNBVGY3TQOJQ&counter=0"
                                                       
  [36m[22m[24m  privacyidea/lib/applications/base.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           66‚îÜ mod = import_module(module_name)
            ‚ãÆ‚îÜ----------------------------------------
          133‚îÜ mod = import_module(application_module)
            ‚ãÆ‚îÜ----------------------------------------
          162‚îÜ mod = import_module("privacyidea.lib.applications.{0!s}".format(f))
                                            
  [36m[22m[24m  privacyidea/lib/config.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          663‚îÜ module = importlib.import_module(mod_name)
            ‚ãÆ‚îÜ----------------------------------------
          692‚îÜ module = importlib.import_module(mod_name)
            ‚ãÆ‚îÜ----------------------------------------
          720‚îÜ module = importlib.import_module(mod_name)
            ‚ãÆ‚îÜ----------------------------------------
          750‚îÜ module = importlib.import_module(module_name)
                                               
  [36m[22m[24m  privacyidea/lib/importotp.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "The Token with the serial %s has  
          the "                               "productname %s" % (SERIAL, DESCRIPTION) being logged. This may
          lead to secret credentials being exposed. Make sure that the logger is not logging  sensitive      
          information.                                                                                       
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          356‚îÜ log.debug("The Token with the serial %s has the "
          357‚îÜ           "productname %s" % (SERIAL, DESCRIPTION))
                                                   
  [36m[22m[24m  privacyidea/lib/machines/ldap.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          268‚îÜ version=ssl.PROTOCOL_TLSv1,
            ‚ãÆ‚îÜ----------------------------------------
          310‚îÜ version=ssl.PROTOCOL_TLSv1,
                                                              
  [36m[22m[24m  privacyidea/lib/resolvers/LDAPIdResolver.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(s.encode("utf-8"))
          648‚îÜ r = binascii.hexlify(hashlib.sha1(s.encode("utf-8")).digest())
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.weak-ssl-version.weak-ssl-version[0m
          An insecure SSL version was detected. TLS versions 1.0, 1.1, and all SSL versions are considered
          weak encryption and are deprecated. Use 'ssl.PROTOCOL_TLSv1_2' or higher.                       
          Details: https://sg.run/RoZO                                                                    
                                                                                                          
          715‚îÜ self.tls_version = int(config.get("TLS_VERSION") or ssl.PROTOCOL_TLSv1)
            ‚ãÆ‚îÜ----------------------------------------
          875‚îÜ tls_version = int(param.get("TLS_VERSION") or ssl.PROTOCOL_TLSv1)
   
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(password)
          1043‚îÜ sha_hash = hashlib.sha1(password)
                                                             
  [36m[22m[24m  privacyidea/lib/resolvers/SQLIdResolver.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256("\x00".join(id_parts))
          341‚îÜ resolver_id = binascii.hexlify(hashlib.sha1("\x00".join(id_parts)).digest())
                                                      
  [36m[22m[24m  privacyidea/lib/tokens/ocratoken.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(challenge)
          220‚îÜ challenge = binascii.hexlify(hashlib.sha1(challenge).digest())
                                           
  [36m[22m[24m  privacyidea/lib/utils.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(payload)
          307‚îÜ payload_hash = hashlib.sha1(payload).digest()
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(password)
          831‚îÜ password = hashlib.sha1(password).digest()
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(password)
          835‚îÜ hr = hashlib.sha1(password)
            ‚ãÆ‚îÜ----------------------------------------
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(password)
          878‚îÜ hr = hashlib.sha1(password).digest()
                                                                                              
  [36m[22m[24m  privacyidea/static/components/components/views/component.subscriptions.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           53‚îÜ <a href="{{ subscription.for_url }}">{{ subscription.for_url }}</a><br>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           53‚îÜ <a href="{{ subscription.for_url }}">{{ subscription.for_url }}</a><br>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           53‚îÜ <a href="{{ subscription.for_url }}">{{ subscription.for_url }}</a><br>
   
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           66‚îÜ <a href="{{ subscription.by_url }}">{{ subscription.by_url }}</a><br>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           66‚îÜ <a href="{{ subscription.by_url }}">{{ subscription.by_url }}</a><br>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           66‚îÜ <a href="{{ subscription.by_url }}">{{ subscription.by_url }}</a><br>
                                                                                    
  [36m[22m[24m  privacyidea/static/components/config/views/config.token.tiqr.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           71‚îÜ <a href="http://tools.ietf.org/html/rfc6287#page-8" target="OCRA">RFC
           72‚îÜ     6287</a>.
                                                                                       
  [36m[22m[24m  privacyidea/static/components/config/views/config.token.yubikey.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
            9‚îÜ <a href="http://privacyidea.readthedocs.org/en/latest/modules/api/validate.html">
           10‚îÜ     validate API</a> but can also be handled by the
            ‚ãÆ‚îÜ----------------------------------------
           11‚îÜ <a href="http://privacyidea.readthedocs.org/en/latest/modules/lib/tokentypes/yubikey.html#p
               rivacyidea.lib.tokens.yubikeytoken.YubikeyTokenClass.api_endpoint">                        
           12‚îÜ     Yubico Validation Protocol</a>.
                                                                                
  [36m[22m[24m  privacyidea/static/components/dialogs/views/dialog.about.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           26‚îÜ <a href="http://www.gnu.org/licenses/agpl-3.0.en.html"
           27‚îÜ    target="license">
           28‚îÜ     AGPLv3</a>.<br>
            ‚ãÆ‚îÜ----------------------------------------
           42‚îÜ <a href="http://github.com/privacyidea/privacyidea"
           43‚îÜ    target="github">backend
           44‚îÜ     service itself</a>.
                                                                               
  [36m[22m[24m  privacyidea/static/components/token/views/token.details.html[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          138‚îÜ ng-href="{{ certificateBlob }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          138‚îÜ ng-href="{{ certificateBlob }}">
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
          145‚îÜ ng-href="{{ pkcs12Blob }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
          145‚îÜ ng-href="{{ pkcs12Blob }}">
                                                                                            
  [36m[22m[24m  privacyidea/static/components/token/views/token.enrolled.certificate.html[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            6‚îÜ ng-href="{{ certificateBlob }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            6‚îÜ ng-href="{{ certificateBlob }}">
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           15‚îÜ ng-href="{{ pkcs12Blob }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           15‚îÜ ng-href="{{ pkcs12Blob }}">
                                                                                     
  [36m[22m[24m  privacyidea/static/components/token/views/token.enrolled.hotp.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
                                                                                     
  [36m[22m[24m  privacyidea/static/components/token/views/token.enrolled.motp.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           13‚îÜ Click <a href="{{ enrolledToken.motpurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           13‚îÜ Click <a href="{{ enrolledToken.motpurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           13‚îÜ Click <a href="{{ enrolledToken.motpurl.value }}">here</a> or scan
                                                                                     
  [36m[22m[24m  privacyidea/static/components/token/views/token.enrolled.tiqr.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           12‚îÜ Click <a href="{{ enrolledToken.tiqrenroll.value }}">here</a> or
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           12‚îÜ Click <a href="{{ enrolledToken.tiqrenroll.value }}">here</a> or
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           12‚îÜ Click <a href="{{ enrolledToken.tiqrenroll.value }}">here</a> or
                                                                                     
  [36m[22m[24m  privacyidea/static/components/token/views/token.enrolled.totp.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14‚îÜ Click <a href="{{ enrolledToken.googleurl.value }}">here</a> or scan
                                                                       
  [36m[22m[24m  privacyidea/static/contrib/js/angular-file-upload.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `attr` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          334‚îÜ var regexp = attr['accept'] ? new RegExp(globStringToRegex(attr['accept']), 'gi') : null;
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `$parse` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          410‚îÜ var regexp = accept ? new RegExp(globStringToRegex(accept), 'gi') : null;
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `attr` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          410‚îÜ var regexp = accept ? new RegExp(globStringToRegex(accept), 'gi') : null;
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `scope` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          410‚îÜ var regexp = accept ? new RegExp(globStringToRegex(accept), 'gi') : null;
                                                           
  [36m[22m[24m  privacyidea/static/contrib/js/angular.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `source` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          784‚îÜ destination = new RegExp(source.source, source.toString().match(/[^\/]*$/)[0]);
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          2444‚îÜ tmp.innerHTML = wrap[1] + html.replace(XHTML_TAG_REGEXP, "<$1></$2>") + wrap[2];
            ‚ãÆ‚îÜ----------------------------------------
          2916‚îÜ element.innerHTML = value;
            ‚ãÆ‚îÜ----------------------------------------
          8027‚îÜ wrapper.innerHTML = '<' + type + '>' + template + '</' + type + '>';
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `matcher` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          14882‚îÜ return new RegExp('^' + matcher + '$');
            ‚ãÆ‚îÜ----------------------------------------
          14887‚îÜ return new RegExp('^' + matcher.source + '$');
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `expression` function argument, this might allow an attacker to cause a      
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          16082‚îÜ var matcher = new RegExp('(^|\\s)' + escapeForRegexp(expression) + '(\\s|\\||$)');
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `attr` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          18063‚îÜ attr.$set("ngPattern", new RegExp(match[1], match[2]));
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `regex` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          21305‚îÜ regex = new RegExp('^' + regex + '$');
                                                           
  [36m[22m[24m  privacyidea/static/contrib/js/hotkeys.js[0m
     ‚ù± [1mjavascript.angular.security.detect-angular-element-methods.detect-angular-element-methods[0m
          Use of angular.element can lead to XSS if user-input is treated as part of the HTML element within
          `append`. It is recommended to contextually output encode user-input, before inserting into       
          `append`. If the HTML needs to be preserved it is recommended to sanitize the input using         
          $sce.getTrustedHTML or $sanitize.                                                                 
          Details: https://sg.run/ydnO                                                                      
                                                                                                            
          265‚îÜ angular.element(element).append($compile(helpMenu)(scope));
                                                                 
  [36m[22m[24m  privacyidea/static/contrib/js/jquery-1.11.3.js[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          1218‚îÜ docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
          1219‚îÜ   "<select id='" + expando + "-\f]' msallowcapture=''>" +
          1220‚îÜ   "<option selected=''></option></select>";
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `className` function argument, this might allow an attacker to cause a       
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          1677‚îÜ (pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" ))
               &&                                                                                        
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          1732‚îÜ while ( (node = node[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          2136‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          2150‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          2158‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          2906‚îÜ cur = cur[dir];
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `types` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          4450‚îÜ tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `event` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          4529‚îÜ new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          5476‚îÜ dest.outerHTML = src.outerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          5484‚îÜ dest.innerHTML = src.innerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          5522‚îÜ fragmentDiv.innerHTML = elem.outerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          5600‚îÜ tmp.innerHTML = wrap[1] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[2];
            ‚ãÆ‚îÜ----------------------------------------
          5873‚îÜ elem.innerHTML = value;
                                                                              
  [36m[22m[24m  privacyidea/static/contrib/js/ngmodules/angular-resource.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `param` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          436‚îÜ (new RegExp("(^|[^\\\\]):" + param + "(\\W|$)").test(url))) {
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `urlParam` function argument, this might allow an attacker to cause a Regular
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          447‚îÜ url = url.replace(new RegExp(":" + urlParam + "(\\W|$)", "g"), function(match, p1) {
            ‚ãÆ‚îÜ----------------------------------------
          451‚îÜ url = url.replace(new RegExp("(\/?):" + urlParam + "(\\W|$)", "g"), function(match,
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.audit.remote-property-injection.remote-property-injection[0m
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
          478‚îÜ config.params[key] = value;
            ‚ãÆ‚îÜ----------------------------------------
          519‚îÜ Resource[name] = function(a1, a2, a3, a4) {
          520‚îÜ   var params = {}, data, success, error;
          521‚îÜ
          522‚îÜ   /* jshint -W086 */ /* (purposefully fall through case statements) */
          523‚îÜ   switch (arguments.length) {
          524‚îÜ     case 4:
          525‚îÜ       error = a4;
          526‚îÜ       success = a3;
          527‚îÜ     //fallthrough
          528‚îÜ     case 3:
             [hid 115 additional lines, adjust with --max-lines-per-finding] 
                                                                           
  [36m[22m[24m  privacyidea/static/contrib/js/ngmodules/angular-route.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `path` function argument, this might allow an attacker to cause a Regular    
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          225‚îÜ ret.regexp = new RegExp('^' + path + '$', insensitive ? 'i' : '');
                                                                               
  [36m[22m[24m  privacyidea/static/contrib/js/ngmodules/angular-ui-router.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `m` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          792‚îÜ type        = $$UMFP.type(regexp || "string") || inherit($$UMFP.type("string"), { pattern:
               new RegExp(regexp) });                                                                    
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `pattern` function argument, this might allow an attacker to cause a Regular 
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          835‚îÜ this.regexp = new RegExp(compiled, config.caseInsensitive ? 'i' : undefined);
                                                                            
  [36m[22m[24m  privacyidea/static/contrib/js/ui-bootstrap-tpls-0.13.0.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `format` function argument, this might allow an attacker to cause a Regular  
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          760‚îÜ regex: new RegExp('^' + regex.join('') + '$'),
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `query` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          4459‚îÜ return query ? ('' + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'),
               '<strong>$&</strong>') : matchItem;                                            
                                                             
  [36m[22m[24m  privacyidea/static/templates/baseline.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           22‚îÜ <a class="navbar-text pull-right"
           23‚îÜ    ng-show="privacyideaVersionNumber"
           24‚îÜ         href="http://privacyidea.readthedocs.org/en/v{{ privacyideaVersionNumber }}"
           25‚îÜ         target="documentation">
           26‚îÜ     <translate>Online Documentation</translate>
           27‚îÜ </a>
                                                                      
  [36m[22m[24m  privacyidea/static/templates/cert_request_form.html[0m
    ‚ùØ‚ù± [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           11‚îÜ <form action="{{ instance }}/certificate/enroll" method="post">
           12‚îÜ
           13‚îÜ     <div class="form-group">
           14‚îÜ         <label>CA Connector: {{ ca }}</label>
           15‚îÜ     </div>
           16‚îÜ
           17‚îÜ     <input type="hidden" name="authtoken" value="{{ authtoken }}">
           18‚îÜ
           19‚îÜ     <div class="form-group">
           20‚îÜ         <label for="key">
             [hid 6 additional lines, adjust with --max-lines-per-finding] 
   
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           46‚îÜ <a class="navbar-text pull-right"
           47‚îÜ    ng-show="privacyideaVersionNumber"
           48‚îÜ         href="http://privacyidea.readthedocs.org/en/v{{ privacyideaVersionNumber }}"
           49‚îÜ         target="documentation">
           50‚îÜ     Online Documentation
           51‚îÜ </a>
                                                           
  [36m[22m[24m  privacyidea/static/templates/footer.html[0m
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           17‚îÜ <script src="{{ instance }}/static/contrib/js/angular.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           18‚îÜ <script src="{{ instance }}/static/contrib/js/ui-bootstrap-tpls-0.13.0.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           19‚îÜ <script src="{{ instance }}/static/contrib/js/jquery-1.11.3.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           20‚îÜ <script src="{{ instance }}/static/contrib/js/bootstrap.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           21‚îÜ <script src="{{ instance }}/static/contrib/js/angular-multi-select.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           22‚îÜ <script src="{{ instance }}/static/contrib/js/angular-file-upload.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           23‚îÜ <script src="{{ instance }}/static/contrib/js/hotkeys.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           24‚îÜ <script src="{{ instance }}/static/contrib/js/ngmodules/angular-route.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           25‚îÜ <script src="{{ instance }}/static/contrib/js/ngmodules/angular-ui-router.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           26‚îÜ <script src="{{ instance }}/static/contrib/js/ngmodules/angular-animate.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           27‚îÜ <script src="{{ instance }}/static/contrib/js/ngmodules/angular-idle.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           28‚îÜ <script src="{{ instance }}/static/contrib/js/ngmodules/angular-gettext.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           29‚îÜ <script src="{{ instance }}/static/components/translation/translations.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           30‚îÜ <script src="{{ instance }}/static/app.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           31‚îÜ <script src="{{ instance                                            
               }}/static/components/directives/controllers/directives.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           32‚îÜ <script src="{{ instance }}/static/components/login/factories/auth.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           33‚îÜ <script src="{{ instance }}/static/components/login/factories/u2f.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           34‚îÜ <script src="{{ instance }}/static/components/login/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           35‚îÜ <script src="{{ instance                                             
               }}/static/components/login/controllers/loginControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           36‚îÜ <script src="{{ instance }}/static/components/token/factories/token.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           37‚îÜ <script src="{{ instance }}/static/components/token/factories/validate.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           38‚îÜ <script src="{{ instance }}/static/components/token/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           39‚îÜ <script src="{{ instance                                             
               }}/static/components/token/controllers/tokenControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           40‚îÜ <script src="{{ instance                                                  
               }}/static/components/token/controllers/tokenDetailController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           41‚îÜ <script src="{{ instance                                                
               }}/static/components/token/controllers/tokenLostController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           42‚îÜ <script src="{{ instance                                                     
               }}/static/components/token/controllers/tokenGetSerialController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           43‚îÜ <script src="{{ instance                                                      
               }}/static/components/token/controllers/tokenChallengesController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           44‚îÜ <script src="{{ instance }}/static/components/user/factories/user.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           45‚îÜ <script src="{{ instance }}/static/components/user/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           46‚îÜ <script src="{{ instance                                           
               }}/static/components/user/controllers/userControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           47‚îÜ <script src="{{ instance }}/static/components/audit/factories/audit.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           48‚îÜ <script src="{{ instance }}/static/components/audit/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           49‚îÜ <script src="{{ instance                                             
               }}/static/components/audit/controllers/auditControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           50‚îÜ <script src="{{ instance }}/static/components/components/factories/component.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           51‚îÜ <script src="{{ instance }}/static/components/components/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           52‚îÜ <script src="{{ instance                                                      
               }}/static/components/components/controllers/componentControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           53‚îÜ <script src="{{ instance }}/static/components/config/factories/config.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           54‚îÜ <script src="{{ instance }}/static/components/config/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           55‚îÜ <script src="{{ instance                                               
               }}/static/components/config/controllers/configControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           56‚îÜ <script src="{{ instance                                             
               }}/static/components/config/controllers/eventController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           57‚îÜ <script src="{{ instance                                                    
               }}/static/components/config/controllers/periodicTaskController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           58‚îÜ <script src="{{ instance                                                           
               }}/static/components/config/controllers/ldapMachineResolverController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           59‚îÜ <script src="{{ instance                                                  
               }}/static/components/config/controllers/smtpServerController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           60‚îÜ <script src="{{ instance                                                    
               }}/static/components/config/controllers/radiusServerController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           61‚îÜ <script src="{{ instance                                                         
               }}/static/components/config/controllers/privacyideaServerController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           62‚îÜ <script src="{{ instance                                                  
               }}/static/components/config/controllers/smsgatewayController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           63‚îÜ <script src="{{ instance }}/static/components/machine/factories/machine.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           64‚îÜ <script src="{{ instance }}/static/components/machine/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           65‚îÜ <script src="{{ instance                                                
               }}/static/components/machine/controllers/machineController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           66‚îÜ <script src="{{ instance                                                       
               }}/static/components/machine/controllers/machineDetailsController.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           67‚îÜ <script src="{{ instance }}/static/components/register/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           68‚îÜ <script src="{{ instance                                                   
               }}/static/components/register/controllers/registerControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           69‚îÜ <script src="{{ instance                                             
               }}/static/components/register/factories/registerFactory.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           70‚îÜ <script src="{{ instance }}/static/components/recovery/states/states.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           71‚îÜ <script src="{{ instance                                                   
               }}/static/components/recovery/controllers/recoveryControllers.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           72‚îÜ <script src="{{ instance                                             
               }}/static/components/recovery/factories/recoveryFactory.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           73‚îÜ <script src="{{ instance }}/static/components/filters/filters.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           74‚îÜ <script src="{{ instance }}/static/contrib/js/angular-inform.js"></script>
            ‚ãÆ‚îÜ----------------------------------------
           75‚îÜ <script src="{{ instance }}/static/contrib/js/u2f-api.js"></script>
                                                           
  [36m[22m[24m  privacyidea/static/templates/header.html[0m
    ‚ùØ‚ù± [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           25‚îÜ var browserLanguage = "{{ browser_lang }}";
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           25‚îÜ var browserLanguage = "{{ browser_lang }}";
                                                         
  [36m[22m[24m  privacyidea/static/templates/menu.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          126‚îÜ                             <li><a href="http://privacyidea.readthedocs.org/en/v{{
               privacyideaVersionNumber }}"                                                      
          127‚îÜ                            target="documentation" translate>
          128‚îÜ                                 Online Documentation</a></li>
                                                                   
  [36m[22m[24m  privacyidea/static/templates/token_enrolled.html[0m
    ‚ùØ‚ù± [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           55‚îÜ <a class="navbar-text pull-right"
           56‚îÜ    ng-show="privacyideaVersionNumber"
           57‚îÜ         href="http://privacyidea.readthedocs.org/en/v{{ privacyideaVersionNumber }}"
           58‚îÜ         target="documentation">
           59‚îÜ     Online Documentation
           60‚îÜ </a>
                                                       
  [36m[22m[24m  tools/privacyidea-create-certificate[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0x400` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
           40‚îÜ os.chmod(key, 0x400)
                                                        
  [36m[22m[24m  tools/privacyidea-decrypt-safeword.py[0m
    ‚ùØ‚ù± [1mpython.pycryptodome.security.insecure-cipher-algorithm-des.insecure-cipher-algorithm-des[0m
          Detected DES cipher algorithm which is considered insecure. This algorithm is not cryptographically
          secure and can be reversed easily. Use AES instead.                                                
          Details: https://sg.run/Z5bw                                                                       
                                                                                                             
           45‚îÜ des = DES.new(des_key)
                                               
  [36m[22m[24m  tools/privacyidea-pip-update[0m
   ‚ùØ‚ùØ‚ù± [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'call' with 'shell=True'. This is dangerous because this call will spawn
          the command using a shell process. Doing so propagates current shell settings and variables, which  
          makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.          
          Details: https://sg.run/J92w                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mcall("privacyidea-schema-upgrade {0}".format(pipes.quote(mig_path)), shell=False)
           48‚îÜ call("privacyidea-schema-upgrade {0}".format(pipes.quote(mig_path)), shell=True)
                                
  [36m[22m[24m  tools/ssha.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(getpass.getpass() + salt)
            4‚îÜ print '{SSHA}' + base64.b64encode(hashlib.sha1(getpass.getpass() + salt).digest() + salt)
