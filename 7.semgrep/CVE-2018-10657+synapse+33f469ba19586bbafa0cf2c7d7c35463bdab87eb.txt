                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 99 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                                      
  [36m[22m[24m  contrib/jitsimeetbridge/unjingle/strophe/strophe.js[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          1356‚îÜ _div.innerHTML = this.xhr.responseText;
                                               
  [36m[22m[24m  contrib/vertobot/config.yaml[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.lang.security.detect-insecure-websocket.detect-insecure-websocket[0m
          Insecure WebSocket Detected. WebSocket Secure (wss) should be used for all WebSocket connections.
          Details: https://sg.run/GWyz                                                                     
                                                                                                           
           17‚îÜ url: "ws://webrtc.freeswitch.org:8081/"
                                           
  [36m[22m[24m  res/templates/notif.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           42‚îÜ <a href="{{ notif.link }}">View {{ room.title }}</a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           42‚îÜ <a href="{{ notif.link }}">View {{ room.title }}</a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           42‚îÜ <a href="{{ notif.link }}">View {{ room.title }}</a>
                                                
  [36m[22m[24m  res/templates/notif_mail.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           35‚îÜ <a href="{{ unsubscribe_link }}">Unsubscribe</a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           35‚îÜ <a href="{{ unsubscribe_link }}">Unsubscribe</a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           35‚îÜ <a href="{{ unsubscribe_link }}">Unsubscribe</a>
                                          
  [36m[22m[24m  res/templates/room.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           24‚îÜ <a href="{{ room.link }}">Join the conversation.</a>
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           24‚îÜ <a href="{{ room.link }}">Join the conversation.</a>
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           24‚îÜ <a href="{{ room.link }}">Join the conversation.</a>
                                          
  [36m[22m[24m  scripts/synapse_port_db[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          229‚îÜ txn.execute("TRUNCATE %s CASCADE" % (table,))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          229‚îÜ txn.execute("TRUNCATE %s CASCADE" % (table,))
            ‚ãÆ‚îÜ----------------------------------------
          310‚îÜ txn.execute(forward_select, (forward_chunk, self.batch_size,))
            ‚ãÆ‚îÜ----------------------------------------
          316‚îÜ txn.execute(backward_select, (backward_chunk, self.batch_size,))
                                                   
  [36m[22m[24m  scripts-dev/federation_client.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mrequests.request(method=method,url=dest,headers={"Authorization":
              authorization_headers[0]},verify=True,data=content,)                        
          158‚îÜ result = requests.request(
          159‚îÜ     method=method,
          160‚îÜ     url=dest,
          161‚îÜ     headers={"Authorization": authorization_headers[0]},
          162‚îÜ     verify=False,
          163‚îÜ     data=content,
          164‚îÜ )
                                              
  [36m[22m[24m  scripts-dev/tail-synapse.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.requests.security.disabled-cert-validation.disabled-cert-validation[0m
          Certificate verification has been explicitly disabled. This permits insecure connections to insecure
          servers. Re-enable certification validation.                                                        
          Details: https://sg.run/AlYp                                                                        
                                                                                                              
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mrequests.get(server + "/_synapse/replication",verify=True,params=streams)
           33‚îÜ return parse_response(requests.get(
           34‚îÜ     server + "/_synapse/replication",
           35‚îÜ     verify=False,
           36‚îÜ     params=streams
           37‚îÜ ).content)
                           
  [36m[22m[24m  setup.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           77‚îÜ exec(code, result)
                                      
  [36m[22m[24m  synapse/api/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Unrecognised access token - not in
          store: %s" % (token,) being logged. This may lead to secret credentials being exposed. Make sure   
          that the logger is not logging  sensitive information.                                             
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          489‚îÜ logger.warn("Unrecognised access token - not in store: %s" % (token,))
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Unrecognised appservice access 
          token: %s" % (token,) being logged. This may lead to secret credentials being exposed. Make sure
          that the logger is not logging  sensitive information.                                          
          Details: https://sg.run/ydNx                                                                    
                                                                                                          
          512‚îÜ logger.warn("Unrecognised appservice access token: %s" % (token,))
   
   ‚ùØ‚ùØ‚ù± [1mpython.django.security.nan-injection.nan-injection[0m
          Found user input going directly into typecast for bool(), float(), or complex(). This allows an     
          attacker to inject Python's not-a-number (NaN) into the typecast. This results in undefind behavior,
          particularly when doing comparisons. Either cast to a different type, or add a guard checking for   
          all capitalizations of the string 'nan'.                                                            
          Details: https://sg.run/Og7L                                                                        
                                                                                                              
          676‚îÜ return bool(query_params) or bool(auth_headers)
                                           
  [36m[22m[24m  synapse/handlers/auth.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "Failed password login for user %s"
          being logged. This may lead to secret credentials being exposed. Make sure that the logger is not  
          logging  sensitive information.                                                                    
          Details: https://sg.run/ydNx                                                                       
                                                                                                             
          720‚îÜ logger.warn("Failed password login for user %s", user_id)
                                           
  [36m[22m[24m  synapse/handlers/sync.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.logging.logger-credential-leak.python-logger-credential-disclosure[0m
          Detected a python logger call with a potential hardcoded secret "User joined room after current
          token: %s" being logged. This may lead to secret credentials being exposed. Make sure that the 
          logger is not logging  sensitive information.                                                  
          Details: https://sg.run/ydNx                                                                   
                                                                                                         
          1401‚îÜ logger.info("User joined room after current token: %s", room_id)
                                         
  [36m[22m[24m  synapse/push/mailer.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.direct-use-of-jinja2.direct-use-of-jinja2[0m
          Detected direct use of jinja2. If not done properly, this may bypass HTML escaping which opens up
          the application to cross-site scripting (XSS) vulnerabilities. Prefer using the Flask method     
          'render_template()' and templates with a '.html' extension in order to prevent XSS.              
          Details: https://sg.run/RoKe                                                                     
                                                                                                           
          529‚îÜ env = jinja2.Environment(loader=loader)
                                                       
  [36m[22m[24m  synapse/rest/client/v2_alpha/auth.py[0m
    ‚ùØ‚ù± [1mpython.django.security.injection.raw-html-format.raw-html-format[0m
          Detected user input flowing into a manually constructed HTML string. You may be accidentally       
          bypassing secure methods of rendering HTML by manually constructing HTML and this could create a   
          cross-site scripting vulnerability, which could let attackers steal sensitive user data. To be sure
          this is safe, check that the HTML is rendered safely. Otherwise, use templates                     
          (`django.shortcuts.render`) which will safely render HTML instead.                                 
          Details: https://sg.run/oYj1                                                                       
                                                                                                             
          122‚îÜ html = RECAPTCHA_TEMPLATE % {
          123‚îÜ     'session': session,
          124‚îÜ     'myurl': "%s/auth/%s/fallback/web" % (
          125‚îÜ         CLIENT_V2_ALPHA_PREFIX, LoginType.RECAPTCHA
          126‚îÜ     ),
          127‚îÜ     'sitekey': self.hs.config.recaptcha_public_key,
          128‚îÜ }
            ‚ãÆ‚îÜ----------------------------------------
          168‚îÜ html = RECAPTCHA_TEMPLATE % {
          169‚îÜ     'session': session,
          170‚îÜ     'myurl': "%s/auth/%s/fallback/web" % (
          171‚îÜ         CLIENT_V2_ALPHA_PREFIX, LoginType.RECAPTCHA
          172‚îÜ     ),
          173‚îÜ     'sitekey': self.hs.config.recaptcha_public_key,
          174‚îÜ }
                                   
  [36m[22m[24m  synapse/state.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m‚ñ∂‚ñ∂‚îÜ Autofix ‚ñ∂ [0mhashlib.sha256(e.event_id)
          530‚îÜ return -int(e.depth), hashlib.sha1(e.event_id).hexdigest()
                                                                      
  [36m[22m[24m  synapse/static/client/register/js/recaptcha_ajax.js[0m
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          150‚îÜ h.isActive=function(){return this.delay_.isActive()};h.onSuccess=function(){};h.onFailure=f
               unction(){};h.onTick_=function(){if(this.listener_.call(this.handler_))this.onSuccess();els
               e if(0>this.runUntil_)this.delay_.start(this.interval_);else{var a=this.runUntil_-         
               ha();if(0>=a)this.onFailure();else this.delay_.start(Math.min(this.interval_,a))}};$a("area
               base br col command embed hr img input keygen link meta param source track wbr".split(" "))
               ;$a("action","cite","data","formaction","href","manifest","poster","src");$a("link","script
               ","style");var                                                                             
               Vc={sanitizedContentKindHtml:!0},Wc={sanitizedContentKindText:!0},Xc=function(){throw      
               Error("Do not instantiate                                                                  
               directly");};Xc.prototype.contentDir=null;Xc.prototype.toString=function(){return          
               this.content};var bd=function(a){var b=Yc;y(b,"Soy template may not be null.");var         
               c=sb().createElement("DIV");a=Zc(b(a||$c,void 0,void 0));b=a.match(ad);y(!b,"This template 
               starts with a %s, which cannot be a child of a <div>, as required by soy internals.        
               Consider using goog.soy.renderElement instead.\nTemplate output:                           
               %s",b&&b[0],a);c.innerHTML=a;return                                                        
               1==c.childNodes.length&&(a=c.firstChild,1==a.nodeType)?a:c},Zc=function(a){if(!da(a))return
               String(a);if(a instanceof Xc){if(a.contentKind===Vc)return Ka(a.content);                  
            ‚ãÆ‚îÜ----------------------------------------
          175‚îÜ document.body.appendChild(a)}Z._finish_widget()},_add_css:function(a){if(-                 
               1!=navigator.appVersion.indexOf("MSIE 5"))document.write('<style                           
               type="text/css">'+a+"</style>");else{var b=document.createElement("style");b.type="text/css
               ";b.styleSheet?b.styleSheet.cssText=a:b.appendChild(document.createTextNode(a));Z._get_scri
               pt_area().appendChild(b)}},_set_style:function(a){Z.style_set||(Z.style_set=!0,Z._add_css(a
               +"\n\n.recaptcha_is_showing_audio .recaptcha_only_if_image,.recaptcha_isnot_showing_audio  
               .recaptcha_only_if_audio,.recaptcha_had_incorrect_sol                                      
               .recaptcha_only_if_no_incorrect_sol,.recaptcha_nothad_incorrect_sol                        
               .recaptcha_only_if_incorrect_sol{display:none !important}"))},                             
            ‚ãÆ‚îÜ----------------------------------------
          176‚îÜ _init_builtin_theme:function(){var a=Z.$,b=Z._get_static_url_root(),c=v.VertCss,d=v.VertHtm
               l,e=b+"/img/"+Z.theme,g="gif",b=Z.theme;"clean"==b&&(c=v.CleanCss,d=v.CleanHtml,g="png");c=
               c.replace(/IMGROOT/g,e);Z._set_style(c);Z.update_widget();Z.widget.innerHTML='<div id="reca
               ptcha_area">'+d+"</div>";c=Z.getLang_();a("recaptcha_privacy")&&null!=c&&"en"==c.substring(
               0,2).toLowerCase()&&null!=W.privacy_and_terms&&0<W.privacy_and_terms.length&&(c=document.cr
               eateElement("a"),c.href="http://www.google.com/intl/en/policies/",                         
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `a` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          188‚îÜ (d=document.body);var e=d.className,e=e.replace(new RegExp("(^|\\s+)"+a+"(\\s+|$)"),"      
               "),e=e.replace(new RegExp("(^|\\s+)"+b+"(\\s+|$)")," ");d.className=e+("                   
               "+(c?a:b))},_get_help_link:function(){var                                                  
               a="https://support.google.com/recaptcha/";Z.getLang_()&&(a+="?hl="+Z.getLang_());return a},
               playAgain:function(){Z.$("recaptcha_image").innerHTML=Z.getAudioCaptchaHtml();Z._loop_playb
               ack()},_loop_playback:function(){var                                                       
               a=Z.$("recaptcha_audio_play_again");a&&Z.attachEvent(a,"click",function(){Z.playAgain();   
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `b` function argument, this might allow an attacker to cause a Regular       
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          188‚îÜ (d=document.body);var e=d.className,e=e.replace(new RegExp("(^|\\s+)"+a+"(\\s+|$)"),"      
               "),e=e.replace(new RegExp("(^|\\s+)"+b+"(\\s+|$)")," ");d.className=e+("                   
               "+(c?a:b))},_get_help_link:function(){var                                                  
               a="https://support.google.com/recaptcha/";Z.getLang_()&&(a+="?hl="+Z.getLang_());return a},
               playAgain:function(){Z.$("recaptcha_image").innerHTML=Z.getAudioCaptchaHtml();Z._loop_playb
               ack()},_loop_playback:function(){var                                                       
               a=Z.$("recaptcha_audio_play_again");a&&Z.attachEvent(a,"click",function(){Z.playAgain();   
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          188‚îÜ (d=document.body);var e=d.className,e=e.replace(new RegExp("(^|\\s+)"+a+"(\\s+|$)"),"      
               "),e=e.replace(new RegExp("(^|\\s+)"+b+"(\\s+|$)")," ");d.className=e+("                   
               "+(c?a:b))},_get_help_link:function(){var                                                  
               a="https://support.google.com/recaptcha/";Z.getLang_()&&(a+="?hl="+Z.getLang_());return a},
               playAgain:function(){Z.$("recaptcha_image").innerHTML=Z.getAudioCaptchaHtml();Z._loop_playb
               ack()},_loop_playback:function(){var                                                       
               a=Z.$("recaptcha_audio_play_again");a&&Z.attachEvent(a,"click",function(){Z.playAgain();   
                                           
  [36m[22m[24m  synapse/storage/_base.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          444‚îÜ txn.execute(sql, vals)
            ‚ãÆ‚îÜ----------------------------------------
          548‚îÜ txn.execute(sql, sqlargs)
            ‚ãÆ‚îÜ----------------------------------------
          564‚îÜ txn.execute(sql, allvalues.values())
            ‚ãÆ‚îÜ----------------------------------------
          633‚îÜ txn.execute(sql, keyvalues.values())
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          635‚îÜ txn.execute(sql)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          635‚îÜ txn.execute(sql)
            ‚ãÆ‚îÜ----------------------------------------
          697‚îÜ txn.execute(sql, keyvalues.values())
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          703‚îÜ txn.execute(sql)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          703‚îÜ txn.execute(sql)
            ‚ãÆ‚îÜ----------------------------------------
          780‚îÜ txn.execute(sql, values)
            ‚ãÆ‚îÜ----------------------------------------
          803‚îÜ txn.execute(
          804‚îÜ     update_sql,
          805‚îÜ     updatevalues.values() + keyvalues.values()
          806‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          853‚îÜ txn.execute(select_sql, keyvalues.values())
            ‚ãÆ‚îÜ----------------------------------------
          891‚îÜ txn.execute(sql, keyvalues.values())
            ‚ãÆ‚îÜ----------------------------------------
          909‚îÜ return txn.execute(sql, keyvalues.values())
            ‚ãÆ‚îÜ----------------------------------------
          950‚îÜ return txn.execute(sql, values)
            ‚ãÆ‚îÜ----------------------------------------
          971‚îÜ txn.execute(sql, (int(max_value),))
            ‚ãÆ‚îÜ----------------------------------------
          1096‚îÜ txn.execute(sql, keyvalues.values() + pagevalues)
            ‚ãÆ‚îÜ----------------------------------------
          1103‚îÜ txn.execute(sql, pagevalues)
            ‚ãÆ‚îÜ----------------------------------------
          1197‚îÜ txn.execute(sql, termvalues)
                                                        
  [36m[22m[24m  synapse/storage/background_updates.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          302‚îÜ c.execute(sql)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          302‚îÜ c.execute(sql)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          316‚îÜ c.execute(sql)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          316‚îÜ c.execute(sql)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          343‚îÜ c.execute(sql)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          343‚îÜ c.execute(sql)
                                                
  [36m[22m[24m  synapse/storage/client_ips.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          193‚îÜ txn.execute(sql, bindings)
                                                 
  [36m[22m[24m  synapse/storage/deviceinbox.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          197‚îÜ txn.execute(sql, [user_id] + devices)
                                                     
  [36m[22m[24m  synapse/storage/end_to_end_keys.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          116‚îÜ txn.execute(sql, query_params)
                                                      
  [36m[22m[24m  synapse/storage/engines/__init__.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           39‚îÜ module = importlib.import_module(name)
                                                      
  [36m[22m[24m  synapse/storage/engines/postgres.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           64‚îÜ txn.execute("LOCK TABLE %s in EXCLUSIVE MODE" % (table,))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           64‚îÜ txn.execute("LOCK TABLE %s in EXCLUSIVE MODE" % (table,))
                                                      
  [36m[22m[24m  synapse/storage/event_federation.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           87‚îÜ txn.execute(
           88‚îÜ     base_sql % (",".join(["?"] * len(chunk)),),
           89‚îÜ     chunk
           90‚îÜ )
                                                        
  [36m[22m[24m  synapse/storage/event_push_actions.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          138‚îÜ txn.execute(sql, (user_id, room_id))
            ‚ãÆ‚îÜ----------------------------------------
          161‚îÜ txn.execute(sql, (user_id, room_id))
            ‚ãÆ‚îÜ----------------------------------------
          707‚îÜ txn.execute(sql, args)
                                            
  [36m[22m[24m  synapse/storage/events.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          919‚îÜ txn.execute(
          920‚îÜ     "SELECT event_id, outlier FROM events WHERE event_id in (%s)" % (
          921‚îÜ         ",".join(["?"] * len(events_and_contexts)),
          922‚îÜ     ),
          923‚îÜ     [event.event_id for event, _ in events_and_contexts]
          924‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          1285‚îÜ txn.execute(sql, ev_map.keys())
            ‚ãÆ‚îÜ----------------------------------------
          1341‚îÜ txn.execute(sql, chunk)
            ‚ãÆ‚îÜ----------------------------------------
          1875‚îÜ txn.execute(
          1876‚îÜ     "INSERT INTO events_to_purge"
          1877‚îÜ     " SELECT event_id, %s"
          1878‚îÜ     " FROM events AS e LEFT JOIN state_events USING (event_id)"
          1879‚îÜ     " WHERE e.room_id = ? AND topological_ordering < ?" % (
          1880‚îÜ         should_delete_expr,
          1881‚îÜ     ),
          1882‚îÜ     should_delete_params,
          1883‚îÜ )
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          2045‚îÜ txn.execute(
          2046‚îÜ     "DELETE FROM %s WHERE event_id IN ("
          2047‚îÜ     "    SELECT event_id FROM events_to_purge WHERE should_delete"
          2048‚îÜ     ")" % (table,),
          2049‚îÜ )
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          2045‚îÜ txn.execute(
          2046‚îÜ     "DELETE FROM %s WHERE event_id IN ("
          2047‚îÜ     "    SELECT event_id FROM events_to_purge WHERE should_delete"
          2048‚îÜ     ")" % (table,),
          2049‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          2058‚îÜ txn.execute(
          2059‚îÜ     "DELETE FROM %s WHERE room_id = ? AND event_id IN ("
          2060‚îÜ     "    SELECT event_id FROM events_to_purge WHERE should_delete"
          2061‚îÜ     ")" % (table,),
          2062‚îÜ     (room_id, )
          2063‚îÜ )
                                                   
  [36m[22m[24m  synapse/storage/events_worker.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          357‚îÜ txn.execute(sql, evs)
                                              
  [36m[22m[24m  synapse/storage/presence.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          125‚îÜ txn.execute(
          126‚îÜ     sql % (",".join("?" for _ in states),),
          127‚îÜ     args
          128‚îÜ )
                                              
  [36m[22m[24m  synapse/storage/receipts.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          230‚îÜ txn.execute(sql, args)
            ‚ãÆ‚îÜ----------------------------------------
          242‚îÜ txn.execute(sql, args)
            ‚ãÆ‚îÜ----------------------------------------
          438‚îÜ txn.execute(query, [room_id] + event_ids)
                                                  
  [36m[22m[24m  synapse/storage/registration.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          317‚îÜ txn.execute(
          318‚îÜ     "SELECT token, id, device_id FROM access_tokens WHERE %s" % where_clause,
          319‚îÜ     values
          320‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          328‚îÜ txn.execute(
          329‚îÜ     "DELETE FROM access_tokens WHERE %s" % where_clause,
          330‚îÜ     values
          331‚îÜ )
                                          
  [36m[22m[24m  synapse/storage/room.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           93‚îÜ txn.execute(
           94‚îÜ     sql % ("AND appservice_id = ? AND network_id = ?",),
           95‚îÜ     (stream_id, network_tuple.appservice_id, network_tuple.network_id,)
           96‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
           98‚îÜ txn.execute(
           99‚îÜ     sql % ("AND appservice_id IS NULL",),
          100‚îÜ     (stream_id,)
          101‚îÜ )
            ‚ãÆ‚îÜ----------------------------------------
          425‚îÜ txn.execute(sql, (
          426‚îÜ     event.event_id,
          427‚îÜ     event.room_id,
          428‚îÜ     event.content[key]
          429‚îÜ ))
                                                
  [36m[22m[24m  synapse/storage/roommember.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          163‚îÜ txn.execute(sql, args)
                                            
  [36m[22m[24m  synapse/storage/search.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           87‚îÜ txn.execute(sql, (target_min_stream_id, max_stream_id, batch_size))
            ‚ãÆ‚îÜ----------------------------------------
          689‚îÜ txn.execute(query, (value, search_query,))
                                           
  [36m[22m[24m  synapse/storage/state.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          259‚îÜ txn.execute(sql % (where_clause,), args)
            ‚ãÆ‚îÜ----------------------------------------
          296‚îÜ txn.execute(
          297‚îÜ     "SELECT type, state_key, event_id FROM state_groups_state"
          298‚îÜ     " WHERE state_group = ? %s" % (where_clause,),
          299‚îÜ     args
          300‚îÜ )
                                            
  [36m[22m[24m  synapse/storage/stream.py[0m
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          256‚îÜ txn.execute(sql, (room_id, from_id, to_id, limit))
            ‚ãÆ‚îÜ----------------------------------------
          265‚îÜ txn.execute(sql, (room_id, to_id, limit))
            ‚ãÆ‚îÜ----------------------------------------
          796‚îÜ txn.execute(sql, args)
                                                        
  [36m[22m[24m  synapse/storage/util/id_generators.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           46‚îÜ cur.execute("SELECT MAX(%s) FROM %s" % (column, table,))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           46‚îÜ cur.execute("SELECT MAX(%s) FROM %s" % (column, table,))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           48‚îÜ cur.execute("SELECT MIN(%s) FROM %s" % (column, table,))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           48‚îÜ cur.execute("SELECT MIN(%s) FROM %s" % (column, table,))
                                          
  [36m[22m[24m  synapse/util/manhole.py[0m
   ‚ùØ‚ùØ‚ù± [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
           27‚îÜ PRIVATE_KEY = """-----BEGIN RSA PRIVATE KEY-----
           28‚îÜ MIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW
                                                
  [36m[22m[24m  synapse/util/module_loader.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           32‚îÜ module = importlib.import_module(module)
