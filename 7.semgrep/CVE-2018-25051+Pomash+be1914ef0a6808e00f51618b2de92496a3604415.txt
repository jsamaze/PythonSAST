                    
                    
┌──────────────────┐
│ 19 Code Findings │
└──────────────────┘
                                                            
  [36m[22m[24m  Pomash/theme/clean/templates/article.html[0m
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           54┆ var disqus_shortname = '{{ disqus_name.strip().lstrip() }}';
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           61┆ <noscript>Please enable JavaScript to view the <a                                
               href="http://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           63┆ <script src='{{ static_url("js/av-min.js") }}'></script>
            ⋮┆----------------------------------------
           64┆ <script src='{{ static_url("js/Valine.js") }}'></script>
                                                              
  [36m[22m[24m  Pomash/theme/clean/templates/change_pw.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           26┆ <form action="#" method="post" id="change_pw">
           27┆     <div class="input">
           28┆         <label for="o_password">Old Password</label><input id="o_password"
               name="o_password" type="password">                                        
           29┆     </div>
           30┆     <div class="input">
           31┆         <label for="n_password">New Password</label><input id="n_password"
               name="n_password" type="password">                                        
           32┆     </div>
           33┆     <div class="input">
           34┆         <label for="n_password_c">Confirm New Password</label><input id="n_password_c"
               name="n_password_c" type="password">                                                  
           35┆     </div>
             [hid 4 additional lines, adjust with --max-lines-per-finding] 
                                                           
  [36m[22m[24m  Pomash/theme/clean/templates/editor.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
           64┆ <form action="#" method="post" id="article_editor">
           65┆     <div class="input">
           66┆         <label for="title">Title</label>
           67┆         <input id="title" name="title" type="text" value="{% if not is_page and not new
               %}{{ article.title }}{% elif is_page and not new %}{{ content.title }}{% end %}"       
               style="width:100%;">                                                                   
           68┆     </div>
           69┆     <div v-if="!is_page" class="input">
           70┆         <label for="tag">Tag</label>
           71┆         <input id="tag" name="tag" type="text" value="{% if not is_page and not new %}{{
               article.tag }}{% end %}" style="width:100%;">                                           
           72┆     </div>
           73┆     <div class="input">
             [hid 7 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           87┆ <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           91┆ <script src='{{ static_url("js/marked.min.js") }}'></script>
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           92┆ <script src="https://unpkg.com/lodash@4.16.0"></script>
                                                           
  [36m[22m[24m  Pomash/theme/clean/templates/layout.html[0m
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           12┆ <script async src="https://www.googletagmanager.com/gtag/js?id={{
               handler.settings['analytics'] }}"></script>                      
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
           17┆ gtag('config', '{{ handler.settings["analytics"] }}');
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           17┆ gtag('config', '{{ handler.settings["analytics"] }}');
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           25┆ <a href="{{ handler.settings['blog_url'] }}" id="site_name">{{
               handler.settings['blog_name'] }}</a>                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           25┆ <a href="{{ handler.settings['blog_url'] }}" id="site_name">{{
               handler.settings['blog_name'] }}</a>                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           25┆ <a href="{{ handler.settings['blog_url'] }}" id="site_name">{{
               handler.settings['blog_name'] }}</a>                          
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           42┆ Theme <a href="https://github.com/JmPotato/Potheme-Clean">Clean</a> by <a
               href="https://github.com/whtsky">whtsky</a> and modified by <a           
               href="http://ipotato.me">JmPotato</a>                                    
                                                          
  [36m[22m[24m  Pomash/theme/clean/templates/login.html[0m
    ❯❱ [1mpython.django.security.django-no-csrf-token.django-no-csrf-token[0m
          Manually-created forms in django templates should specify a csrf_token to prevent CSRF attacks
          Details: https://sg.run/N0Bp                                                                  
                                                                                                        
            9┆ <form action="#" method="post" id="login">
           10┆     <div class="input">
           11┆         <label for="username">Username</label><input id="username" name="username"
               type="text" style="width:50%;">                                                   
           12┆     </div>
           13┆     <div class="input">
           14┆         <label for="password">Password</label><input id="password" name="password"
               type="password" style="width:50%;">                                               
           15┆     </div>
           16┆     <div id="submit">
           17┆         <button type="submit">Login</button>
           18┆     </div>
             [hid 1 additional lines, adjust with --max-lines-per-finding] 
                             
  [36m[22m[24m  init_db.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           19┆ c.execute('''INSERT INTO admin_config VALUES (\"%s\", \"%s\", "token");''' %
               (login_username, hashlib.md5("admin").hexdigest()))                         
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           19┆ c.execute('''INSERT INTO admin_config VALUES (\"%s\", \"%s\", "token");''' %
               (login_username, hashlib.md5("admin").hexdigest()))                         
