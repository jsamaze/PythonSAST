                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 26 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                          
  [36m[22m[24m  yolapi/pypi/metadata.py[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.avoid-mark-safe.avoid-mark-safe[0m
          'mark_safe()' is used to mark a string as "safe" for HTML output. This disables escaping and could
          therefore subject the content to XSS attacks. Use 'django.utils.html.format_html()' to build HTML 
          for rendering instead.                                                                            
          Details: https://sg.run/yd0P                                                                      
                                                                                                            
          147‚îÜ return mark_safe(html)
                                                  
  [36m[22m[24m  yolapi/pypi/static/js/jquery.js[0m
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `types` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          2791‚îÜ namespaces = namespaces ? new RegExp("(^|\\.)" +                      
               namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
            ‚ãÆ‚îÜ----------------------------------------
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `event` function argument, this might allow an attacker to cause a Regular   
          Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main thread. For  
          this reason, it is recommended to use hardcoded regexes instead. If your regex is run on user-      
          controlled input, consider performing input validation or use a regex checking/sanitization library 
          such as https://www.npmjs.com/package/recheck to verify that the regex does not appear vulnerable to
          ReDoS.                                                                                              
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          2888‚îÜ event.namespace_re = event.namespace? new RegExp("(^|\\.)" +
               namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;        
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          3853‚îÜ div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.detect-non-literal-regexp.detect-non-literal-regexp[0m
          RegExp() called with a `className` function argument, this might allow an attacker to cause a       
          Regular Expression Denial-of-Service (ReDoS) within your application as RegExP blocks the main      
          thread. For this reason, it is recommended to use hardcoded regexes instead. If your regex is run on
          user-controlled input, consider performing input validation or use a regex checking/sanitization    
          library such as https://www.npmjs.com/package/recheck to verify that the regex does not appear      
          vulnerable to ReDoS.                                                                                
          Details: https://sg.run/gr65                                                                        
                                                                                                              
          4264‚îÜ pattern = classCache( className, new RegExp("(^|" + whitespace + ")" + className + "(" +
               whitespace + "|$)") );                                                                   
   
    ‚ùØ‚ù± [1mjavascript.lang.security.audit.prototype-pollution.prototype-pollution-loop.prototype-pollution-loop[0m
          Possibility of prototype polluting function detected. By adding or modifying attributes of an object
          prototype, it is possible to create attributes that exist on every object, or replace critical      
          attributes with malicious ones. This can be problematic if the software depends on existence or non-
          existence of certain attributes, or uses pre-defined attributes of object prototype (such as        
          hasOwnProperty, toString or valueOf). Possible mitigations might be: freezing the object prototype, 
          using an object without prototypes (via Object.create(null) ), blocking modifications of attributes 
          that resolve to object prototype, using Map instead of object.                                      
          Details: https://sg.run/w1DB                                                                        
                                                                                                              
          4752‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          4766‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          4785‚îÜ while ( (elem = elem[ dir ]) ) {
            ‚ãÆ‚îÜ----------------------------------------
          5584‚îÜ cur = cur[dir];
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.browser.security.insecure-document-method.insecure-document-method[0m
          User controlled data in methods like `innerHTML`, `outerHTML` or `document.write` is an anti-pattern
          that can lead to XSS vulnerabilities                                                                
          Details: https://sg.run/LwA9                                                                        
                                                                                                              
          5880‚îÜ elem.innerHTML = value;
            ‚ãÆ‚îÜ----------------------------------------
          6078‚îÜ dest.outerHTML = src.outerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          6086‚îÜ dest.innerHTML = src.innerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          6226‚îÜ fragmentDiv.innerHTML = elem.outerHTML;
            ‚ãÆ‚îÜ----------------------------------------
          6312‚îÜ div.innerHTML = wrap[1] + elem + wrap[2];
   
   ‚ùØ‚ùØ‚ù± [1mjavascript.express.security.audit.remote-property-injection.remote-property-injection[0m
          Bracket object notation with user input is present, this might allow an attacker to access all
          properties of the object and even it's prototype. Use literal values for object properties.   
          Details: https://sg.run/Z4gn                                                                  
                                                                                                        
          9384‚îÜ jQuery.fn[ funcName ] = function( margin, value ) {
          9385‚îÜ   var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
          9386‚îÜ           extra = defaultExtra || ( margin === true || value === true ? "margin" :
               "border" );                                                                        
          9387‚îÜ
          9388‚îÜ   return jQuery.access( this, function( elem, type, value ) {
          9389‚îÜ           var doc;
          9390‚îÜ
          9391‚îÜ           if ( jQuery.isWindow( elem ) ) {
          9392‚îÜ                   // As of 5/8/2012 this will yield incorrect results for Mobile Safari,
               but there                                                                                
          9393‚îÜ                   // isn't a whole lot we can do. See pull request at this URL for
               discussion:                                                                        
             [hid 25 additional lines, adjust with --max-lines-per-finding] 
                                                          
  [36m[22m[24m  yolapi/pypi/templates/pypi/release.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           16‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           16‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           16‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">
                                                                 
  [36m[22m[24m  yolapi/pypi/templates/pypi.simple/package.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                             
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                             
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5‚îÜ <a href="{{ distribution.content.url }}#md5={{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                             
                                                                 
  [36m[22m[24m  yolapi/pypi/templates/pypi.simple/release.html[0m
    ‚ùØ‚ù± [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            4‚îÜ <a href="{{ distribution.content.url }}#{{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                         
   
    ‚ùØ‚ù± [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            4‚îÜ <a href="{{ distribution.content.url }}#{{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                         
   
    ‚ùØ‚ù± [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            4‚îÜ <a href="{{ distribution.content.url }}#{{ distribution.md5_digest }}">{{
               distribution.filename }}</a><br>                                         
                                       
  [36m[22m[24m  yolapi/pypi/views.py[0m
    ‚ùØ‚ù± [1mpython.django.security.audit.csrf-exempt.no-csrf-exempt[0m
          Detected usage of @csrf_exempt, which indicates that there is no CSRF token set for this route. This
          could lead to an attacker manipulating the user's account and exfiltration of private data. Instead,
          create a function without this decorator.                                                           
          Details: https://sg.run/rd5e                                                                        
                                                                                                              
           18‚îÜ @require_http_methods(['HEAD', 'GET', 'POST'])
           19‚îÜ @csrf_exempt
           20‚îÜ @ensure_csrf_cookie
           21‚îÜ def index(request):
           22‚îÜ     if request.method == 'POST':
           23‚îÜ         return upload(request)
           24‚îÜ     return render(request, 'pypi/index.html', {
           25‚îÜ         'title': 'Package list',
           26‚îÜ         'packages': Package.objects.order_by('name').iterator(),
           27‚îÜ     })
            ‚ãÆ‚îÜ----------------------------------------
           30‚îÜ @require_POST
           31‚îÜ @csrf_exempt
           32‚îÜ @ensure_csrf_cookie
           33‚îÜ def upload(request):
           34‚îÜ     if not settings.DEBUG or 'REMOTE_USER' in request.META:
           35‚îÜ         allowed_uploaders = getattr(settings, 'PYPI_ALLOWED_UPLOADERS', [])
           36‚îÜ         if request.META.get('REMOTE_USER') not in allowed_uploaders:
           37‚îÜ             return HttpResponseForbidden('You are not an authorized uploader',
           38‚îÜ                                          content_type='text/plain')
           39‚îÜ     try:
             [hid 6 additional lines, adjust with --max-lines-per-finding] 
