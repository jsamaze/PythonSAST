                   
                   
┌─────────────────┐
│ 6 Code Findings │
└─────────────────┘
                                   
  [36m[22m[24m  example/login.py[0m
   ❯❯❱ [1mpython.flask.security.open-redirect.open-redirect[0m
          Data from request is passed to redirect(). This is an open redirect and could be exploited. Consider
          using 'url_for()' to generate links to known locations. If you must use a URL to unknown pages,     
          consider using 'urlparse()' or similar and checking if the 'netloc' property is the same as your    
          site's host name. See the references for more information.                                          
          Details: https://sg.run/kXe2                                                                        
                                                                                                              
           33┆ next = request.args.get("next", "/")
           34┆ data = wx_login.access_token(code)
           35┆ openid = data.openid
           36┆ resp = redirect(next)
                                 
  [36m[22m[24m  example/msg.py[0m
    ❯❱ [1mpython.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host[0m
          Running flask app with host 0.0.0.0 could expose the server publicly.
          Details: https://sg.run/eLby                                         
                                                                               
           56┆ app.run(host="0.0.0.0", port=9900)
                               
  [36m[22m[24m  weixin/mp.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(s.encode("utf-8"))
          171┆ sign = hashlib.sha1(s.encode("utf-8")).hexdigest().lower()
                                
  [36m[22m[24m  weixin/msg.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(s.encode("utf-8"))
           62┆ hsh = hashlib.sha1(s.encode("utf-8")).hexdigest()
   
    ❯❱ [1mpython.django.security.injection.reflected-data-httpresponse.reflected-data-httpresponse[0m
          Found user-controlled request data passed into HttpResponse. This could be vulnerable to XSS, 
          leading to attackers gaining access to user cookies and protected information. Ensure that the
          request data is properly escaped or sanitzed.                                                 
          Details: https://sg.run/BkvA                                                                  
                                                                                                        
          234┆ echostr = request.args.get('echostr', '')
          235┆ return HttpResponse(echostr)
   
    ❯❱ [1mpython.django.security.audit.xss.direct-use-of-httpresponse.direct-use-of-httpresponse[0m
          Detected data rendered directly to the end user via 'HttpResponse' or a similar object. This
          bypasses Django's built-in cross-site scripting (XSS) defenses and could result in an XSS   
          vulnerability. Use Django's template engine to safely render HTML.                          
          Details: https://sg.run/EknN                                                                
                                                                                                      
          235┆ return HttpResponse(echostr)
