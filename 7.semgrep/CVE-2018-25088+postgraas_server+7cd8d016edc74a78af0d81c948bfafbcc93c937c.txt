                    
                    
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ 18 Code Findings ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                                                               
  [36m[22m[24m  postgraas_server/backends/docker/postgres_instance_driver.py[0m
     ‚ù± [1mpython.lang.security.audit.network.bind.avoid-bind-to-all-interfaces[0m
          Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as
          it binds to all available interfaces. Consider instead getting correct address from an environment
          variable or configuration file.                                                                   
          Details: https://sg.run/rdln                                                                      
                                                                                                            
           16‚îÜ s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
           17‚îÜ s.bind(("", 0))
                                                                                        
  [36m[22m[24m  postgraas_server/backends/postgres_cluster/postgres_cluster_driver.py[0m
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           22‚îÜ cur.execute("SELECT 1 FROM pg_database WHERE datname='{}';".format(db_name))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           22‚îÜ cur.execute("SELECT 1 FROM pg_database WHERE datname='{}';".format(db_name))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           24‚îÜ cur.execute("SELECT 1 FROM pg_roles WHERE rolname='{}';".format(db_user))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           24‚îÜ cur.execute("SELECT 1 FROM pg_roles WHERE rolname='{}';".format(db_user))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           43‚îÜ cur.execute(create_role)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           43‚îÜ cur.execute(create_role)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           44‚îÜ cur.execute(grant_role)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           44‚îÜ cur.execute(grant_role)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           50‚îÜ cur.execute(create_database)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           50‚îÜ cur.execute(create_database)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           52‚îÜ cur.execute(drop_role)
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           52‚îÜ cur.execute(drop_role)
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           65‚îÜ cur.execute('''DROP DATABASE "{}";'''.format(db_name))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           65‚îÜ cur.execute('''DROP DATABASE "{}";'''.format(db_name))
   
    ‚ùØ‚ù± [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           75‚îÜ cur.execute('''DROP USER "{}";'''.format(get_normalized_username(username)))
   
   ‚ùØ‚ùØ‚ù± [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           75‚îÜ cur.execute('''DROP USER "{}";'''.format(get_normalized_username(username)))
                                                     
  [36m[22m[24m  postgraas_server/prometheus_app.py[0m
    ‚ùØ‚ù± [1mpython.flask.security.audit.app-run-param-config.avoid_app_run_with_bad_host[0m
          Running flask app with host 0.0.0.0 could expose the server publicly.
          Details: https://sg.run/eLby                                         
                                                                               
          107‚îÜ app.run(host='0.0.0.0', port=port, threaded=True)
