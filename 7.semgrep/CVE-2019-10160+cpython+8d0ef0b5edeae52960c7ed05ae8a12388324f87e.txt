                     
                     
┌───────────────────┐
│ 279 Code Findings │
└───────────────────┘
                                                              
  [36m[22m[24m  Doc/includes/sqlite3/simple_tableprinter.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           10┆ cur.execute(SELECT)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           10┆ cur.execute(SELECT)
                                                            
  [36m[22m[24m  Doc/tools/templates/customsourcelink.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            5┆ <li><a href="{{ pathto('bugs') }}">{% trans %}Report a Bug{% endtrans %}</a></li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            5┆ <li><a href="{{ pathto('bugs') }}">{% trans %}Report a Bug{% endtrans %}</a></li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            5┆ <li><a href="{{ pathto('bugs') }}">{% trans %}Report a Bug{% endtrans %}</a></li>
                                                    
  [36m[22m[24m  Doc/tools/templates/download.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           20┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-pdf-letter.zip">Download</a> (ca. 13
               MiB)</td>                                                                               
            ⋮┆----------------------------------------
           21┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-pdf-letter.tar.bz2">Download</a> (ca.
               13 MiB)</td>                                                                             
            ⋮┆----------------------------------------
           24┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-pdf-a4.zip">Download</a> (ca. 13
               MiB)</td>                                                                           
            ⋮┆----------------------------------------
           25┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-pdf-a4.tar.bz2">Download</a> (ca. 13
               MiB)</td>                                                                               
            ⋮┆----------------------------------------
           28┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-html.zip">Download</a> (ca. 9 MiB)</td>
            ⋮┆----------------------------------------
           29┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-html.tar.bz2">Download</a> (ca. 6
               MiB)</td>                                                                            
            ⋮┆----------------------------------------
           32┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-text.zip">Download</a> (ca. 3 MiB)</td>
            ⋮┆----------------------------------------
           33┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs-text.tar.bz2">Download</a> (ca. 2
               MiB)</td>                                                                            
            ⋮┆----------------------------------------
           36┆ <td><a href="{{ dlbase }}/python-{{ release }}-docs.epub">Download</a> (ca. 5 MiB)</td>
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           52┆ program. The <a href="http://www.info-zip.org">InfoZIP</a> unzip program can be
                                                        
  [36m[22m[24m  Doc/tools/templates/indexcontent.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           13┆ <p class="biglink"><a class="biglink" href="{{ pathto("whatsnew/" + version) }}">{% trans
               %}What's new in Python {{ version }}?{% endtrans %}</a><br/>                             
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           13┆ <p class="biglink"><a class="biglink" href="{{ pathto("whatsnew/" + version) }}">{% trans
               %}What's new in Python {{ version }}?{% endtrans %}</a><br/>                             
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           13┆ <p class="biglink"><a class="biglink" href="{{ pathto("whatsnew/" + version) }}">{% trans
               %}What's new in Python {{ version }}?{% endtrans %}</a><br/>                             
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ <span class="linkdescr"> {% trans whatsnew_index=pathto("whatsnew/index") %}or <a href="{{
               whatsnew_index }}">all "What's new" documents</a> since 2.0{% endtrans %}</span></p>      
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ <span class="linkdescr"> {% trans whatsnew_index=pathto("whatsnew/index") %}or <a href="{{
               whatsnew_index }}">all "What's new" documents</a> since 2.0{% endtrans %}</span></p>      
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ <span class="linkdescr"> {% trans whatsnew_index=pathto("whatsnew/index") %}or <a href="{{
               whatsnew_index }}">all "What's new" documents</a> since 2.0{% endtrans %}</span></p>      
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           15┆ <p class="biglink"><a class="biglink" href="{{ pathto("tutorial/index") }}">{% trans
               %}Tutorial{% endtrans %}</a><br/>                                                   
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           15┆ <p class="biglink"><a class="biglink" href="{{ pathto("tutorial/index") }}">{% trans
               %}Tutorial{% endtrans %}</a><br/>                                                   
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           15┆ <p class="biglink"><a class="biglink" href="{{ pathto("tutorial/index") }}">{% trans
               %}Tutorial{% endtrans %}</a><br/>                                                   
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           17┆ <p class="biglink"><a class="biglink" href="{{ pathto("library/index") }}">{% trans
               %}Library Reference{% endtrans %}</a><br/>                                         
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           17┆ <p class="biglink"><a class="biglink" href="{{ pathto("library/index") }}">{% trans
               %}Library Reference{% endtrans %}</a><br/>                                         
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           17┆ <p class="biglink"><a class="biglink" href="{{ pathto("library/index") }}">{% trans
               %}Library Reference{% endtrans %}</a><br/>                                         
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <p class="biglink"><a class="biglink" href="{{ pathto("reference/index") }}">{% trans
               %}Language Reference{% endtrans %}</a><br/>                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19┆ <p class="biglink"><a class="biglink" href="{{ pathto("reference/index") }}">{% trans
               %}Language Reference{% endtrans %}</a><br/>                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19┆ <p class="biglink"><a class="biglink" href="{{ pathto("reference/index") }}">{% trans
               %}Language Reference{% endtrans %}</a><br/>                                          
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           21┆ <p class="biglink"><a class="biglink" href="{{ pathto("using/index") }}">{% trans %}Python
               Setup and Usage{% endtrans %}</a><br/>                                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           21┆ <p class="biglink"><a class="biglink" href="{{ pathto("using/index") }}">{% trans %}Python
               Setup and Usage{% endtrans %}</a><br/>                                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           21┆ <p class="biglink"><a class="biglink" href="{{ pathto("using/index") }}">{% trans %}Python
               Setup and Usage{% endtrans %}</a><br/>                                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           23┆ <p class="biglink"><a class="biglink" href="{{ pathto("howto/index") }}">{% trans %}Python
               HOWTOs{% endtrans %}</a><br/>                                                             
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           23┆ <p class="biglink"><a class="biglink" href="{{ pathto("howto/index") }}">{% trans %}Python
               HOWTOs{% endtrans %}</a><br/>                                                             
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           23┆ <p class="biglink"><a class="biglink" href="{{ pathto("howto/index") }}">{% trans %}Python
               HOWTOs{% endtrans %}</a><br/>                                                             
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           26┆ <p class="biglink"><a class="biglink" href="{{ pathto("installing/index") }}">{% trans
               %}Installing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           26┆ <p class="biglink"><a class="biglink" href="{{ pathto("installing/index") }}">{% trans
               %}Installing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           26┆ <p class="biglink"><a class="biglink" href="{{ pathto("installing/index") }}">{% trans
               %}Installing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           28┆ <p class="biglink"><a class="biglink" href="{{ pathto("distributing/index") }}">{% trans
               %}Distributing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           28┆ <p class="biglink"><a class="biglink" href="{{ pathto("distributing/index") }}">{% trans
               %}Distributing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           28┆ <p class="biglink"><a class="biglink" href="{{ pathto("distributing/index") }}">{% trans
               %}Distributing Python Modules{% endtrans %}</a><br/>                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           30┆ <p class="biglink"><a class="biglink" href="{{ pathto("extending/index") }}">{% trans
               %}Extending and Embedding{% endtrans %}</a><br/>                                     
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           30┆ <p class="biglink"><a class="biglink" href="{{ pathto("extending/index") }}">{% trans
               %}Extending and Embedding{% endtrans %}</a><br/>                                     
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           30┆ <p class="biglink"><a class="biglink" href="{{ pathto("extending/index") }}">{% trans
               %}Extending and Embedding{% endtrans %}</a><br/>                                     
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           32┆ <p class="biglink"><a class="biglink" href="{{ pathto("c-api/index") }}">{% trans
               %}Python/C API{% endtrans %}</a><br/>                                            
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           32┆ <p class="biglink"><a class="biglink" href="{{ pathto("c-api/index") }}">{% trans
               %}Python/C API{% endtrans %}</a><br/>                                            
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           32┆ <p class="biglink"><a class="biglink" href="{{ pathto("c-api/index") }}">{% trans
               %}Python/C API{% endtrans %}</a><br/>                                            
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           34┆ <p class="biglink"><a class="biglink" href="{{ pathto("faq/index") }}">{% trans %}FAQs{%
               endtrans %}</a><br/>                                                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           34┆ <p class="biglink"><a class="biglink" href="{{ pathto("faq/index") }}">{% trans %}FAQs{%
               endtrans %}</a><br/>                                                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           34┆ <p class="biglink"><a class="biglink" href="{{ pathto("faq/index") }}">{% trans %}FAQs{%
               endtrans %}</a><br/>                                                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           42┆ <p class="biglink"><a class="biglink" href="{{ pathto("py-modindex") }}">{% trans %}Global
               Module Index{% endtrans %}</a><br/>                                                       
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           42┆ <p class="biglink"><a class="biglink" href="{{ pathto("py-modindex") }}">{% trans %}Global
               Module Index{% endtrans %}</a><br/>                                                       
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           42┆ <p class="biglink"><a class="biglink" href="{{ pathto("py-modindex") }}">{% trans %}Global
               Module Index{% endtrans %}</a><br/>                                                       
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           44┆ <p class="biglink"><a class="biglink" href="{{ pathto("genindex") }}">{% trans %}General
               Index{% endtrans %}</a><br/>                                                            
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           44┆ <p class="biglink"><a class="biglink" href="{{ pathto("genindex") }}">{% trans %}General
               Index{% endtrans %}</a><br/>                                                            
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           44┆ <p class="biglink"><a class="biglink" href="{{ pathto("genindex") }}">{% trans %}General
               Index{% endtrans %}</a><br/>                                                            
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           46┆ <p class="biglink"><a class="biglink" href="{{ pathto("glossary") }}">{% trans %}Glossary{%
               endtrans %}</a><br/>                                                                       
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           46┆ <p class="biglink"><a class="biglink" href="{{ pathto("glossary") }}">{% trans %}Glossary{%
               endtrans %}</a><br/>                                                                       
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           46┆ <p class="biglink"><a class="biglink" href="{{ pathto("glossary") }}">{% trans %}Glossary{%
               endtrans %}</a><br/>                                                                       
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           49┆ <p class="biglink"><a class="biglink" href="{{ pathto("search") }}">{% trans %}Search
               page{% endtrans %}</a><br/>                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           49┆ <p class="biglink"><a class="biglink" href="{{ pathto("search") }}">{% trans %}Search
               page{% endtrans %}</a><br/>                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           49┆ <p class="biglink"><a class="biglink" href="{{ pathto("search") }}">{% trans %}Search
               page{% endtrans %}</a><br/>                                                          
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           51┆ <p class="biglink"><a class="biglink" href="{{ pathto("contents") }}">{% trans %}Complete
               Table of Contents{% endtrans %}</a><br/>                                                 
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           51┆ <p class="biglink"><a class="biglink" href="{{ pathto("contents") }}">{% trans %}Complete
               Table of Contents{% endtrans %}</a><br/>                                                 
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           51┆ <p class="biglink"><a class="biglink" href="{{ pathto("contents") }}">{% trans %}Complete
               Table of Contents{% endtrans %}</a><br/>                                                 
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           59┆ <p class="biglink"><a class="biglink" href="{{ pathto("bugs") }}">{% trans %}Reporting
               bugs{% endtrans %}</a></p>                                                            
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           59┆ <p class="biglink"><a class="biglink" href="{{ pathto("bugs") }}">{% trans %}Reporting
               bugs{% endtrans %}</a></p>                                                            
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           59┆ <p class="biglink"><a class="biglink" href="{{ pathto("bugs") }}">{% trans %}Reporting
               bugs{% endtrans %}</a></p>                                                            
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           61┆ <p class="biglink"><a class="biglink" href="{{ pathto("about") }}">{% trans %}About the
               documentation{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           61┆ <p class="biglink"><a class="biglink" href="{{ pathto("about") }}">{% trans %}About the
               documentation{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           61┆ <p class="biglink"><a class="biglink" href="{{ pathto("about") }}">{% trans %}About the
               documentation{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           63┆ <p class="biglink"><a class="biglink" href="{{ pathto("license") }}">{% trans %}History and
               License of Python{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           63┆ <p class="biglink"><a class="biglink" href="{{ pathto("license") }}">{% trans %}History and
               License of Python{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           63┆ <p class="biglink"><a class="biglink" href="{{ pathto("license") }}">{% trans %}History and
               License of Python{% endtrans %}</a></p>                                                    
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           64┆ <p class="biglink"><a class="biglink" href="{{ pathto("copyright") }}">{% trans
               %}Copyright{% endtrans %}</a></p>                                              
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           64┆ <p class="biglink"><a class="biglink" href="{{ pathto("copyright") }}">{% trans
               %}Copyright{% endtrans %}</a></p>                                              
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           64┆ <p class="biglink"><a class="biglink" href="{{ pathto("copyright") }}">{% trans
               %}Copyright{% endtrans %}</a></p>                                              
                                                        
  [36m[22m[24m  Doc/tools/templates/indexsidebar.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
            2┆ <p><a href="{{ pathto('download') }}">{% trans %}Download these documents{% endtrans
               %}</a></p>                                                                          
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
            2┆ <p><a href="{{ pathto('download') }}">{% trans %}Download these documents{% endtrans
               %}</a></p>                                                                          
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
            2┆ <p><a href="{{ pathto('download') }}">{% trans %}Download these documents{% endtrans
               %}</a></p>                                                                          
                                                  
  [36m[22m[24m  Doc/tools/templates/layout.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <a href="{{ pathto('index') }}">{% trans %}Documentation {% endtrans %}</a>{{ reldelim1 }}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19┆ <a href="{{ pathto('index') }}">{% trans %}Documentation {% endtrans %}</a>{{ reldelim1 }}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19┆ <a href="{{ pathto('index') }}">{% trans %}Documentation {% endtrans %}</a>{{ reldelim1 }}
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           21┆ <a href="{{ pathto('index') }}">{{ shorttitle }}</a>{{ reldelim1 }}
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           21┆ <a href="{{ pathto('index') }}">{{ shorttitle }}</a>{{ reldelim1 }}
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           21┆ <a href="{{ pathto('index') }}">{{ shorttitle }}</a>{{ reldelim1 }}
   
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           27┆ <link rel="canonical" href="https://docs.python.org/3/{{pagename}}.html" />
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
           30┆ <script type="text/javascript" src="{{ pathto('_static/switchers.js', 1) }}"></script>{%
               endif %}                                                                                
            ⋮┆----------------------------------------
           32┆ <script type="text/javascript" src="{{ pathto('_static/changelog_search.js', 1)
               }}"></script>{% endif %}                                                       
                                       
  [36m[22m[24m  Doc/whatsnew/2.4.rst[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-etc-shadow.detected-etc-shadow[0m
          linux shadow file detected  
          Details: https://sg.run/4ylL
                                      
          370┆ root:*:0:0:System Administrator:/var/root:/bin/tcsh
                             
  [36m[22m[24m  Lib/bdb.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          587┆ exec(cmd, globals, locals)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          607┆ return eval(expr, globals, locals)
            ⋮┆----------------------------------------
          839┆ val = eval(b.cond, frame.f_globals, frame.f_locals)
                                  
  [36m[22m[24m  Lib/cProfile.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           48┆ marshal.dump(self.stats, f)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          100┆ exec(cmd, globals, locals)
                              
  [36m[22m[24m  Lib/code.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           90┆ exec(code, self.locals)
                                              
  [36m[22m[24m  Lib/collections/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          394┆ exec(s, namespace)
                                     
  [36m[22m[24m  Lib/dataclasses.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          392┆ exec(txt, globals, locals)
                                                    
  [36m[22m[24m  Lib/distutils/command/register.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           89┆ response = urllib.request.urlopen(url)
                                                  
  [36m[22m[24m  Lib/distutils/command/upload.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          175┆ result = urlopen(request)
                                        
  [36m[22m[24m  Lib/distutils/core.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          215┆ exec(f.read(), g)
                                                   
  [36m[22m[24m  Lib/distutils/cygwinccompiler.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mPopen(cmd, shell=False, stdout=PIPE)
          382┆ out = Popen(cmd, shell=True, stdout=PIPE).stdout
                                             
  [36m[22m[24m  Lib/distutils/sysconfig.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          479┆ func = globals().get("_init_" + os.name)
                                 
  [36m[22m[24m  Lib/doctest.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1328┆ exec(compile(example.source, filename, "single",
          1329┆              compileflags, 1), test.globs)
            ⋮┆----------------------------------------
          2621┆ exec(src, globs, globs)
                                 
  [36m[22m[24m  Lib/gettext.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          200┆ exec('''if True:
          201┆     def func(n):
          202┆         if not isinstance(n, int):
          203┆             n = _as_int(n)
          204┆         return int(%s)
          205┆     ''' % result, ns)
                                              
  [36m[22m[24m  Lib/idlelib/autocomplete.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          192┆ bigl = eval("dir()", namespace)
            ⋮┆----------------------------------------
          195┆ smalll = sorted(eval("__all__", namespace))
            ⋮┆----------------------------------------
          227┆ return eval(name, {**sys.modules, **__main__.__dict__})
                                         
  [36m[22m[24m  Lib/idlelib/calltip.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          108┆ return eval(expression, namespace)  # Only protect user code.
                                          
  [36m[22m[24m  Lib/idlelib/debugobj.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           35┆ value = eval(text)
                                        
  [36m[22m[24m  Lib/idlelib/editor.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          1072┆ mod = importlib.import_module('.' + fname, package=__package__)
            ⋮┆----------------------------------------
          1074┆ mod = importlib.import_module(fname)
                                        
  [36m[22m[24m  Lib/idlelib/help.html[0m
    ❯❱ [1mhtml.security.audit.missing-integrity.missing-integrity[0m
          This tag is missing an 'integrity' subresource integrity attribute. The 'integrity' attribute allows
          for the browser to verify that externally hosted files (for example from a CDN) are delivered       
          without unexpected manipulation. Without this attribute, if an attacker can modify the externally   
          hosted resource, this could lead to XSS and other types of attacks. To prevent this, include the    
          base64-encoded cryptographic hash of the resource (file) you’re telling the browser to fetch in the 
          'integrity' attribute for all externally hosted files.                                              
          Details: https://sg.run/krXA                                                                        
                                                                                                              
           17┆ <script async="async" type="text/javascript"                                        
               src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.1/MathJax.js?config=TeX-AMS-
               MML_HTMLorMML"></script>                                                            
            ⋮┆----------------------------------------
           30┆ <link rel="canonical" href="https://docs.python.org/3/library/idle.html" />
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          950┆ Created using <a href="http://sphinx.pocoo.org/">Sphinx</a> 1.8.1.
                                                 
  [36m[22m[24m  Lib/idlelib/idle_test/htest.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          359┆ test_spec = globals()[test.__name__ + '_spec']
   
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          368┆ mod = import_module('idlelib.' + test_spec['file'])
                                                         
  [36m[22m[24m  Lib/idlelib/idle_test/test_squeezer.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          145┆ text = eval(text_code)
                                         
  [36m[22m[24m  Lib/idlelib/pyshell.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          281┆ breakpoint_linenumbers = eval(line[len(filename)+1:])
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          758┆ exec(code, self.locals)
            ⋮┆----------------------------------------
          778┆ exec(code, self.locals)
                                     
  [36m[22m[24m  Lib/idlelib/rpc.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           47┆ co = marshal.loads(ms)
            ⋮┆----------------------------------------
           54┆ ms = marshal.dumps(co)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          388┆ message = pickle.loads(packet)
                                     
  [36m[22m[24m  Lib/idlelib/run.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          483┆ exec(code, self.locals)
                                 
  [36m[22m[24m  Lib/imaplib.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(self.command,bufsize=DEFAULT_BUFFER_SIZE,stdin=subprocess.PIPE,
              stdout=subprocess.PIPE,shell=False, close_fds=True)                                        
          1339┆ self.process = subprocess.Popen(self.command,
          1340┆     bufsize=DEFAULT_BUFFER_SIZE,
          1341┆     stdin=subprocess.PIPE, stdout=subprocess.PIPE,
          1342┆     shell=True, close_fds=True)
                                              
  [36m[22m[24m  Lib/importlib/_bootstrap.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          827┆ exec(code, module.__dict__)
                                                       
  [36m[22m[24m  Lib/importlib/_bootstrap_external.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          575┆ code = marshal.loads(data)
            ⋮┆----------------------------------------
          592┆ data.extend(marshal.dumps(code))
            ⋮┆----------------------------------------
          603┆ data.extend(marshal.dumps(code))
                                                     
  [36m[22m[24m  Lib/importlib/metadata/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           72┆ module = import_module(match.group('module'))
                                             
  [36m[22m[24m  Lib/importlib/resources.py[0m
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
           47┆ module = import_module(package)
                                 
  [36m[22m[24m  Lib/inspect.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          2004┆ value = eval(s, module_dict)
            ⋮┆----------------------------------------
          2007┆ value = eval(s, sys_module_dict)
   
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          3115┆ obj = module = importlib.import_module(mod_name)
                                            
  [36m[22m[24m  Lib/lib2to3/pgen2/conv.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          187┆ rawbitset = eval(mo.group(1))
            ⋮┆----------------------------------------
          213┆ y = eval(y)
                                               
  [36m[22m[24m  Lib/lib2to3/pgen2/grammar.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           90┆ pickle.dump(self.__dict__, f, pickle.HIGHEST_PROTOCOL)
            ⋮┆----------------------------------------
           95┆ d = pickle.load(f)
            ⋮┆----------------------------------------
          100┆ self.__dict__.update(pickle.loads(pkl))
                                            
  [36m[22m[24m  Lib/lib2to3/pgen2/pgen.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           88┆ value = eval(label)
                                        
  [36m[22m[24m  Lib/logging/config.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          138┆ klass = eval(klass, vars(logging))
            ⋮┆----------------------------------------
          142┆ args = eval(args, vars(logging))
            ⋮┆----------------------------------------
          144┆ kwargs = eval(kwargs, vars(logging))
                                          
  [36m[22m[24m  Lib/logging/handlers.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          603┆ s = pickle.dumps(d, 1)
   
    ❯❱ [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          1167┆ h = http.client.HTTPSConnection(host, context=self.context)
                                      
  [36m[22m[24m  Lib/modulefinder.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          351┆ co = marshal.loads(memoryview(data)[16:])
                                                    
  [36m[22m[24m  Lib/multiprocessing/connection.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          789┆ import xmlrpc.client as xmlrpclib
            ⋮┆----------------------------------------
          795┆ import xmlrpc.client as xmlrpclib
                                                  
  [36m[22m[24m  Lib/multiprocessing/managers.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          978┆ exec('''def %s(self, /, *args, **kwds):
          979┆ return self._callmethod(%r, args, kwds)''' % (meth, meth), dic)
                                                      
  [36m[22m[24m  Lib/multiprocessing/sharedctypes.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          153┆ exec(template % ((name,)*7), d)
                                  
  [36m[22m[24m  Lib/optparse.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          879┆ exec(open(filename).read(), vars)
                            
  [36m[22m[24m  Lib/os.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          102┆ _set.add(_globals[fn])
   
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdout=subprocess.PIPE,bufsize=buffering)
          980┆ proc = subprocess.Popen(cmd,
          981┆                         shell=True,
          982┆                         stdout=subprocess.PIPE,
          983┆                         bufsize=buffering)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd,shell=False,stdin=subprocess.PIPE,bufsize=buffering)
          986┆ proc = subprocess.Popen(cmd,
          987┆                         shell=True,
          988┆                         stdin=subprocess.PIPE,
          989┆                         bufsize=buffering)
                             
  [36m[22m[24m  Lib/pdb.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          376┆ exec(code, globals, locals)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          650┆ func = eval(arg,
          651┆             self.curframe.f_globals,
          652┆             self.curframe_locals)
            ⋮┆----------------------------------------
          1158┆ return eval(arg, self.curframe.f_globals, self.curframe_locals)
            ⋮┆----------------------------------------
          1167┆ return eval(arg, self.curframe.f_globals, self.curframe_locals)
            ⋮┆----------------------------------------
          1169┆ return eval(arg, frame.f_globals, frame.f_locals)
                                
  [36m[22m[24m  Lib/pickle.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          1797┆ obj = load(f)
                                     
  [36m[22m[24m  Lib/pickletools.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          892┆ return decode_long(data)
            ⋮┆----------------------------------------
          926┆ return decode_long(data)
            ⋮┆----------------------------------------
          2367┆ pickler = pickle._Pickler(out, proto)
                                 
  [36m[22m[24m  Lib/pkgutil.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           50┆ return marshal.load(stream)
   
    ❯❱ [1mpython.lang.security.audit.non-literal-import.non-literal-import[0m
          Untrusted user input in `importlib.import_module()` function allows an attacker to load arbitrary
          code. Avoid dynamic values in `importlib.import_module()` or use a whitelist to prevent running  
          untrusted code.                                                                                  
          Details: https://sg.run/y6Jk                                                                     
                                                                                                           
          447┆ pkg = importlib.import_module(pkg_name)
                                  
  [36m[22m[24m  Lib/platform.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'check_output' with 'shell=True'. This is dangerous because this call 
          will spawn the command using a shell process. Doing so propagates current shell settings and      
          variables, which makes it much easier for a malicious actor to execute commands. Use 'shell=False'
          instead.                                                                                          
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.check_output(cmd,stderr=subprocess.DEVNULL,text=True,shell=False)
          281┆ info = subprocess.check_output(cmd,
          282┆                                stderr=subprocess.DEVNULL,
          283┆                                text=True,
          284┆                                shell=True)
                                 
  [36m[22m[24m  Lib/profile.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          394┆ marshal.dump(self.stats, f)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          422┆ exec(cmd, globals, locals)
                                
  [36m[22m[24m  Lib/pstats.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          124┆ self.stats = marshal.load(f)
            ⋮┆----------------------------------------
          179┆ marshal.dump(self.stats, f)
                               
  [36m[22m[24m  Lib/pydoc.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0msubprocess.Popen(cmd, shell=False, stdin=subprocess.PIPE)
          1510┆ proc = subprocess.Popen(cmd, shell=True, stdin=subprocess.PIPE)
   
    ❯❱ [1mpython.django.security.injection.code.user-eval.user-eval[0m
          Found user data in a call to 'eval'. This is extremely dangerous because it can enable an attacker
          to execute arbitrary remote code on the system. Instead, refactor your code to not use 'eval' and 
          instead use a safe library for the specific functionality you need.                               
          Details: https://sg.run/PJDW                                                                      
                                                                                                            
          1952┆ request = request.strip()
          1953┆ if request == 'keywords': self.listkeywords()
          1954┆ elif request == 'symbols': self.listsymbols()
          1955┆ elif request == 'topics': self.listtopics()
          1956┆ elif request == 'modules': self.listmodules()
          1957┆ elif request[:8] == 'modules ':
          1958┆     self.listmodules(request.split()[1])
          1959┆ elif request in self.symbols: self.showsymbol(request)
          1960┆ elif request in ['True', 'False', 'None']:
          1961┆     # special case these keywords since they are objects too
             [hid 5 additional lines, adjust with --max-lines-per-finding] 
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          1962┆ doc(eval(request), 'Help on %s:')
                                     
  [36m[22m[24m  Lib/rlcompleter.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          148┆ thisobject = eval(expr, self.namespace)
                               
  [36m[22m[24m  Lib/runpy.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           85┆ exec(code, run_globals)
                                
  [36m[22m[24m  Lib/shelve.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          114┆ value = Unpickler(f).load()
            ⋮┆----------------------------------------
          123┆ p = Pickler(f, self._protocol)
            ⋮┆----------------------------------------
          195┆ return (key.decode(self.keyencoding), Unpickler(f).load())
            ⋮┆----------------------------------------
          200┆ return (key.decode(self.keyencoding), Unpickler(f).load())
            ⋮┆----------------------------------------
          205┆ return (key.decode(self.keyencoding), Unpickler(f).load())
            ⋮┆----------------------------------------
          210┆ return (key.decode(self.keyencoding), Unpickler(f).load())
            ⋮┆----------------------------------------
          215┆ return (key.decode(self.keyencoding), Unpickler(f).load())
                              
  [36m[22m[24m  Lib/site.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          168┆ exec(line)
                                      
  [36m[22m[24m  Lib/sqlite3/dump.py[0m
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           50┆ res = cu.execute('PRAGMA table_info("{0}")'.format(table_name_ident))
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           50┆ res = cu.execute('PRAGMA table_info("{0}")'.format(table_name_ident))
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
           55┆ query_res = cu.execute(q)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
           55┆ query_res = cu.execute(q)
                             
  [36m[22m[24m  Lib/ssl.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-transport.ssl.no-set-ciphers.no-set-ciphers[0m
          The 'ssl' module disables insecure cipher suites by default. Therefore, use of 'set_ciphers()'   
          should only be used when you have very specialized requirements. Otherwise, you risk lowering the
          security of the SSL channel.                                                                     
          Details: https://sg.run/0Q0v                                                                     
                                                                                                           
          1393┆ context.set_ciphers(ciphers)
                                  
  [36m[22m[24m  Lib/tempfile.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o700` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          789┆ _os.chmod(path, 0o700)
                                
  [36m[22m[24m  Lib/timeit.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          132┆ exec(code, global_ns, local_ns)
                                          
  [36m[22m[24m  Lib/tkinter/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          2321┆ exec('from tkinter import *', dir)
            ⋮┆----------------------------------------
          2325┆ exec(open(class_py).read(), dir)
            ⋮┆----------------------------------------
          2329┆ exec(open(base_py).read(), dir)
                               
  [36m[22m[24m  Lib/trace.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          173┆ counts, calledfuncs, callers = pickle.load(f)
            ⋮┆----------------------------------------
          289┆ pickle.dump((self.counts, self.calledfuncs, self.callers),
          290┆             open(self.outfile, 'wb'), 1)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          448┆ exec(cmd, globals, locals)
                                     
  [36m[22m[24m  Lib/tracemalloc.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          405┆ pickle.dump(self, fp, pickle.HIGHEST_PROTOCOL)
            ⋮┆----------------------------------------
          413┆ return pickle.load(fp)
                                
  [36m[22m[24m  Lib/turtle.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          188┆ value = eval(value)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          325┆ exec(execString, d)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          3836┆ docsdict[key] = eval(key).__doc__
            ⋮┆----------------------------------------
          3839┆ docsdict[key] = eval(key).__doc__
            ⋮┆----------------------------------------
          3867┆ eval(key).__doc__ = docsdict[key]
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          3967┆ exec(defstr, globals())
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          3968┆ globals()[methodname].__doc__ = docrevise(method.__doc__)
                                
  [36m[22m[24m  Lib/typing.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          518┆ eval(self.__forward_code__, globalns, localns),
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          780┆ origin = globals()[self._name]
                                       
  [36m[22m[24m  Lib/unittest/mock.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          181┆ exec (src, context)
                                        
  [36m[22m[24m  Lib/urllib/request.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(b)
          1113┆ dig = hashlib.sha1(b).hexdigest()
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(x.encode("ascii"))
          1181┆ H = lambda x: hashlib.sha1(x.encode("ascii")).hexdigest()
   
    ❯❱ [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          1959┆ return http.client.HTTPSConnection(host,
          1960┆                                key_file=self.key_file,
          1961┆                                cert_file=self.cert_file)
   
    ❯❱ [1mpython.lang.security.audit.ftplib.ftplib[0m
          FTP does not encrypt communications by default. This can lead to sensitive data being exposed.
          Ensure use of FTP here does not expose sensitive data.                                        
          Details: https://sg.run/7oyZ                                                                  
                                                                                                        
          2383┆ self.ftp = ftplib.FTP()
   
    ❯❱ [1mpython.lang.security.audit.insecure-transport.ftplib.use-ftp-tls.use-ftp-tls[0m
          The 'FTP' class sends information unencrypted. Consider using the 'FTP_TLS' class instead.
          Details: https://sg.run/AvPp                                                              
                                                                                                    
           [32m▶▶┆ Autofix ▶ [0mftplib.FTP_TLS(, context=ssl.create_default_context())
          2383┆ self.ftp = ftplib.FTP()
                                            
  [36m[22m[24m  Lib/urllib/robotparser.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           62┆ f = urllib.request.urlopen(self.url)
                              
  [36m[22m[24m  Lib/uuid.py[0m
   ❯❯❱ [1mpython.lang.compatibility.python36.python36-compatibility-Popen2[0m
          the `encoding` argument to Popen is only available on Python 3.6+
          Details: https://sg.run/x1Dg                                     
                                                                           
          500┆ proc = subprocess.Popen([os.path.join(dir, 'ipconfig'), '/all'],
          501┆                         stdout=subprocess.PIPE,
          502┆                         encoding="oem")
   
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(namespace.bytes + bytes(name, "utf-8"))
          764┆ hash = sha1(namespace.bytes + bytes(name, "utf-8")).digest()
                                       
  [36m[22m[24m  Lib/venv/__init__.py[0m
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `0o755` are widely permissive and grant access to more people than may be       
          necessary. A good default is `0o644` which gives read and write access to yourself and read access
          to everyone else.                                                                                 
          Details: https://sg.run/AXY4                                                                      
                                                                                                            
          218┆ os.chmod(path, 0o755)
            ⋮┆----------------------------------------
          226┆ os.chmod(path, 0o755)
                                  
  [36m[22m[24m  Lib/warnings.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          256┆ cat = eval(category)
                                            
  [36m[22m[24m  Lib/xml/dom/xmlbuilder.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          195┆ fp = urllib.request.urlopen(input.systemId)
                                          
  [36m[22m[24m  Lib/xml/sax/saxutils.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          365┆ f = urllib.request.urlopen(source.getSystemId())
                                       
  [36m[22m[24m  Lib/xmlrpc/client.py[0m
    ❯❱ [1mpython.lang.security.audit.httpsconnection-detected.httpsconnection-detected[0m
          The HTTPSConnection API has changed frequently with minor releases of Python. Ensure you are using  
          the API for your version of Python securely. For example, Python 3 versions prior to 3.4.3 will not 
          verify SSL certificates by default. See                                                             
          https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection for more information.
          Details: https://sg.run/8yby                                                                        
                                                                                                              
          1368┆ self._connection = host, http.client.HTTPSConnection(chost,
          1369┆     None, context=self.context, **(x509 or {}))
                                       
  [36m[22m[24m  Lib/xmlrpc/server.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
          107┆ from xmlrpc.client import Fault, dumps, loads, gzip_encode, gzip_decode
                                   
  [36m[22m[24m  Lib/zipimport.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          259┆ exec(code, mod.__dict__)
   
   ❯❯❱ [1mpython.lang.compatibility.python37.python37-compatibility-importlib3[0m
          Found usage of 'importlib.abc.ResourceReader'. This module is only available on Python 3.7+ and is
          therefore not backwards compatible. Instead, use another loader.                                  
          Details: https://sg.run/Zv2o                                                                      
                                                                                                            
          284┆ from importlib.abc import ResourceReader
   
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          628┆ code = marshal.loads(data[16:])
                                                     
  [36m[22m[24m  Mac/BuildScript/build-installer.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          758┆ fpIn = urllib_request.urlopen(url)
   
    ❯❱ [1mpython.lang.security.audit.insecure-file-permissions.insecure-file-permissions[0m
          These permissions `stat.S_IMODE(st.st_mode) | stat.S_IWGRP` are widely permissive and grant access  
          to more people than may be necessary. A good default is `0o644` which gives read and write access to
          yourself and read access to everyone else.                                                          
          Details: https://sg.run/AXY4                                                                        
                                                                                                              
          1185┆ os.chmod(p, stat.S_IMODE(st.st_mode) | stat.S_IWGRP)
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1271┆ exec(data)
                                                 
  [36m[22m[24m  Modules/_ctypes/_ctypes_test.c[0m
    ❯❱ [1mc.lang.security.insecure-use-strtok-fn.insecure-use-strtok-fn[0m
          Avoid using 'strtok()'. This function directly modifies the first argument buffer, permanently
          erasing the delimiter character. Use 'strtok_r()' instead.                                    
          Details: https://sg.run/LwqG                                                                  
                                                                                                        
          122┆ return strtok(token, delim);
                                                    
  [36m[22m[24m  PC/layout/support/appxmanifest.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xml-parse.use-defused-xml-parse[0m
          The native Python `xml` library is vulnerable to XML External Entity (XXE) attacks.  These attacks
          can leak confidential data and "XML bombs" can cause denial of service. Do not use this library to
          parse untrusted input. Instead  the Python documentation recommends using `defusedxml`.           
          Details: https://sg.run/n3jG                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mdefusedxml.etree.ElementTree.parse(f)
          220┆ xml = ET.parse(f)
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mdefusedxml.etree.ElementTree.parse(io.StringIO(APPXMANIFEST_TEMPLATE))
          402┆ xml = ET.parse(io.StringIO(APPXMANIFEST_TEMPLATE))
                                          
  [36m[22m[24m  PCbuild/get_external.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           17┆ filename, headers = urlretrieve(
           18┆     url,
           19┆     zip_dir / f'{commit_hash}.zip',
           20┆     reporthook=reporthook,
           21┆ )
                                         
  [36m[22m[24m  PCbuild/urlretrieve.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           39┆ urlretrieve(URL, FILENAME)
                                      
  [36m[22m[24m  Parser/pgen/pgen.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          107┆ value = eval(label)
                                           
  [36m[22m[24m  Tools/ccbench/ccbench.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(s)
          131┆ hashlib.sha1(s).digest()
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          376┆ send_time = eval(line)
            ⋮┆----------------------------------------
          485┆ remote_addr = eval(s.partition('#')[0])
            ⋮┆----------------------------------------
          565┆ kwargs = eval(options.latclient)
            ⋮┆----------------------------------------
          570┆ kwargs = eval(options.bwclient)
                                         
  [36m[22m[24m  Tools/clinic/clinic.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mhashlib.sha256(input.encode('utf-8'))
          2035┆ s = hashlib.sha1(input.encode('utf-8')).hexdigest()
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          2050┆ exec(block.input)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          4388┆ value = eval(default)
            ⋮┆----------------------------------------
          4433┆ value = eval(py_default)
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          4964┆ cls = module[name]
                                      
  [36m[22m[24m  Tools/demo/mcast.py[0m
     ❱ [1mpython.lang.security.audit.network.bind.avoid-bind-to-all-interfaces[0m
          Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as
          it binds to all available interfaces. Consider instead getting correct address from an environment
          variable or configuration file.                                                                   
          Details: https://sg.run/rdln                                                                      
                                                                                                            
           56┆ s = socket.socket(addrinfo[0], socket.SOCK_DGRAM)
           57┆
           58┆ # Allow multiple copies of this program on one machine
           59┆ # (not strictly needed)
           60┆ s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
           61┆
           62┆ # Bind it to the port
           63┆ s.bind(('', MYPORT))
                                         
  [36m[22m[24m  Tools/demo/rpythond.py[0m
     ❱ [1mpython.lang.security.audit.network.bind.avoid-bind-to-all-interfaces[0m
          Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as
          it binds to all available interfaces. Consider instead getting correct address from an environment
          variable or configuration file.                                                                   
          Details: https://sg.run/rdln                                                                      
                                                                                                            
           24┆ s = socket(AF_INET, SOCK_STREAM)
           25┆ s.bind(('', port))
   
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           46┆ exec(request, {}, {})
                                    
  [36m[22m[24m  Tools/demo/ss1.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          392┆ self.value = eval(self.translated, ns)
                                             
  [36m[22m[24m  Tools/freeze/makefreeze.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           46┆ str = marshal.dumps(m.__code__)
                                          
  [36m[22m[24m  Tools/i18n/pygettext.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          241┆ return eval(s, {'__builtins__':{}}, {})
                                     
  [36m[22m[24m  Tools/msi/purge.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           73┆ with urlopen(Request(u, method='PURGE', headers={'Fastly-Soft-Purge': 1})) as r:
                                              
  [36m[22m[24m  Tools/pynche/Switchboard.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
           65┆ self.__optiondb = marshal.load(fp)
            ⋮┆----------------------------------------
          124┆ marshal.dump(self.__optiondb, fp)
                                            
  [36m[22m[24m  Tools/scripts/checkpip.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           16┆ data = json.loads(urllib.request.urlopen(
           17┆     "https://pypi.org/pypi/{}/json".format(project),
           18┆     cadefault=True,
           19┆ ).read().decode("utf8"))
                                             
  [36m[22m[24m  Tools/scripts/db2pickle.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          127┆ pickle.dump((k, db[k]), pfile, 1==1)
                                          
  [36m[22m[24m  Tools/scripts/dutree.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           12┆ size = eval(line[:i])
                                                       
  [36m[22m[24m  Tools/scripts/find_recursionlimit.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           89┆ _pickle.Pickler(io.BytesIO(), protocol=-1).dump(l)
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          104┆ test_func = globals()[test_func_name]
                                                     
  [36m[22m[24m  Tools/scripts/generate_opcode_h.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           47┆ exec(code, opcode)
                                                  
  [36m[22m[24m  Tools/scripts/generate_token.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           32┆ string = eval(string)
   
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          262┆ make = globals()['make_' + op]
                                                          
  [36m[22m[24m  Tools/scripts/get-remote-certificate.py[0m
   ❯❯❱ [1mpython.lang.security.audit.subprocess-shell-true.subprocess-shell-true[0m
          Found 'subprocess' function 'Popen' with 'shell=True'. This is dangerous because this call will   
          spawn the command using a shell process. Doing so propagates current shell settings and variables,
          which makes it much easier for a malicious actor to execute commands. Use 'shell=False' instead.  
          Details: https://sg.run/J92w                                                                      
                                                                                                            
           [32m▶▶┆ Autofix ▶ [0mPopen(cmd, stdout=PIPE, stderr=STDOUT, shell=False)
           19┆ proc = Popen(cmd, stdout=PIPE, stderr=STDOUT, shell=True)
                                        
  [36m[22m[24m  Tools/scripts/h2py.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          128┆ exec(stmt, env)
            ⋮┆----------------------------------------
          140┆ exec(stmt, env)
                                                        
  [36m[22m[24m  Tools/scripts/parse_html5_entities.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
           21┆ with urlopen(url) as f:
                                             
  [36m[22m[24m  Tools/scripts/pickle2db.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          136┆ (key, val) = pickle.load(pfile)
                                           
  [36m[22m[24m  Tools/scripts/pindent.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          494┆ action = eval(action + '_filter')
            ⋮┆----------------------------------------
          497┆ action = eval(action + '_file')
                                             
  [36m[22m[24m  Tools/ssl/multissltests.py[0m
   ❯❯❱ [1mtrailofbits.python.tarfile-extractall-traversal.tarfile-extractall-traversal[0m
          Possible path traversal through `tarfile.open($PATH).extractall()` if the source tar is controlled
          by an attacker                                                                                    
          Details: https://sg.run/2RLD                                                                      
                                                                                                            
          258┆ tf = tarfile.open(self.src_file)
          259┆ name = self.build_template.format(self.version)
          260┆ base = name + '/'
          261┆ # force extraction into build dir
          262┆ members = tf.getmembers()
          263┆ for member in list(members):
          264┆     if member.name == name:
          265┆         members.remove(member)
          266┆     elif not member.name.startswith(base):
          267┆         raise ValueError(member.name, base)
             [hid 3 additional lines, adjust with --max-lines-per-finding] 
                                            
  [36m[22m[24m  Tools/unicode/gencodec.py[0m
    ❯❱ [1mpython.lang.security.audit.marshal.marshal-usage[0m
          The marshal module is not intended to be secure against erroneous or maliciously constructed data.
          Never unmarshal data received from an untrusted or unauthenticated source. See more details:      
          https://docs.python.org/3/library/marshal.html?highlight=security                                 
          Details: https://sg.run/3xor                                                                      
                                                                                                            
          370┆ marshal.dump(d,f)
            ⋮┆----------------------------------------
          412┆ map = marshal.load(f)
                                                   
  [36m[22m[24m  Tools/unicode/makeunicodedata.py[0m
    ❯❱ [1mpython.lang.security.audit.dynamic-urllib-use-detected.dynamic-urllib-use-detected[0m
          Detected a dynamic value being used with urllib. urllib supports 'file://' schemes, so a dynamic    
          value controlled by a malicious actor may allow them to read arbitrary files. Audit uses of urllib  
          calls to ensure user data cannot control the URLs, or consider using the 'requests' library instead.
          Details: https://sg.run/dKZZ                                                                        
                                                                                                              
          898┆ urllib.request.urlretrieve(url, filename=local)
                             
  [36m[22m[24m  install-sh[0m
    ❯❱ [1mbash.lang.security.ifs-tampering.ifs-tampering[0m
          The special variable IFS affects how splitting takes place when expanding unquoted variables. Don't
          set it globally. Prefer a dedicated utility such as 'cut' or 'awk' if you need to split input data.
          If you must use 'read', set IFS locally using e.g. 'IFS="," read -a my_array'.                     
          Details: https://sg.run/Q9pq                                                                       
                                                                                                             
           47┆ IFS=" $tab$nl"
            ⋮┆----------------------------------------
          396┆ IFS=/
            ⋮┆----------------------------------------
          401┆ IFS=$oIFS
