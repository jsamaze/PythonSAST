                     
                     
┌───────────────────┐
│ 153 Code Findings │
└───────────────────┘
                                                       
  [36m[22m[24m  docs/_themes/twistedtrac/layout.html[0m
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           14┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags }}"
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           14┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags }}"
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           14┆ <a href="{{ pathto(rellink[0]) }}" title="{{ rellink[1]|striptags }}"
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           19┆ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           19┆ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           19┆ <li><a href="{{ pathto(master_doc) }}">{{ shorttitle|e }}</a>{{ reldelim1 }}</li>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           22┆ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           22┆ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           22┆ <li><a href="{{ parent.link|e }}" {% if loop.last %}{{ accesskey("U") }}{% endif %}>{{
               parent.title }}</a>{{ reldelim1 }}</li>                                               
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           35┆ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           35┆ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           35┆ <p class="logo"><a href="{{ pathto(master_doc) }}">
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           42┆ <h3><a href="{{ pathto(master_doc) }}">{{ _('Table Of Contents') }}</a></h3>
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           42┆ <h3><a href="{{ pathto(master_doc) }}">{{ _('Table Of Contents') }}</a></h3>
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           42┆ <h3><a href="{{ pathto(master_doc) }}">{{ _('Table Of Contents') }}</a></h3>
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           49┆ <p class="topless"><a href="{{ prev.link|e }}"
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           49┆ <p class="topless"><a href="{{ prev.link|e }}"
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           49┆ <p class="topless"><a href="{{ prev.link|e }}"
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           54┆ <p class="topless"><a href="{{ next.link|e }}"
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           54┆ <p class="topless"><a href="{{ next.link|e }}"
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           54┆ <p class="topless"><a href="{{ next.link|e }}"
   
    ❯❱ [1mjavascript.express.security.audit.xss.mustache.var-in-href.var-in-href[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a       
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)      
          attacks. If using a relative URL, start with a literal forward slash and concatenate the URL, like
          this: href='/{{link}}'. You may also consider setting the Content Security Policy (CSP) header.   
          Details: https://sg.run/8yOq                                                                      
                                                                                                            
           62┆ <li><a href="{{ pathto('_sources/' + sourcename, true)|e }}"
   
    ❯❱ [1mpython.django.security.audit.xss.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a    
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)   
          attacks. Use the 'url' template tag to safely generate a URL. You may also consider setting the
          Content Security Policy (CSP) header.                                                          
          Details: https://sg.run/4x25                                                                   
                                                                                                         
           62┆ <li><a href="{{ pathto('_sources/' + sourcename, true)|e }}"
   
    ❯❱ [1mpython.flask.security.xss.audit.template-href-var.template-href-var[0m
          Detected a template variable used in an anchor tag with the 'href' attribute. This allows a 
          malicious actor to input the 'javascript:' URI and is subject to cross- site scripting (XSS)
          attacks. Use 'url_for()' to safely generate a URL. You may also consider setting the Content
          Security Policy (CSP) header.                                                               
          Details: https://sg.run/Do7o                                                                
                                                                                                      
           62┆ <li><a href="{{ pathto('_sources/' + sourcename, true)|e }}"
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
          111┆ URL_ROOT:    '{{ pathto("", 1) }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
          111┆ URL_ROOT:    '{{ pathto("", 1) }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
          112┆ VERSION:     '{{ release|e }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
          112┆ VERSION:     '{{ release|e }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
          114┆ FILE_SUFFIX: '{{ file_suffix }}',
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
          114┆ FILE_SUFFIX: '{{ file_suffix }}',
   
    ❯❱ [1mgeneric.html-templates.security.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/eLWE                                                                        
                                                                                                              
          115┆ HAS_SOURCE:  {{ has_source|lower }}
   
   ❯❯❱ [1mpython.django.security.audit.xss.var-in-script-tag.var-in-script-tag[0m
          Detected a template variable used in a script tag. Although template variables are HTML escaped,    
          HTML escaping does not always prevent cross-site scripting (XSS) attacks when used directly in      
          JavaScript. If you need this data on the rendered page, consider placing it in the HTML portion     
          (outside of a script tag). Alternatively, use a JavaScript-specific encoder, such as the one        
          available in OWASP ESAPI. For Django, you may also consider using the 'json_script' template tag and
          retrieving the data in your script by using the element ID (e.g., `document.getElementById`).       
          Details: https://sg.run/Ge7q                                                                        
                                                                                                              
          115┆ HAS_SOURCE:  {{ has_source|lower }}
            ⋮┆----------------------------------------
          119┆ <script type="text/javascript" src="{{ pathto(scriptfile, 1) }}"></script>
   
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          166┆ <a href="http://twistedmatrix.com/trac/wiki">HOME</a>
            ⋮┆----------------------------------------
          167┆ <a href="http://twistedmatrix.com/trac/wiki/FrequentlyAskedQuestions">FAQ</a>
            ⋮┆----------------------------------------
          169┆ <a href="http://twistedmatrix.com/trac/wiki/Downloads">DOWNLOAD</a>
            ⋮┆----------------------------------------
          173┆ <a id="logo" href="http://twistedmatrix.com/trac/"><img src="{{
               pathto('_static/trac_banner.png', 1) }}" alt="Twisted" /></a>  
            ⋮┆----------------------------------------
          264┆ By <a href="http://huw.ugbox.net/">huw.wilkins.</a>
                                                    
  [36m[22m[24m  docs/conch/howto/conch_client.rst[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
          290┆ privateKey = """-----BEGIN RSA PRIVATE KEY-----
          291┆ MIIByAIBAAJhAK8ycfDmDpyZs3+LXwRLy4vA1T6yd/3PZNiPwM+uH8Yx3/YpskSW
                                                  
  [36m[22m[24m  docs/core/benchmarks/failure.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           26┆ exec(s)
            ⋮┆----------------------------------------
           28┆     exec("""
           29┆ def deepFailure%d_%d():
           30┆     1 / 0
           31┆ """ % (nLocals, DEPTH))
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           37┆ eval('deepFailure%d_0' % n)()
            ⋮┆----------------------------------------
           44┆ eval('deepFailure%d_0' % n)()
                                                      
  [36m[22m[24m  docs/core/benchmarks/tpserver_nt.py[0m
     ❱ [1mpython.lang.security.audit.network.bind.avoid-bind-to-all-interfaces[0m
          Running `socket.bind` to 0.0.0.0, or empty string could unexpectedly expose the server publicly as
          it binds to all available interfaces. Consider instead getting correct address from an environment
          variable or configuration file.                                                                   
          Details: https://sg.run/rdln                                                                      
                                                                                                            
           12┆ s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
           13┆ s.bind(('', 8001))
                                                
  [36m[22m[24m  docs/core/examples/server.pem[0m
   ❯❯❱ [1mgeneric.secrets.security.detected-private-key.detected-private-key[0m
          Private Key detected. This is a sensitive credential and should not be hardcoded here. Instead,
          store this in a separate, private file.                                                        
          Details: https://sg.run/b7dr                                                                   
                                                                                                         
           17┆ -----BEGIN RSA PRIVATE KEY-----
           18┆ MIICXQIBAAKBgQCpEWoSHBadFeOEGKTvbnu5o2TW2WDwAvHGqEAtY1IC+Ngk+ND3
                                                                             
  [36m[22m[24m  docs/core/howto/tutorial/listings/finger/fingerXRclient.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
            5┆ from xmlrpc.client import Server
            ⋮┆----------------------------------------
            8┆ from xmlrpclib import Server
                                         
  [36m[22m[24m  docs/fun/register.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           16┆ their page on <a
           17┆ href="http://www.bsa.org/usa/antipiracy/">anti-piracy</a>:</p>
            ⋮┆----------------------------------------
           44┆ <a href="http://www.twistedmatrix.com/license">the Twisted
           45┆ Matrix Labs Licensing and Registration page</a>, and enter your
                                                                                 
  [36m[22m[24m  docs/historic/2002/ipc10/twisted-network-framework/errata.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           13┆ version of Twisted that was current at <a
           14┆ href="http://www.python10.com">IPC10</a>. It has since been
                                                                                
  [36m[22m[24m  docs/historic/2002/ipc10/twisted-network-framework/index.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           12┆ version of Twisted that were current previous to <a
           13┆ href="http://www.python10.com">IPC10</a>. Even at the time of
                                                               
  [36m[22m[24m  docs/historic/2003/europython/doanddont.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          398┆ <li><a href="http://aspn.activestate.com/ASPN/Python/Reference/Products/ActivePython/howtos
               /doanddont/doanddont.html">http://aspn.activestate.com/ASPN/Python/Reference/Products/Activ
               ePython/howtos/doanddont/doanddont.html</a></li>                                           
            ⋮┆----------------------------------------
          400┆ <li><a href="http://www.amk.ca/python/writing/warts.html">http://www.amk.ca/python/writing/
               warts.html</a></li>                                                                        
            ⋮┆----------------------------------------
          402┆ <li><a href="http://www.python.org/doc/essays/styleguide.html">http://www.python.org/doc/es
               says/styleguide.html</a></li>                                                              
                                                               
  [36m[22m[24m  docs/historic/2003/europython/tw-deploy.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          232┆ <li><a href="http://itamarst.org/software/bannerfish/">http://itamarst.org/software/bannerf
               ish/</a></li>                                                                              
                                                             
  [36m[22m[24m  docs/historic/2003/europython/twisted.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          442┆ <li><a href="http://twistedmatrix.com/documents/">Twisted Docs</a></li>
                                                                
  [36m[22m[24m  docs/historic/2003/europython/webclients.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          372┆ <li>htmllib docs <a href="http://www.python.org/doc/current/lib/module-         
               htmllib.html">http://www.python.org/doc/current/lib/module-htmllib.html</a></li>
            ⋮┆----------------------------------------
          374┆ <li>sgmllib docs<a href="http://www.python.org/doc/current/lib/module-          
               sgmllib.html">http://www.python.org/doc/current/lib/module-sgmllib.html</a></li>
            ⋮┆----------------------------------------
          376┆ <li>urllib docs<a href="http://www.python.org/doc/current/lib/module-         
               urllib.html">http://www.python.org/doc/current/lib/module-urllib.html</a></li>
            ⋮┆----------------------------------------
          378┆ <li>urllib2 docs<a href="http://www.python.org/doc/current/lib/module-          
               urllib2.html">http://www.python.org/doc/current/lib/module-urllib2.html</a></li>
            ⋮┆----------------------------------------
          380┆ <li>httplib docs<a href="http://www.python.org/doc/current/lib/module-          
               httplib.html">http://www.python.org/doc/current/lib/module-httplib.html</a></li>
            ⋮┆----------------------------------------
          382┆ <li>re docs<a href="http://www.python.org/doc/current/lib/module-     
               re.html">http://www.python.org/doc/current/lib/module-re.html</a></li>
            ⋮┆----------------------------------------
          384┆ <li>HTTP RFC<a href="http://www.w3.org/Protocols/rfc2616/rfc2616.html">http://www.w3.org/Pr
               otocols/rfc2616/rfc2616.html</a></li>                                                      
            ⋮┆----------------------------------------
          386┆ <li>W3C HTML Page<a href="http://www.w3.org/MarkUp/">http://www.w3.org/MarkUp/</a></li>
            ⋮┆----------------------------------------
          388┆ <li>Twisted<a href="http://twistedmatrix.com">http://twistedmatrix.com</a></li>
                                                                          
  [36m[22m[24m  docs/historic/2003/pycon/applications/applications.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          192┆ dotted-quads, to the informative dictionary module, which queries an <a
          193┆ href="http://dict.org">online dictionary</a>, plugins come in all shapes
                                                                
  [36m[22m[24m  docs/historic/2003/pycon/deferex/deferex.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          478┆ <li><a name="stiegler"></a>Marc Stiegler, <a
          479┆ href="http://www.skyhunter.com/marcs/ewalnut.html#SEC19">The E Language in a
          480┆ Walnut</a>, <i>erights.org</i></li>
            ⋮┆----------------------------------------
          482┆   <li><a name="hylton"></a>Jeremy Hylton, <a
          483┆ href="http://www.python.org/peps/pep-0227.html" >PEP 227, &quot;Statically
          484┆ Nested Scopes&quot;</a></li>
            ⋮┆----------------------------------------
          486┆   <li><a name="pitman"></a>Kent Pitman, <a
          487┆ href="http://www.nhplace.com/kent/PFAQ/unwind-protect-vs-continuations.html"
          488┆   >UNWIND-PROTECT vs. Continuations</a>, <i>Kent Pitman's Personal FAQ</i></li>
            ⋮┆----------------------------------------
          490┆ <li><a name="tismer">Christian Tismer, <a
          491┆ href="http://www.stackless.com/spcpaper.htm">Continuations and Stackless
          492┆ Python</a>, <i>Proceedings of the Sixth International Python Conference</i>
                                                          
  [36m[22m[24m  docs/historic/2003/pycon/lore/lore.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           66┆ <a href="http://twistedmatrix.com">Twisted</a> framework. It uses
            ⋮┆----------------------------------------
          430┆ <a href="http://epydoc.sourceforge.net">epydoc</a>,
            ⋮┆----------------------------------------
          772┆ <li><a
          773┆   href="http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-1.0.3/man/lore-
               man.xhtml"><code                                                                  
          774┆       class="shell">lore(1)</code> man page</a></li>
            ⋮┆----------------------------------------
          775┆ <li><a
          776┆   href="http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-1.0.3/howto/doc-
               standard">Lore guidelines</a></li>                                                 
            ⋮┆----------------------------------------
          777┆ <li><a
          778┆   href="http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-1.0.3/howto/lore">Lore
               HOWTO</a></li>                                                                           
            ⋮┆----------------------------------------
          779┆ <li><a
          780┆   href="http://twistedmatrix.com/documents/TwistedDocs/TwistedDocs-
               1.0.1/examples/example.html">Skeleton Lore document</a></li>       
            ⋮┆----------------------------------------
          781┆ <li>The <a
          782┆   href="http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/~checkout~/doc/how
               to/stylesheet.css?rev=1.16&amp;content-type=text/css&amp;cvsroot=Twisted">stylesheet</a>   
               and <a                                                                                     
            ⋮┆----------------------------------------
          782┆ href="http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/~checkout~/doc/howto
               /stylesheet.css?rev=1.16&amp;content-type=text/css&amp;cvsroot=Twisted">stylesheet</a> and 
               <a                                                                                         
          783┆ href="http://twistedmatrix.com/users/jh.twistd/viewcvs/cgi/viewcvs.cgi/~checkout~/doc/howto
               /template.tpl?rev=1.6&amp;content-type=text/plain&amp;cvsroot=Twisted">template</a> used by
               the Twisted documentation</li>                                                             
            ⋮┆----------------------------------------
          784┆ <li><a href="http://www.w3.org/TR/xhtml1/">The XHTML specification</a></li>
            ⋮┆----------------------------------------
          785┆ <li><a href="http://www.latex-project.org">LaTeX project home page</a></li>
            ⋮┆----------------------------------------
          786┆ <li><a href="http://www.lyx.org">LyX</a></li>
            ⋮┆----------------------------------------
          787┆ <li><a href="http://www.docbook.org">Docbook</a></li>
            ⋮┆----------------------------------------
          788┆ <li><a href="http://www.python10.com/p10-papers/09/index.htm">Zadka, Moshe and Lefkowitz,
               Glyph, The Twisted Network Framework, The Tenth International Python Conference          
               Proceedings</a></li>                                                                     
                                                            
  [36m[22m[24m  docs/historic/2003/pycon/pb/pb-server1.py[0m
    ❯❱ [1mpython.flask.security.audit.app-run-security-config.avoid_using_app_run_directly[0m
          top-level app.run(...) is ignored by flask. Consider putting app.run(...) behind a guard, like
          inside a function                                                                             
          Details: https://sg.run/vz5b                                                                  
                                                                                                        
           16┆ app.run(save=0)
                                                      
  [36m[22m[24m  docs/historic/2003/pycon/pb/pb.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           14┆ <li><a href="http://www.lothar.com">Brian Warner</a>:
            ⋮┆----------------------------------------
          113┆ examples, look at the PB <q>howto</q> docs at <a
          114┆ href="http://twistedmatrix.com/documents/howto/">twistedmatrix.com</a>.</p>
            ⋮┆----------------------------------------
          388┆ <p>The PB <a href="http://twistedmatrix.com/documents/howto/"
          389┆ ><q>howto</q> docs</a> have more information and complete examples of both
                                                                    
  [36m[22m[24m  docs/historic/2003/pycon/releasing/releasing.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           95┆ multiple platforms, so the <a
           96┆ href="http://twistedmatrix.com/users/warner.twistd/">status page</a>
            ⋮┆----------------------------------------
          103┆ Acceptance tests (which, unfortunately, are not quite the same as <a
          104┆ href="http://xprogramming.org/">Extreme Programming's</a> Acceptance
            ⋮┆----------------------------------------
          315┆ mirror at <a
          316┆ href="http://twisted.sourceforge.net">http://twisted.sourceforge.net/</a>.
                                                                                
  [36m[22m[24m  docs/historic/2003/pycon/twisted-reality/twisted-reality.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
          558┆ <li>Jason Asbahr, <a
          559┆             href="http://asbahr.com/paper1html/paper1.html">Beyond: A
          560┆             Portable Virtual World Simulation Framework</a>,
            ⋮┆----------------------------------------
          567┆ <li> Brandon Gillespie, <i><a
          568┆               href="http://ice.cold.org:1180/bin/help?node=coldc">ColdC Reference
               Manual</a></i>, 2001.</li>                                                       
            ⋮┆----------------------------------------
          569┆ <li>Glyph Lefkowitz, and Moshe Zadka, <q><a
          570┆             href="http://twistedmatrix.com/doc/historic/ipc10paper">The Twisted Network   
               Framework</a></q>, <i>Proceedings of the Tenth International Python Conference</i> (2002):
               83.</li>                                                                                  
            ⋮┆----------------------------------------
          571┆ <li>Graham Nelson, <i><a href="http://www.inform-fiction.org/manual/about_dm4.html">The
          572┆             Inform Designer's Manual</a></i>. 4th ed. (St Charles, IL:
                                                 
  [36m[22m[24m  docs/historic/ipc10errata.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           13┆ version of Twisted that was current at <a
           14┆ href="http://www.python10.com">IPC10</a>. It has since been
                                                
  [36m[22m[24m  docs/historic/ipc10paper.html[0m
    ❯❱ [1mhtml.security.plaintext-http-link.plaintext-http-link[0m
          This link points to a plaintext HTTP URL. Prefer an encrypted HTTPS URL if possible.
          Details: https://sg.run/RA5q                                                        
                                                                                              
           12┆ version of Twisted that were current previous to <a
           13┆ href="http://www.python10.com">IPC10</a>. Even at the time of
                                              
  [36m[22m[24m  docs/web/examples/xmlrpc.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           29┆ import xmlrpclib
                           
  [36m[22m[24m  setup.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           17┆ exec(f.read(), _setup)
                                                      
  [36m[22m[24m  src/twisted/application/internet.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          223┆ base = globals()['_Abstract'+side]
                                                      
  [36m[22m[24m  src/twisted/conch/insults/helper.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          117┆ exec(execStr)
                                                       
  [36m[22m[24m  src/twisted/conch/insults/insults.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          1129┆ exec(ch + " = _makeSimple(ch, fName)")
                                                
  [36m[22m[24m  src/twisted/conch/recvline.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
           71┆ exec(execStr)
            ⋮┆----------------------------------------
           82┆         exec("""\
           83┆ def %s(self, *a, **kw):
           84┆     for tpt in self.transports:
           85┆         result = tpt.%s(*a, **kw)
           86┆     return result
           87┆ """ % (method, method))
                                                        
  [36m[22m[24m  src/twisted/conch/ssh/filetransfer.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1053┆ value = g[name]
                                                
  [36m[22m[24m  src/twisted/conch/ssh/keys.py[0m
    ❯❱ [1mpython.cryptography.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/J9Qy                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0mSHA256
          1379┆ sig = self._keyObject.sign(data, padding.PKCS1v15(), hashes.SHA1())
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mSHA256
          1383┆ sig = self._keyObject.sign(data, hashes.SHA1())
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mSHA256
          1459┆ hashes.SHA1(),
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0mSHA256
          1469┆ args = (signature, data, hashes.SHA1())
                                                     
  [36m[22m[24m  src/twisted/conch/ssh/transport.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256()
          1356┆ h = sha1()
            ⋮┆----------------------------------------
           [32m▶▶┆ Autofix ▶ [0msha256()
          1784┆ h = sha1()
                                           
  [36m[22m[24m  src/twisted/mail/pop3.py[0m
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          1636┆ digest = md5(magic + password).hexdigest().encode("ascii")
                                                 
  [36m[22m[24m  src/twisted/mail/pop3client.py[0m
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          903┆ digest = md5(challenge + password).hexdigest().encode("ascii")
                                            
  [36m[22m[24m  src/twisted/mail/relay.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           82┆ pickle.dump([str(user.orig), str(user.dest)], envelopeFile)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           82┆ pickle.dump([str(user.orig), str(user.dest)], envelopeFile)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           98┆ messageContents = pickle.load(fp)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           98┆ messageContents = pickle.load(fp)
                                                   
  [36m[22m[24m  src/twisted/mail/relaymanager.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          456┆ return pickle.load(f)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          456┆ return pickle.load(f)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          587┆ from_, to = pickle.load(fp)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          587┆ from_, to = pickle.load(fp)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          592┆ pickle.dump([from_, to], fp)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          592┆ pickle.dump([from_, to], fp)
                                               
  [36m[22m[24m  src/twisted/news/database.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          465┆ pickle.dump(self.db, f)
            ⋮┆----------------------------------------
          474┆ self.db = pickle.load(f)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          830┆ transaction.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          830┆ transaction.execute(sql)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          846┆ transaction.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          846┆ transaction.execute(sql)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          875┆ transaction.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          875┆ transaction.execute(sql)
   
    ❯❱ [1mpython.lang.security.audit.formatted-sql-query.formatted-sql-query[0m
          Detected possible formatted SQL query. Use parameterized queries instead.
          Details: https://sg.run/EkWw                                             
                                                                                   
          883┆ transaction.execute(sql)
   
   ❯❯❱ [1mpython.sqlalchemy.security.sqlalchemy-execute-raw-query.sqlalchemy-execute-raw-query[0m
          Avoiding SQL string concatenation: untrusted input concatenated with raw SQL query can result in SQL
          Injection. In order to execute raw query safely, prepared statement should be used. SQLAlchemy      
          provides TextualSQL to easily used prepared statement with named parameters. For complex SQL        
          composition, use SQL Expression Language or Schema Definition Language. In most cases, SQLAlchemy   
          ORM will be a better option.                                                                        
          Details: https://sg.run/2b1L                                                                        
                                                                                                              
          883┆ transaction.execute(sql)
                                               
  [36m[22m[24m  src/twisted/persisted/aot.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          271┆ eval(code, ns, ns)
                                                  
  [36m[22m[24m  src/twisted/persisted/dirdbm.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          358┆ v = pickle.dumps(v)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          358┆ v = pickle.dumps(v)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
          373┆ return pickle.loads(DirDBM.__getitem__(self, k))
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          373┆ return pickle.loads(DirDBM.__getitem__(self, k))
                                               
  [36m[22m[24m  src/twisted/persisted/sob.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-cPickle[0m
          Avoid using `cPickle`, which is known to lead to code execution vulnerabilities. When unpickling,
          the serialized data could be manipulated to run arbitrary code. Instead, consider serializing the
          relevant data as JSON or a similar text-based serialization format.                              
          Details: https://sg.run/eLxb                                                                     
                                                                                                           
           84┆ pickle.dump(obj, file, 2)
   
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
           84┆ pickle.dump(obj, file, 2)
   
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
          177┆ eval(codeObj, d, d)
                                        
  [36m[22m[24m  src/twisted/plugin.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          157┆ dropinDotCache = pickle.load(f)
            ⋮┆----------------------------------------
          185┆ dropinPath.setContent(pickle.dumps(dropinDotCache))
                                               
  [36m[22m[24m  src/twisted/protocols/ftp.py[0m
    ❯❱ [1mpython.lang.security.audit.hardcoded-password-default-argument.hardcoded-password-default-argument[0m
          Hardcoded password is used as a default argument to '__init__'. This could be dangerous if a real
          password is not supplied.                                                                        
          Details: https://sg.run/Lw9r                                                                     
                                                                                                           
          2713┆ def __init__(self, username='anonymous',
          2714┆              password='twisted@twistedmatrix.com',
          2715┆              passive=1):
          2716┆     """
          2717┆     Constructor.
          2718┆
          2719┆     I will login as soon as I receive the welcome message from the server.
          2720┆
          2721┆     @param username: FTP username
          2722┆     @param password: FTP password
             [hid 8 additional lines, adjust with --max-lines-per-finding] 
                                               
  [36m[22m[24m  src/twisted/python/compat.py[0m
    ❯❱ [1mpython.lang.security.audit.exec-detected.exec-detected[0m
          Detected the use of exec(). exec() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ndRX                                                                     
                                                                                                           
          247┆ exec(code, globals, locals)
                                                
  [36m[22m[24m  src/twisted/python/reflect.py[0m
    ❯❱ [1mpython.lang.security.deserialization.pickle.avoid-pickle[0m
          Avoid using `pickle`, which is known to lead to code execution vulnerabilities. When unpickling, the
          serialized data could be manipulated to run arbitrary code. Instead, consider serializing the       
          relevant data as JSON or a similar text-based serialization format.                                 
          Details: https://sg.run/OPwB                                                                        
                                                                                                              
          468┆ qualName = (str(pickle.whichmodule(func, func.__name__)) + '.' + func.__name__)
                                             
  [36m[22m[24m  src/twisted/python/util.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          1026┆ del globals()[name]
                                           
  [36m[22m[24m  src/twisted/spread/pb.py[0m
    ❯❱ [1mpython.lang.security.audit.md5-used-as-password.md5-used-as-password[0m
          It looks like MD5 is used as a password hash. MD5 is not considered a secure password hash because  
          it can be cracked by an attacker in a short amount of time. Use a suitable password hashing function
          such as scrypt. You can use `hashlib.scrypt`.                                                       
          Details: https://sg.run/5DwD                                                                        
                                                                                                              
          1643┆ return self.checkMD5Password(md5(password).digest())
                                          
  [36m[22m[24m  src/twisted/web/http.py[0m
    ❯❱ [1mpython.flask.security.audit.directly-returned-format-string.directly-returned-format-string[0m
          Detected Flask route directly returning a formatted string. This is subject to cross-site scripting
          if user input can reach the string. Consider using the template engine instead and rendering pages 
          with 'render_template()'.                                                                          
          Details: https://sg.run/Zv6o                                                                       
                                                                                                             
          2699┆ return line
                                            
  [36m[22m[24m  src/twisted/web/script.py[0m
    ❯❱ [1mpython.lang.security.audit.eval-detected.eval-detected[0m
          Detected the use of eval(). eval() can be dangerous if used to evaluate dynamic content. If this 
          content can be input from outside the program, this may be a code injection vulnerability. Ensure
          evaluated content is not definable by external sources.                                          
          Details: https://sg.run/ZvrD                                                                     
                                                                                                           
           85┆ eval(code, glob, glob)
                                            
  [36m[22m[24m  src/twisted/web/xmlrpc.py[0m
   ❯❯❱ [1mpython.lang.security.use-defused-xmlrpc.use-defused-xmlrpc[0m
          Detected use of xmlrpc. xmlrpc is not inherently safe from vulnerabilities. Use defusedxml.xmlrpc
          instead.                                                                                         
          Details: https://sg.run/weqY                                                                     
                                                                                                           
           22┆ import xmlrpc.client as xmlrpclib
            ⋮┆----------------------------------------
           24┆ import xmlrpclib
                                                                  
  [36m[22m[24m  src/twisted/words/protocols/jabber/xmlstream.py[0m
    ❯❱ [1mpython.lang.security.insecure-hash-algorithms.insecure-hash-algorithm-sha1[0m
          Detected SHA1 hash algorithm which is considered insecure. SHA1 is not collision resistant and is
          therefore not suitable as a cryptographic signature. Use SHA256 or SHA3 instead.                 
          Details: https://sg.run/ydYx                                                                     
                                                                                                           
           [32m▶▶┆ Autofix ▶ [0msha256(input.encode('utf-8'))
           71┆ return sha1(input.encode('utf-8')).hexdigest()
                                                  
  [36m[22m[24m  src/twisted/words/xish/xpath.py[0m
    ❯❱ [1mpython.lang.security.dangerous-globals-use.dangerous-globals-use[0m
          Found non static data as an index to 'globals()'. This is extremely dangerous because it allows an
          attacker to execute arbitrary code on the system. Refactor your code not to use 'globals()'.      
          Details: https://sg.run/jNzn                                                                      
                                                                                                            
          105┆ c = globals()[klassname]()
